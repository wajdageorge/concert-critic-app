{"file_contents":{"design_guidelines.md":{"content":"# ConcertCritic Design Guidelines\n\n## Design Approach: Reference-Based (Music Platform Inspiration)\nDrawing inspiration from Spotify, Bandcamp, and Apple Music for their sophisticated music-focused aesthetics, combined with social platform patterns from Instagram for the review and discovery experience.\n\n## Core Design Elements\n\n### Color Palette\n**Dark Mode Primary:**\n- Background: 15 8% 8% (deep charcoal)\n- Surface: 15 6% 12% (elevated charcoal)\n- Primary: 206 100% 75% (vibrant carolina blue - concert stage lighting)\n- Text: 0 0% 95% (near white)\n- Muted text: 0 0% 65% (medium gray)\n\n**Light Mode Primary:**\n- Background: 0 0% 98% (off-white)\n- Surface: 0 0% 100% (pure white)\n- Primary: 206 100% 65% (deeper carolina blue)\n- Text: 0 0% 10% (near black)\n- Muted text: 0 0% 45% (medium gray)\n\n**Accent Colors:**\n- Success: 142 76% 36% (forest green for positive reviews)\n- Warning: 45 93% 47% (amber for moderate ratings)\n- Error: 0 72% 51% (red for negative feedback)\n\n### Typography\n- **Primary:** Inter (Google Fonts) - clean, modern readability\n- **Display:** Poppins (Google Fonts) - bold headers and concert names\n- **Mono:** JetBrains Mono - timestamps and metadata\n\n### Layout System\nConsistent Tailwind spacing using units: 2, 4, 6, 8, 12, 16\n- Tight spacing: p-2, m-2 (8px)\n- Standard spacing: p-4, m-4 (16px)\n- Section spacing: p-8, m-8 (32px)\n- Large spacing: p-16, m-16 (64px)\n\n### Component Library\n\n**Navigation:**\n- Sticky top navigation with concert discovery, reviews, and profile tabs\n- Bottom mobile navigation for key actions\n- Sidebar for desktop with collapsible sections\n\n**Forms:**\n- Rounded input fields (rounded-lg) with subtle borders\n- Multi-criteria rating sliders for venue reviews\n- Star rating components for concerts\n- Rich text editor for detailed reviews\n\n**Data Displays:**\n- Concert cards with gradient overlays on artist images\n- Review cards with user avatars and rating displays\n- Venue information panels with accessibility indicators\n- Timeline views for concert history\n\n**Social Features:**\n- Follow/unfollow buttons with carolina blue accent\n- User profile grids showing concert attendance\n- Comment threads on reviews\n- Like/dislike interactions with subtle animations\n\n### Visual Treatments\n\n**Gradients:**\n- Hero sections: Subtle carolina blue to deep blue (206 100% 75% to 240 80% 30%)\n- Concert cards: Dark overlay gradients for text readability\n- Background accents: Vertical gradients in sidebar areas\n\n**Content Strategy:**\n- Concert discovery as primary focus with prominent search\n- User-generated content (reviews) as secondary emphasis\n- Social proof through follower counts and review metrics\n- Venue accessibility information prominently displayed\n\n### Images\n**Concert/Artist Images:**\n- Large hero images on individual concert pages with gradient overlays\n- Card thumbnails in discovery grid (16:9 aspect ratio)\n- User-uploaded review photos in gallery format\n- Profile avatars (circular, consistent sizing)\n\n**No large homepage hero image** - instead focus on dynamic concert discovery grid as the primary visual element.\n\n### Accessibility & Interaction\n- High contrast ratios maintained in both modes\n- Keyboard navigation for all interactive elements\n- Screen reader support for rating systems\n- Consistent focus states with carolina blue accent rings\n- Smooth transitions (duration-200) for state changes only\n\nThis design balances the energy of live music with the functionality needed for detailed reviews and social discovery.","size_bytes":3504},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage, db } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertConcertSchema, insertReviewSchema, insertUserSchema, insertReviewCommentSchema, concerts } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\nimport multer from \"multer\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\n\n// Authentication middleware is now imported from replitAuth\n\n// Helper function for consistent user ID extraction\nfunction getUserId(req: any): string {\n  return req.user?.claims?.sub; // Replit Auth style\n}\n\n// Configure multer for handling file uploads in memory\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: {\n    fileSize: 10 * 1024 * 1024, // 10MB limit for photos and videos\n  },\n  fileFilter: (req, file, cb) => {\n    // Accept image and video files\n    if (file.mimetype.startsWith('image/') || file.mimetype.startsWith('video/')) {\n      cb(null, true);\n    } else {\n      cb(null, false);\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth setup with Replit Auth integration\n  await setupAuth(app);\n\n  // Add auth/user route for Replit Auth\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Frontend expects /api/user route (for useAuth hook)\n  app.get('/api/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n  \n  // Note: /api/register, /api/login, /api/logout routes are handled in setupAuth\n\n  // File upload route for review media (photos/videos)\n  app.post(\"/api/upload\", isAuthenticated, upload.array('files', 5), async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n\n      const files = req.files as Express.Multer.File[];\n      if (!files || files.length === 0) {\n        return res.status(400).json({ error: \"No files provided\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      const uploadedPaths: string[] = [];\n\n      for (const file of files) {\n        try {\n          const path = await objectStorageService.uploadFile(\n            file.buffer,\n            file.mimetype,\n            file.originalname\n          );\n          uploadedPaths.push(path);\n        } catch (error) {\n          console.error(`Error uploading file ${file.originalname}:`, error);\n        }\n      }\n\n      if (uploadedPaths.length === 0) {\n        return res.status(500).json({ error: \"Failed to upload files\" });\n      }\n\n      res.json({ paths: uploadedPaths });\n    } catch (error) {\n      console.error(\"Error in upload route:\", error);\n      res.status(500).json({ error: \"Failed to upload files\" });\n    }\n  });\n\n  // Profile image upload route (single file)\n  app.post(\"/api/upload/profile-image\", isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n\n      const file = req.file as Express.Multer.File;\n      if (!file) {\n        return res.status(400).json({ error: \"No file provided\" });\n      }\n\n      // Validate file type (images only)\n      if (!file.mimetype.startsWith('image/')) {\n        return res.status(400).json({ error: \"Only image files are allowed\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      \n      const path = await objectStorageService.uploadFile(\n        file.buffer,\n        file.mimetype,\n        file.originalname\n      );\n\n      res.json({ url: path });\n    } catch (error) {\n      console.error(\"Error in profile image upload route:\", error);\n      res.status(500).json({ error: \"Failed to upload profile image\" });\n    }\n  });\n\n  // Concert discovery and search API with Ticketmaster and Setlist.fm integration (public endpoints)\n  app.get(\"/api/concerts\", async (req, res) => {\n    try {\n      const { search, genre, city, limit, offset, includeTicketmaster, includeHistorical, startDate, endDate } = req.query;\n      const concerts = await storage.getConcertsWithHistorical({\n        search: search as string,\n        genre: genre as string,\n        city: city as string,\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n        includeTicketmaster: includeTicketmaster === 'true',\n        includeHistorical: includeHistorical === 'true',\n        startDate: startDate as string,\n        endDate: endDate as string,\n      });\n      res.json(concerts);\n    } catch (error) {\n      console.error(\"Error fetching concerts:\", error);\n      res.status(500).json({ error: \"Failed to fetch concerts\" });\n    }\n  });\n\n  // Ticketmaster-only search endpoint (public)\n  app.get(\"/api/ticketmaster/events/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const event = await storage.getTicketmasterEvent(id);\n      if (!event) {\n        return res.status(404).json({ error: \"Event not found\" });\n      }\n      res.json(event);\n    } catch (error) {\n      console.error(\"Error fetching Ticketmaster event:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/ticketmaster/events\", async (req, res) => {\n    try {\n      const { keyword, city, genre, limit, page } = req.query;\n      const events = await storage.searchTicketmasterEvents({\n        keyword: keyword as string,\n        city: city as string,\n        classificationName: genre as string,\n        size: limit ? parseInt(limit as string) : 20,\n        page: page ? parseInt(page as string) : 0,\n      });\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error searching Ticketmaster events:\", error);\n      res.status(500).json({ error: \"Failed to search Ticketmaster events\" });\n    }\n  });\n\n  // Setlist.fm-only search endpoint for historical concerts (public)\n  app.get(\"/api/setlistfm/events\", async (req, res) => {\n    try {\n      const { artistName, venueName, cityName, year, limit, page } = req.query;\n      const events = await storage.searchSetlistFmEvents({\n        artistName: artistName as string,\n        venueName: venueName as string,\n        cityName: cityName as string,\n        year: year as string,\n        p: page ? parseInt(page as string) : 1, // Setlist.fm pages start at 1\n      });\n      \n      // Apply limit if specified (Setlist.fm returns 20 per page by default)\n      const limitNum = limit ? parseInt(limit as string) : 20;\n      const limitedEvents = events.slice(0, limitNum);\n      \n      res.json(limitedEvents);\n    } catch (error) {\n      console.error(\"Error searching Setlist.fm events:\", error);\n      res.status(500).json({ error: \"Failed to search Setlist.fm events\" });\n    }\n  });\n\n  app.get(\"/api/concerts/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const concert = await storage.getConcert(id);\n      if (!concert) {\n        return res.status(404).json({ error: \"Concert not found\" });\n      }\n      res.json(concert);\n    } catch (error) {\n      console.error(\"Error fetching concert:\", error);\n      res.status(500).json({ error: \"Failed to fetch concert\" });\n    }\n  });\n\n  // Protected concert management (authenticated users only)\n  app.post(\"/api/concerts\", isAuthenticated, async (req, res) => {\n    try {\n      const validation = insertConcertSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({\n          error: \"Invalid concert data\",\n          details: fromZodError(validation.error).toString(),\n        });\n      }\n      const concert = await storage.createConcert(validation.data);\n      res.status(201).json(concert);\n    } catch (error) {\n      console.error(\"Error creating concert:\", error);\n      res.status(500).json({ error: \"Failed to create concert\" });\n    }\n  });\n\n  app.put(\"/api/concerts/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validation = insertConcertSchema.partial().safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({\n          error: \"Invalid concert data\",\n          details: fromZodError(validation.error).toString(),\n        });\n      }\n      const concert = await storage.updateConcert(id, validation.data);\n      if (!concert) {\n        return res.status(404).json({ error: \"Concert not found\" });\n      }\n      res.json(concert);\n    } catch (error) {\n      console.error(\"Error updating concert:\", error);\n      res.status(500).json({ error: \"Failed to update concert\" });\n    }\n  });\n\n  app.delete(\"/api/concerts/:id\", isAuthenticated, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteConcert(id);\n      if (!success) {\n        return res.status(404).json({ error: \"Concert not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting concert:\", error);\n      res.status(500).json({ error: \"Failed to delete concert\" });\n    }\n  });\n\n  // Reviews API - General reviews endpoint for timeline/feed (public endpoint)\n  app.get(\"/api/reviews\", async (req, res) => {\n    try {\n      const { limit, offset, sort } = req.query;\n      const reviews = await storage.getAllReviews({\n        limit: limit ? parseInt(limit as string) : undefined,\n        offset: offset ? parseInt(offset as string) : undefined,\n        sort: sort as 'recent' | 'rating' | 'oldest' || 'recent',\n      });\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching all reviews:\", error);\n      res.status(500).json({ error: \"Failed to fetch reviews\" });\n    }\n  });\n\n  // Reviews API - Mixed public/protected routes\n  app.get(\"/api/concerts/:concertId/reviews\", async (req, res) => {\n    try {\n      const { concertId } = req.params;\n      // Get authenticated user ID if available, but don't require it\n      let currentUserId: string | undefined;\n      if (getUserId(req)) {\n        currentUserId = getUserId(req);\n      }\n      \n      const reviews = await storage.getReviewsForConcert(concertId, currentUserId);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching concert reviews:\", error);\n      res.status(500).json({ error: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/reviews\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      // Get authenticated user ID if available, but don't require it\n      let currentUserId: string | undefined;\n      if (getUserId(req)) {\n        currentUserId = getUserId(req);\n      }\n      \n      const reviews = await storage.getReviewsForUser(userId, currentUserId);\n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching user reviews:\", error);\n      res.status(500).json({ error: \"Failed to fetch reviews\" });\n    }\n  });\n\n  // Protected review operations\n  app.post(\"/api/reviews\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req); // Get user ID from authenticated session\n      \n      // Check if userId is undefined and return 401 if so\n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      // Extract concert data if provided (for concerts not yet in database)\n      const { concert, ...reviewBody } = req.body;\n      \n      // If concert data is provided, ensure it exists in database\n      if (concert) {\n        const concertId = concert.id;\n        const existingConcert = await storage.getConcert(concertId);\n        \n        // Create concert if it doesn't exist\n        if (!existingConcert) {\n          console.log(`Creating concert with ID ${concertId} before review creation`);\n          await db.insert(concerts).values({\n            id: concertId,\n            artist: concert.artist,\n            venue: concert.venue,\n            city: concert.city,\n            date: concert.date,\n            time: concert.time || '',\n            price: concert.price || '',\n            genre: concert.genre || null,\n            imageUrl: concert.imageUrl || null,\n            ticketUrl: concert.ticketUrl || null,\n            description: concert.description || null,\n          });\n        }\n      }\n      \n      const validation = insertReviewSchema.safeParse({\n        ...reviewBody,\n        userId, // Override any client-provided userId with authenticated user\n      });\n      \n      if (!validation.success) {\n        return res.status(400).json({\n          error: \"Invalid review data\",\n          details: fromZodError(validation.error).toString(),\n        });\n      }\n      const review = await storage.createReview(validation.data);\n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      res.status(500).json({ error: \"Failed to create review\" });\n    }\n  });\n\n  app.put(\"/api/reviews/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = getUserId(req);\n      \n      // First check if user owns this review\n      const existingReview = await storage.getReview(id);\n      if (!existingReview) {\n        return res.status(404).json({ error: \"Review not found\" });\n      }\n      if (existingReview.userId !== userId) {\n        return res.status(403).json({ error: \"You can only edit your own reviews\" });\n      }\n\n      const validation = insertReviewSchema.partial().safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({\n          error: \"Invalid review data\",\n          details: fromZodError(validation.error).toString(),\n        });\n      }\n      \n      const review = await storage.updateReview(id, validation.data);\n      res.json(review);\n    } catch (error) {\n      console.error(\"Error updating review:\", error);\n      res.status(500).json({ error: \"Failed to update review\" });\n    }\n  });\n\n  app.delete(\"/api/reviews/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const userId = getUserId(req);\n      \n      // Check if user owns this review\n      const existingReview = await storage.getReview(id);\n      if (!existingReview) {\n        return res.status(404).json({ error: \"Review not found\" });\n      }\n      if (existingReview.userId !== userId) {\n        return res.status(403).json({ error: \"You can only delete your own reviews\" });\n      }\n\n      const success = await storage.deleteReview(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting review:\", error);\n      res.status(500).json({ error: \"Failed to delete review\" });\n    }\n  });\n\n  // Review likes API - SECURITY FIX: No more userId in request body\n  app.post(\"/api/reviews/:reviewId/like\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { reviewId } = req.params;\n      const userId = getUserId(req); // Get user ID from authenticated session\n      \n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      const like = await storage.likeReview({ userId, reviewId });\n      res.status(201).json(like);\n    } catch (error) {\n      console.error(\"Error liking review:\", error);\n      res.status(500).json({ error: \"Failed to like review\" });\n    }\n  });\n\n  app.delete(\"/api/reviews/:reviewId/like\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { reviewId } = req.params;\n      const userId = getUserId(req); // Get user ID from authenticated session\n      \n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      const success = await storage.unlikeReview(userId, reviewId);\n      if (!success) {\n        return res.status(404).json({ error: \"Like not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error unliking review:\", error);\n      res.status(500).json({ error: \"Failed to unlike review\" });\n    }\n  });\n\n  // Get review likes status and count (public endpoint)\n  app.get(\"/api/reviews/:reviewId/likes\", async (req, res) => {\n    try {\n      const { reviewId } = req.params;\n      let currentUserId: string | undefined;\n      if (getUserId(req)) {\n        currentUserId = getUserId(req);\n      }\n      \n      const [likesCount, isLiked] = await Promise.all([\n        storage.getReviewLikesCount(reviewId),\n        currentUserId ? storage.isReviewLiked(currentUserId, reviewId) : false\n      ]);\n      \n      res.json({ count: likesCount, isLiked });\n    } catch (error) {\n      console.error(\"Error fetching review likes:\", error);\n      res.status(500).json({ error: \"Failed to fetch review likes\" });\n    }\n  });\n\n  // Review comments API\n  app.get(\"/api/reviews/:reviewId/comments\", async (req, res) => {\n    try {\n      const { reviewId } = req.params;\n      const comments = await storage.getReviewComments(reviewId);\n      res.json(comments);\n    } catch (error) {\n      console.error(\"Error fetching review comments:\", error);\n      res.status(500).json({ error: \"Failed to fetch comments\" });\n    }\n  });\n\n  app.post(\"/api/reviews/:reviewId/comments\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { reviewId } = req.params;\n      const userId = getUserId(req);\n      \n      const validation = insertReviewCommentSchema.safeParse({\n        ...req.body,\n        reviewId,\n        userId,\n      });\n      \n      if (!validation.success) {\n        return res.status(400).json({\n          error: \"Invalid comment data\",\n          details: fromZodError(validation.error).toString(),\n        });\n      }\n      \n      const comment = await storage.createReviewComment(validation.data);\n      res.status(201).json(comment);\n    } catch (error) {\n      console.error(\"Error creating comment:\", error);\n      res.status(500).json({ error: \"Failed to create comment\" });\n    }\n  });\n\n  app.delete(\"/api/comments/:commentId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { commentId } = req.params;\n      const userId = getUserId(req);\n      \n      const success = await storage.deleteReviewComment(commentId, userId);\n      if (!success) {\n        return res.status(404).json({ error: \"Comment not found or unauthorized\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting comment:\", error);\n      res.status(500).json({ error: \"Failed to delete comment\" });\n    }\n  });\n\n  // User management API \n  app.get(\"/api/users/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== \"string\") {\n        return res.status(400).json({ error: \"Search query is required\" });\n      }\n      const users = await storage.searchUsers(q);\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error searching users:\", error);\n      res.status(500).json({ error: \"Failed to search users\" });\n    }\n  });\n\n  app.get(\"/api/users/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      // Get authenticated user ID if available, but don't require it\n      let currentUserId: string | undefined;\n      if (getUserId(req)) {\n        currentUserId = getUserId(req);\n      }\n      \n      const user = await storage.getUserWithStats(id, currentUserId || '');\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ error: \"Failed to fetch user\" });\n    }\n  });\n\n  // Check username availability\n  app.get(\"/api/users/check-username/:username\", async (req, res) => {\n    try {\n      const { username } = req.params;\n      \n      // Basic validation\n      if (!username || username.length < 3 || username.length > 30) {\n        return res.json({ \n          available: false, \n          message: \"Username must be between 3 and 30 characters\" \n        });\n      }\n      \n      // Check if username contains only allowed characters (alphanumeric, underscore, hyphen)\n      if (!/^[a-zA-Z0-9_-]+$/.test(username)) {\n        return res.json({ \n          available: false, \n          message: \"Username can only contain letters, numbers, underscores, and hyphens\" \n        });\n      }\n      \n      const isAvailable = await storage.isUsernameAvailable(username);\n      res.json({ \n        available: isAvailable, \n        message: isAvailable ? \"Username is available\" : \"Username is already taken\" \n      });\n    } catch (error) {\n      console.error(\"Error checking username availability:\", error);\n      res.status(500).json({ error: \"Failed to check username availability\" });\n    }\n  });\n\n  // Profile management - authenticated user only\n  app.put(\"/api/users/me\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      \n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      const validation = insertUserSchema.partial().safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({\n          error: \"Invalid user data\",\n          details: fromZodError(validation.error).toString(),\n        });\n      }\n      const user = await storage.updateUser(userId, validation.data);\n      if (!user) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ error: \"Failed to update user\" });\n    }\n  });\n\n  // Delete user account and all associated data\n  app.delete(\"/api/users/me\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      \n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      const success = await storage.deleteUser(userId);\n      if (!success) {\n        return res.status(500).json({ error: \"Failed to delete user account\" });\n      }\n      \n      // Log the user out after successful deletion and await callback\n      await new Promise<void>((resolve, reject) => {\n        req.logout((err: any) => {\n          if (err) {\n            console.error(\"Error logging out after account deletion:\", err);\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      }).catch((logoutError) => {\n        console.error(\"Logout failed after account deletion:\", logoutError);\n        // Don't fail the request - account was deleted successfully\n      });\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting user account:\", error);\n      res.status(500).json({ error: \"Failed to delete user account\" });\n    }\n  });\n\n  // Wishlist API - SECURITY FIX: Always use authenticated user\n  app.get(\"/api/users/me/wishlist\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      \n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      const wishlist = await storage.getUserWishlist(userId);\n      res.json(wishlist);\n    } catch (error) {\n      console.error(\"Error fetching wishlist:\", error);\n      res.status(500).json({ error: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  app.post(\"/api/users/me/wishlist/:concertId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      const { concertId } = req.params;\n      \n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      const wishlistItem = await storage.addToWishlist({ userId, concertId });\n      res.status(201).json(wishlistItem);\n    } catch (error) {\n      console.error(\"Error adding to wishlist:\", error);\n      res.status(500).json({ error: \"Failed to add to wishlist\" });\n    }\n  });\n\n  app.delete(\"/api/users/me/wishlist/:concertId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      const { concertId } = req.params;\n      \n      const success = await storage.removeFromWishlist(userId, concertId);\n      if (!success) {\n        return res.status(404).json({ error: \"Wishlist item not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing from wishlist:\", error);\n      res.status(500).json({ error: \"Failed to remove from wishlist\" });\n    }\n  });\n\n  // Social features API - SECURITY FIX: Always use authenticated user\n  app.post(\"/api/users/:userId/follow\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId: followingId } = req.params;\n      const followerId = getUserId(req); // Get from auth session, not request body\n      \n      if (followerId === followingId) {\n        return res.status(400).json({ error: \"Cannot follow yourself\" });\n      }\n      \n      const follow = await storage.followUser({ followerId, followingId });\n      res.status(201).json(follow);\n    } catch (error) {\n      console.error(\"Error following user:\", error);\n      res.status(500).json({ error: \"Failed to follow user\" });\n    }\n  });\n\n  app.delete(\"/api/users/:userId/follow\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { userId: followingId } = req.params;\n      const followerId = getUserId(req); // Get from auth session, not request body\n      \n      const success = await storage.unfollowUser(followerId, followingId);\n      if (!success) {\n        return res.status(404).json({ error: \"Follow relationship not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error unfollowing user:\", error);\n      res.status(500).json({ error: \"Failed to unfollow user\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/followers\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const followers = await storage.getFollowers(userId);\n      res.json(followers);\n    } catch (error) {\n      console.error(\"Error fetching followers:\", error);\n      res.status(500).json({ error: \"Failed to fetch followers\" });\n    }\n  });\n\n  app.get(\"/api/users/:userId/following\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const following = await storage.getFollowing(userId);\n      res.json(following);\n    } catch (error) {\n      console.error(\"Error fetching following:\", error);\n      res.status(500).json({ error: \"Failed to fetch following\" });\n    }\n  });\n\n  // Object serving endpoint for private files\n  app.get(\"/objects/:objectPath(*)\", isAuthenticated, async (req: any, res) => {\n    const userId = req.user?.claims?.sub;\n    const objectStorageService = new ObjectStorageService();\n    try {\n      const objectFile = await objectStorageService.getObjectEntityFile(\n        req.path,\n      );\n      const canAccess = await objectStorageService.canAccessObjectEntity({\n        objectFile,\n        userId: userId,\n        requestedPermission: ObjectPermission.READ,\n      });\n      if (!canAccess) {\n        return res.sendStatus(401);\n      }\n      objectStorageService.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error checking object access:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  // Get upload URL for object storage\n  app.post(\"/api/objects/upload\", isAuthenticated, async (req: any, res) => {\n    try {\n      const objectStorageService = new ObjectStorageService();\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error getting upload URL:\", error);\n      res.status(500).json({ error: \"Failed to get upload URL\" });\n    }\n  });\n\n  // Real image upload endpoint for profile photos\n  app.post(\"/api/upload/profile-image\", isAuthenticated, upload.single('file'), async (req: any, res) => {\n    try {\n      const userId = getUserId(req);\n      \n      if (!userId) {\n        return res.status(401).json({ error: \"User not authenticated\" });\n      }\n      \n      if (!req.file) {\n        return res.status(400).json({ error: \"No file uploaded\" });\n      }\n\n      // Validate file type\n      if (!req.file.mimetype.startsWith('image/')) {\n        return res.status(400).json({ error: \"Only image files are allowed\" });\n      }\n\n      // Validate file size (5MB max)\n      if (req.file.size > 5 * 1024 * 1024) {\n        return res.status(400).json({ error: \"File size must be less than 5MB\" });\n      }\n\n      const objectStorageService = new ObjectStorageService();\n      \n      // Get upload URL from object storage\n      const uploadURL = await objectStorageService.getObjectEntityUploadURL();\n      \n      // Upload file directly to object storage using the presigned URL\n      const uploadResponse = await fetch(uploadURL, {\n        method: 'PUT',\n        body: req.file.buffer,\n        headers: {\n          'Content-Type': req.file.mimetype,\n        },\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error('Failed to upload to object storage');\n      }\n\n      // Set ACL policy for the uploaded object\n      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(\n        uploadURL,\n        {\n          owner: userId,\n          visibility: \"public\", // Profile images should be public\n        },\n      );\n\n      // Return the object path that can be used to access the image\n      res.json({ url: objectPath });\n    } catch (error) {\n      console.error(\"Error uploading profile image:\", error);\n      res.status(500).json({ error: \"Failed to upload image\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}","size_bytes":30529},"server/storage.ts":{"content":"import { \n  type User, \n  type PublicUser,\n  type UpsertUser,\n  type InsertUser, \n  type Concert,\n  type InsertConcert,\n  type Review,\n  type InsertReview,\n  type ReviewWithUser,\n  type ConcertWithRating,\n  type UserWithStats,\n  type ConcertWishlist,\n  type InsertConcertWishlist,\n  type ReviewLike,\n  type InsertReviewLike,\n  type ReviewComment,\n  type InsertReviewComment,\n  type ReviewCommentWithUser,\n  type UserFollow,\n  type InsertUserFollow,\n  users,\n  concerts,\n  reviews,\n  concertWishlists,\n  reviewLikes,\n  reviewComments,\n  userFollows\n} from \"@shared/schema\";\nimport { neon } from \"@neondatabase/serverless\";\nimport { drizzle } from \"drizzle-orm/neon-http\";\nimport { eq, desc, count, countDistinct, avg, and, ilike, or, sql, inArray } from \"drizzle-orm\";\nimport { ticketmasterService, type TicketmasterSearchOptions } from \"./ticketmasterService\";\nimport { setlistFmService, type SetlistFmSearchOptions } from \"./setlistFmService\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\n\nconst databaseUrl = process.env.DATABASE_URL!;\nif (!databaseUrl) {\n  throw new Error(\"DATABASE_URL environment variable is required\");\n}\n\nconst client = neon(databaseUrl);\nexport const db = drizzle(client);\n\nexport interface IStorage {\n  // Session store (required for authentication)\n  sessionStore: session.Store;\n\n  // Users (updated for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n  deleteUser(id: string): Promise<boolean>;\n  getUserWithStats(id: string, currentUserId?: string): Promise<UserWithStats | undefined>;\n  searchUsers(query: string): Promise<PublicUser[]>;\n  isUsernameAvailable(username: string): Promise<boolean>;\n\n  // Concerts\n  getConcert(id: string): Promise<Concert | undefined>;\n  getConcerts(options?: {\n    search?: string;\n    genre?: string;\n    city?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<ConcertWithRating[]>;\n  createConcert(concert: InsertConcert): Promise<Concert>;\n  updateConcert(id: string, updates: Partial<InsertConcert>): Promise<Concert | undefined>;\n  deleteConcert(id: string): Promise<boolean>;\n\n  // Ticketmaster Integration\n  searchTicketmasterEvents(options?: TicketmasterSearchOptions): Promise<any[]>;\n  getTicketmasterEvent(eventId: string): Promise<any | null>;\n  getConcertsWithTicketmaster(options?: {\n    search?: string;\n    genre?: string;\n    city?: string;\n    limit?: number;\n    offset?: number;\n    includeTicketmaster?: boolean;\n  }): Promise<ConcertWithRating[]>;\n\n  // Setlist.fm Integration  \n  searchSetlistFmEvents(options?: SetlistFmSearchOptions): Promise<any[]>;\n  getConcertsWithHistorical(options?: {\n    search?: string;\n    genre?: string;\n    city?: string;\n    limit?: number;\n    offset?: number;\n    includeTicketmaster?: boolean;\n    includeHistorical?: boolean;\n    startDate?: string;\n    endDate?: string;\n  }): Promise<ConcertWithRating[]>;\n\n  // Reviews\n  getReview(id: string): Promise<Review | undefined>;\n  getReviewsForConcert(concertId: string, currentUserId?: string): Promise<ReviewWithUser[]>;\n  getReviewsForUser(userId: string, currentUserId?: string): Promise<ReviewWithUser[]>;\n  getAllReviews(options?: {\n    limit?: number;\n    offset?: number;\n    sort?: 'recent' | 'rating' | 'oldest';\n  }): Promise<ReviewWithUser[]>;\n  createReview(review: InsertReview): Promise<Review>;\n  updateReview(id: string, updates: Partial<InsertReview>): Promise<Review | undefined>;\n  deleteReview(id: string): Promise<boolean>;\n\n  // Wishlist\n  addToWishlist(wishlist: InsertConcertWishlist): Promise<ConcertWishlist>;\n  removeFromWishlist(userId: string, concertId: string): Promise<boolean>;\n  getUserWishlist(userId: string): Promise<ConcertWithRating[]>;\n  isInWishlist(userId: string, concertId: string): Promise<boolean>;\n\n  // Review Likes\n  likeReview(like: InsertReviewLike): Promise<ReviewLike>;\n  unlikeReview(userId: string, reviewId: string): Promise<boolean>;\n  isReviewLiked(userId: string, reviewId: string): Promise<boolean>;\n  getReviewLikesCount(reviewId: string): Promise<number>;\n\n  // Review Comments\n  getReviewComments(reviewId: string): Promise<ReviewCommentWithUser[]>;\n  createReviewComment(comment: InsertReviewComment): Promise<ReviewComment>;\n  deleteReviewComment(commentId: string, userId: string): Promise<boolean>;\n  getReviewCommentsCount(reviewId: string): Promise<number>;\n\n  // User Follows\n  followUser(follow: InsertUserFollow): Promise<UserFollow>;\n  unfollowUser(followerId: string, followingId: string): Promise<boolean>;\n  isFollowing(followerId: string, followingId: string): Promise<boolean>;\n  getFollowers(userId: string): Promise<PublicUser[]>;\n  getFollowing(userId: string): Promise<PublicUser[]>;\n}\n\nexport class PostgresStorage implements IStorage {\n  public readonly sessionStore: session.Store;\n\n  constructor() {\n    // Initialize session store with PostgreSQL\n    const PostgresSessionStore = connectPg(session);\n    this.sessionStore = new PostgresSessionStore({\n      conString: databaseUrl,\n      tableName: \"sessions\",\n      createTableIfMissing: false,\n    });\n  }\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.id, id)).limit(1);\n    return result[0];\n  }\n\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const result = await db.select().from(users).where(eq(users.email, email)).limit(1);\n    return result[0];\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    // First check if user exists by email (handles case where OIDC sub changes)\n    if (userData.email) {\n      const existingUser = await db\n        .select()\n        .from(users)\n        .where(eq(users.email, userData.email))\n        .limit(1);\n      \n      if (existingUser.length > 0) {\n        // Update existing user with new OIDC sub and profile data\n        const [user] = await db\n          .update(users)\n          .set({\n            id: userData.id!, // Update ID in case OIDC sub changed\n            firstName: userData.firstName,\n            lastName: userData.lastName,\n            profileImageUrl: userData.profileImageUrl,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.email, userData.email))\n          .returning();\n        return user;\n      }\n    }\n    \n    // Insert new user with conflict resolution on ID\n    const [user] = await db\n      .insert(users)\n      .values({\n        id: userData.id!,\n        email: userData.email,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        profileImageUrl: userData.profileImageUrl,\n      })\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          email: userData.email,\n          firstName: userData.firstName,\n          lastName: userData.lastName,\n          profileImageUrl: userData.profileImageUrl,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const result = await db.insert(users).values(user).returning();\n    return result[0];\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const result = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteUser(id: string): Promise<boolean> {\n    try {\n      return await db.transaction(async (tx) => {\n        // Step 1: Get user's review IDs first to handle foreign key constraints properly\n        const userReviews = await tx.select({ id: reviews.id })\n          .from(reviews)\n          .where(eq(reviews.userId, id));\n        \n        const userReviewIds = userReviews.map(review => review.id);\n        \n        // Step 2: Delete all comments where reviewId IN (user's reviews) - by OTHER users\n        if (userReviewIds.length > 0) {\n          await tx.delete(reviewComments)\n            .where(sql`${reviewComments.reviewId} IN (${sql.join(userReviewIds.map(id => sql`${id}`), sql`, `)})`);\n        }\n        \n        // Step 3: Delete all likes where reviewId IN (user's reviews) - by OTHER users  \n        if (userReviewIds.length > 0) {\n          await tx.delete(reviewLikes)\n            .where(sql`${reviewLikes.reviewId} IN (${sql.join(userReviewIds.map(id => sql`${id}`), sql`, `)})`);\n        }\n        \n        // Step 4: Delete user's own comments on OTHER reviews\n        await tx.delete(reviewComments).where(eq(reviewComments.userId, id));\n        \n        // Step 5: Delete user's own likes on OTHER reviews\n        await tx.delete(reviewLikes).where(eq(reviewLikes.userId, id));\n        \n        // Step 6: Delete user's wishlist items\n        await tx.delete(concertWishlists).where(eq(concertWishlists.userId, id));\n        \n        // Step 7: Delete user's follow relationships\n        await tx.delete(userFollows).where(or(eq(userFollows.followerId, id), eq(userFollows.followingId, id)));\n        \n        // Step 8: Delete user's reviews (now safe since all referencing comments/likes are gone)\n        await tx.delete(reviews).where(eq(reviews.userId, id));\n        \n        // Step 9: Delete user record with .returning() and verify deletion\n        const deletedUsers = await tx.delete(users)\n          .where(eq(users.id, id))\n          .returning({ id: users.id });\n        \n        return deletedUsers.length > 0;\n      });\n    } catch (error) {\n      console.error('Error deleting user:', error);\n      return false;\n    }\n  }\n\n  async getUserWithStats(id: string, currentUserId?: string): Promise<UserWithStats | undefined> {\n    const user = await this.getUser(id);\n    if (!user) return undefined;\n\n    // Get user stats\n    const [concertsCount, reviewsCount, followersCount, followingCount, avgRating] = await Promise.all([\n      // Count unique concerts from reviews\n      db.select({ count: countDistinct(reviews.concertId) })\n        .from(reviews)\n        .where(eq(reviews.userId, id)),\n      \n      // Count total reviews\n      db.select({ count: count() })\n        .from(reviews)\n        .where(eq(reviews.userId, id)),\n      \n      // Count followers\n      db.select({ count: count() })\n        .from(userFollows)\n        .where(eq(userFollows.followingId, id)),\n      \n      // Count following\n      db.select({ count: count() })\n        .from(userFollows)\n        .where(eq(userFollows.followerId, id)),\n      \n      // Average rating\n      db.select({ avg: avg(reviews.overallRating) })\n        .from(reviews)\n        .where(eq(reviews.userId, id))\n    ]);\n\n    let isFollowing = false;\n    if (currentUserId && currentUserId !== id) {\n      isFollowing = await this.isFollowing(currentUserId, id);\n    }\n\n    // SECURITY FIX: Return only public fields, exclude email, firstName, lastName\n    const publicUser: PublicUser = {\n      id: user.id,\n      username: user.username,\n      profileImageUrl: user.profileImageUrl,\n      firstName: user.firstName,\n      lastName: user.lastName,\n      bio: user.bio,\n      location: user.location,\n      isVerified: user.isVerified,\n      isPrivate: user.isPrivate,\n      favoriteGenres: user.favoriteGenres,\n      createdAt: user.createdAt,\n      updatedAt: user.updatedAt,\n    };\n\n    return {\n      ...publicUser,\n      stats: {\n        concertsAttended: concertsCount[0]?.count || 0,\n        reviewsWritten: reviewsCount[0]?.count || 0,\n        followers: followersCount[0]?.count || 0,\n        following: followingCount[0]?.count || 0,\n        averageRating: avgRating[0]?.avg ? Number(avgRating[0].avg) : undefined,\n      },\n      isFollowing,\n    };\n  }\n\n  async searchUsers(query: string): Promise<PublicUser[]> {\n    const result = await db\n      .select({\n        id: users.id,\n        username: users.username,\n        profileImageUrl: users.profileImageUrl,\n        firstName: users.firstName,\n        lastName: users.lastName,\n        bio: users.bio,\n        location: users.location,\n        isVerified: users.isVerified,\n        isPrivate: users.isPrivate,\n        favoriteGenres: users.favoriteGenres,\n        createdAt: users.createdAt,\n        updatedAt: users.updatedAt,\n      })\n      .from(users)\n      .where(\n        or(\n          ilike(users.firstName, `%${query}%`),\n          ilike(users.lastName, `%${query}%`)\n        )\n      )\n      .limit(20);\n    return result;\n  }\n\n  async isUsernameAvailable(username: string): Promise<boolean> {\n    const result = await db\n      .select({ id: users.id })\n      .from(users)\n      .where(eq(users.username, username))\n      .limit(1);\n    return result.length === 0;\n  }\n\n  // Concerts\n  async getConcert(id: string): Promise<Concert | undefined> {\n    const result = await db.select().from(concerts).where(eq(concerts.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getConcerts(options?: {\n    search?: string;\n    genre?: string;\n    city?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<ConcertWithRating[]> {\n    const { search, genre, city, limit = 20, offset = 0 } = options || {};\n    \n    let query = db\n      .select({\n        concert: concerts,\n        avgRating: avg(reviews.overallRating),\n        avgPerformance: avg(reviews.performanceRating),\n        avgSound: avg(reviews.soundRating),\n        avgVenue: avg(reviews.venueRating),\n        avgValue: avg(reviews.valueRating),\n        reviewCount: count(reviews.id),\n      })\n      .from(concerts)\n      .leftJoin(reviews, eq(concerts.id, reviews.concertId))\n      .groupBy(concerts.id)\n      .limit(limit)\n      .offset(offset)\n      .orderBy(desc(concerts.createdAt));\n\n    const conditions = [];\n    if (search) {\n      conditions.push(\n        or(\n          ilike(concerts.artist, `%${search}%`),\n          ilike(concerts.venue, `%${search}%`),\n          ilike(concerts.city, `%${search}%`)\n        )\n      );\n    }\n    if (genre) {\n      conditions.push(eq(concerts.genre, genre));\n    }\n    if (city) {\n      conditions.push(ilike(concerts.city, `%${city}%`));\n    }\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions)) as any;\n    }\n\n    const result = await query;\n    \n    return result.map(row => ({\n      ...row.concert,\n      averageRating: row.avgRating ? Number(row.avgRating) : undefined,\n      performanceRating: row.avgPerformance ? Number(row.avgPerformance) : undefined,\n      soundRating: row.avgSound ? Number(row.avgSound) : undefined,\n      venueRating: row.avgVenue ? Number(row.avgVenue) : undefined,\n      valueRating: row.avgValue ? Number(row.avgValue) : undefined,\n      reviewCount: Number(row.reviewCount),\n    }));\n  }\n\n  async createConcert(concert: InsertConcert): Promise<Concert> {\n    const result = await db.insert(concerts).values(concert).returning();\n    return result[0];\n  }\n\n  async updateConcert(id: string, updates: Partial<InsertConcert>): Promise<Concert | undefined> {\n    const result = await db\n      .update(concerts)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(concerts.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteConcert(id: string): Promise<boolean> {\n    const result = await db.delete(concerts).where(eq(concerts.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Reviews\n  async getReview(id: string): Promise<Review | undefined> {\n    const result = await db.select().from(reviews).where(eq(reviews.id, id)).limit(1);\n    return result[0];\n  }\n\n  async getReviewsForConcert(concertId: string, currentUserId?: string): Promise<ReviewWithUser[]> {\n    const result = await db\n      .select({\n        review: reviews,\n        user: {\n          id: users.id,\n          username: users.username,\n          profileImageUrl: users.profileImageUrl,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          bio: users.bio,\n          location: users.location,\n          isVerified: users.isVerified,\n          isPrivate: users.isPrivate,\n          favoriteGenres: users.favoriteGenres,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        },\n        concert: concerts,\n      })\n      .from(reviews)\n      .innerJoin(users, eq(reviews.userId, users.id))\n      .innerJoin(concerts, eq(reviews.concertId, concerts.id))\n      .where(eq(reviews.concertId, concertId))\n      .orderBy(desc(reviews.createdAt));\n\n    if (result.length === 0) return [];\n\n    const reviewIds = result.map(row => row.review.id);\n\n    // Batch check if current user liked any of these reviews (fix N+1 query)\n    let likedReviewIds = new Set<string>();\n    if (currentUserId) {\n      const likes = await db\n        .select({ reviewId: reviewLikes.reviewId })\n        .from(reviewLikes)\n        .where(\n          and(\n            eq(reviewLikes.userId, currentUserId),\n            inArray(reviewLikes.reviewId, reviewIds)\n          )\n        );\n      likedReviewIds = new Set(likes.map(like => like.reviewId));\n    }\n\n    // Batch get likes counts for all reviews\n    const likesCounts = await db\n      .select({\n        reviewId: reviewLikes.reviewId,\n        count: count(),\n      })\n      .from(reviewLikes)\n      .where(inArray(reviewLikes.reviewId, reviewIds))\n      .groupBy(reviewLikes.reviewId);\n    \n    const likesCountMap = new Map(likesCounts.map(item => [item.reviewId, Number(item.count)]));\n\n    // Batch get comments counts for all reviews\n    const commentsCounts = await db\n      .select({\n        reviewId: reviewComments.reviewId,\n        count: count(),\n      })\n      .from(reviewComments)\n      .where(inArray(reviewComments.reviewId, reviewIds))\n      .groupBy(reviewComments.reviewId);\n    \n    const commentsCountMap = new Map(commentsCounts.map(item => [item.reviewId, Number(item.count)]));\n\n    return result.map(row => ({\n      ...row.review,\n      user: row.user,\n      concert: row.concert,\n      isLiked: likedReviewIds.has(row.review.id),\n      likesCount: likesCountMap.get(row.review.id) || 0,\n      commentsCount: commentsCountMap.get(row.review.id) || 0,\n    }));\n  }\n\n  async getReviewsForUser(userId: string, currentUserId?: string): Promise<ReviewWithUser[]> {\n    const result = await db\n      .select({\n        review: reviews,\n        user: {\n          id: users.id,\n          username: users.username,\n          profileImageUrl: users.profileImageUrl,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          bio: users.bio,\n          location: users.location,\n          isVerified: users.isVerified,\n          isPrivate: users.isPrivate,\n          favoriteGenres: users.favoriteGenres,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        },\n        concert: concerts,\n      })\n      .from(reviews)\n      .innerJoin(users, eq(reviews.userId, users.id))\n      .innerJoin(concerts, eq(reviews.concertId, concerts.id))\n      .where(eq(reviews.userId, userId))\n      .orderBy(desc(reviews.createdAt));\n\n    if (result.length === 0) return [];\n\n    const reviewIds = result.map(row => row.review.id);\n\n    // Batch check if current user liked any of these reviews (fix N+1 query)\n    let likedReviewIds = new Set<string>();\n    if (currentUserId && currentUserId !== userId) {\n      const likes = await db\n        .select({ reviewId: reviewLikes.reviewId })\n        .from(reviewLikes)\n        .where(\n          and(\n            eq(reviewLikes.userId, currentUserId),\n            inArray(reviewLikes.reviewId, reviewIds)\n          )\n        );\n      likedReviewIds = new Set(likes.map(like => like.reviewId));\n    }\n\n    // Batch get likes counts for all reviews\n    const likesCounts = await db\n      .select({\n        reviewId: reviewLikes.reviewId,\n        count: count(),\n      })\n      .from(reviewLikes)\n      .where(inArray(reviewLikes.reviewId, reviewIds))\n      .groupBy(reviewLikes.reviewId);\n    \n    const likesCountMap = new Map(likesCounts.map(item => [item.reviewId, Number(item.count)]));\n\n    // Batch get comments counts for all reviews\n    const commentsCounts = await db\n      .select({\n        reviewId: reviewComments.reviewId,\n        count: count(),\n      })\n      .from(reviewComments)\n      .where(inArray(reviewComments.reviewId, reviewIds))\n      .groupBy(reviewComments.reviewId);\n    \n    const commentsCountMap = new Map(commentsCounts.map(item => [item.reviewId, Number(item.count)]));\n\n    return result.map(row => ({\n      ...row.review,\n      user: row.user,\n      concert: row.concert,\n      isLiked: likedReviewIds.has(row.review.id),\n      likesCount: likesCountMap.get(row.review.id) || 0,\n      commentsCount: commentsCountMap.get(row.review.id) || 0,\n    }));\n  }\n\n  async getAllReviews(options?: {\n    limit?: number;\n    offset?: number;\n    sort?: 'recent' | 'rating' | 'oldest';\n  }): Promise<ReviewWithUser[]> {\n    const { limit = 20, offset = 0, sort = 'recent' } = options || {};\n    \n    let query = db\n      .select({\n        review: reviews,\n        user: {\n          id: users.id,\n          username: users.username,\n          profileImageUrl: users.profileImageUrl,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          bio: users.bio,\n          location: users.location,\n          isVerified: users.isVerified,\n          isPrivate: users.isPrivate,\n          favoriteGenres: users.favoriteGenres,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        },\n        concert: concerts,\n      })\n      .from(reviews)\n      .innerJoin(users, eq(reviews.userId, users.id))\n      .innerJoin(concerts, eq(reviews.concertId, concerts.id))\n      .limit(limit)\n      .offset(offset);\n\n    // Apply sorting\n    switch (sort) {\n      case 'recent':\n        query = query.orderBy(desc(reviews.createdAt)) as any;\n        break;\n      case 'oldest':\n        query = query.orderBy(reviews.createdAt) as any;\n        break;\n      case 'rating':\n        query = query.orderBy(desc(reviews.overallRating), desc(reviews.createdAt)) as any;\n        break;\n      default:\n        query = query.orderBy(desc(reviews.createdAt)) as any;\n    }\n\n    const result = await query;\n\n    if (result.length === 0) return [];\n\n    const reviewIds = result.map(row => row.review.id);\n\n    // Batch get likes counts for all reviews\n    const likesCounts = await db\n      .select({\n        reviewId: reviewLikes.reviewId,\n        count: count(),\n      })\n      .from(reviewLikes)\n      .where(inArray(reviewLikes.reviewId, reviewIds))\n      .groupBy(reviewLikes.reviewId);\n    \n    const likesCountMap = new Map(likesCounts.map(item => [item.reviewId, Number(item.count)]));\n\n    // Batch get comments counts for all reviews\n    const commentsCounts = await db\n      .select({\n        reviewId: reviewComments.reviewId,\n        count: count(),\n      })\n      .from(reviewComments)\n      .where(inArray(reviewComments.reviewId, reviewIds))\n      .groupBy(reviewComments.reviewId);\n    \n    const commentsCountMap = new Map(commentsCounts.map(item => [item.reviewId, Number(item.count)]));\n\n    // For getAllReviews, we don't pass currentUserId to keep it public and simple\n    // If authentication is needed later, it can be added as a parameter\n    return result.map(row => ({\n      ...row.review,\n      user: row.user,\n      concert: row.concert,\n      isLiked: false, // Default to false for public access\n      likesCount: likesCountMap.get(row.review.id) || 0,\n      commentsCount: commentsCountMap.get(row.review.id) || 0,\n    }));\n  }\n\n  async createReview(review: InsertReview): Promise<Review> {\n    const result = await db.insert(reviews).values(review).returning();\n    return result[0];\n  }\n\n  async updateReview(id: string, updates: Partial<InsertReview>): Promise<Review | undefined> {\n    const result = await db\n      .update(reviews)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(reviews.id, id))\n      .returning();\n    return result[0];\n  }\n\n  async deleteReview(id: string): Promise<boolean> {\n    const result = await db.delete(reviews).where(eq(reviews.id, id)).returning();\n    return result.length > 0;\n  }\n\n  // Wishlist\n  async addToWishlist(wishlist: InsertConcertWishlist): Promise<ConcertWishlist> {\n    const result = await db.insert(concertWishlists).values(wishlist).returning();\n    return result[0];\n  }\n\n  async removeFromWishlist(userId: string, concertId: string): Promise<boolean> {\n    const result = await db\n      .delete(concertWishlists)\n      .where(\n        and(\n          eq(concertWishlists.userId, userId),\n          eq(concertWishlists.concertId, concertId)\n        )\n      )\n      .returning();\n    return result.length > 0;\n  }\n\n  async getUserWishlist(userId: string): Promise<ConcertWithRating[]> {\n    const result = await db\n      .select({\n        concert: concerts,\n        avgRating: avg(reviews.overallRating),\n        avgPerformance: avg(reviews.performanceRating),\n        avgSound: avg(reviews.soundRating),\n        avgVenue: avg(reviews.venueRating),\n        avgValue: avg(reviews.valueRating),\n        reviewCount: count(reviews.id),\n        wishlistCreatedAt: concertWishlists.createdAt,\n      })\n      .from(concertWishlists)\n      .innerJoin(concerts, eq(concertWishlists.concertId, concerts.id))\n      .leftJoin(reviews, eq(concerts.id, reviews.concertId))\n      .where(eq(concertWishlists.userId, userId))\n      .groupBy(concerts.id, concertWishlists.createdAt)\n      .orderBy(desc(concertWishlists.createdAt));\n\n    return result.map(row => ({\n      ...row.concert,\n      averageRating: row.avgRating ? Number(row.avgRating) : undefined,\n      performanceRating: row.avgPerformance ? Number(row.avgPerformance) : undefined,\n      soundRating: row.avgSound ? Number(row.avgSound) : undefined,\n      venueRating: row.avgVenue ? Number(row.avgVenue) : undefined,\n      valueRating: row.avgValue ? Number(row.avgValue) : undefined,\n      reviewCount: Number(row.reviewCount),\n      isWishlisted: true,\n    }));\n  }\n\n  async isInWishlist(userId: string, concertId: string): Promise<boolean> {\n    const result = await db\n      .select()\n      .from(concertWishlists)\n      .where(\n        and(\n          eq(concertWishlists.userId, userId),\n          eq(concertWishlists.concertId, concertId)\n        )\n      )\n      .limit(1);\n    return result.length > 0;\n  }\n\n  // Review Likes\n  async likeReview(like: InsertReviewLike): Promise<ReviewLike> {\n    try {\n      // Insert the like and increment the review likes count\n      const [result] = await Promise.all([\n        db.insert(reviewLikes).values(like).returning(),\n        db\n          .update(reviews)\n          .set({ likes: sql`${reviews.likes} + 1` })\n          .where(eq(reviews.id, like.reviewId))\n      ]);\n      return result[0];\n    } catch (error) {\n      // If constraint violation (duplicate like), check if it exists and return it\n      if (error instanceof Error && error.message.includes('duplicate key')) {\n        const existing = await db\n          .select()\n          .from(reviewLikes)\n          .where(\n            and(\n              eq(reviewLikes.userId, like.userId),\n              eq(reviewLikes.reviewId, like.reviewId)\n            )\n          )\n          .limit(1);\n        if (existing[0]) return existing[0];\n      }\n      throw error;\n    }\n  }\n\n  async unlikeReview(userId: string, reviewId: string): Promise<boolean> {\n    // First check if like exists to ensure we only decrement if necessary\n    const existingLike = await db\n      .select()\n      .from(reviewLikes)\n      .where(\n        and(\n          eq(reviewLikes.userId, userId),\n          eq(reviewLikes.reviewId, reviewId)\n        )\n      )\n      .limit(1);\n\n    if (existingLike.length === 0) {\n      return false; // Like doesn't exist, nothing to unlike\n    }\n\n    // Remove the like and decrement the review likes count\n    const [result] = await Promise.all([\n      db\n        .delete(reviewLikes)\n        .where(\n          and(\n            eq(reviewLikes.userId, userId),\n            eq(reviewLikes.reviewId, reviewId)\n          )\n        )\n        .returning(),\n      db\n        .update(reviews)\n        .set({ likes: sql`GREATEST(${reviews.likes} - 1, 0)` })\n        .where(eq(reviews.id, reviewId))\n    ]);\n    return result.length > 0;\n  }\n\n  async isReviewLiked(userId: string, reviewId: string): Promise<boolean> {\n    const result = await db\n      .select()\n      .from(reviewLikes)\n      .where(\n        and(\n          eq(reviewLikes.userId, userId),\n          eq(reviewLikes.reviewId, reviewId)\n        )\n      )\n      .limit(1);\n    return result.length > 0;\n  }\n\n  async getReviewLikesCount(reviewId: string): Promise<number> {\n    const result = await db\n      .select({ count: count() })\n      .from(reviewLikes)\n      .where(eq(reviewLikes.reviewId, reviewId));\n    return result[0]?.count || 0;\n  }\n\n  // Review Comments\n  async getReviewComments(reviewId: string): Promise<ReviewCommentWithUser[]> {\n    const result = await db\n      .select({\n        comment: reviewComments,\n        user: {\n          id: users.id,\n          username: users.username,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          bio: users.bio,\n          location: users.location,\n          isVerified: users.isVerified,\n          isPrivate: users.isPrivate,\n          favoriteGenres: users.favoriteGenres,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        }\n      })\n      .from(reviewComments)\n      .leftJoin(users, eq(reviewComments.userId, users.id))\n      .where(eq(reviewComments.reviewId, reviewId))\n      .orderBy(desc(reviewComments.createdAt));\n\n    return result.map(row => ({\n      ...row.comment,\n      user: row.user as PublicUser,\n    }));\n  }\n\n  async createReviewComment(comment: InsertReviewComment): Promise<ReviewComment> {\n    const result = await db.insert(reviewComments).values(comment).returning();\n    return result[0];\n  }\n\n  async deleteReviewComment(commentId: string, userId: string): Promise<boolean> {\n    const result = await db\n      .delete(reviewComments)\n      .where(\n        and(\n          eq(reviewComments.id, commentId),\n          eq(reviewComments.userId, userId)\n        )\n      )\n      .returning();\n    return result.length > 0;\n  }\n\n  async getReviewCommentsCount(reviewId: string): Promise<number> {\n    const result = await db\n      .select({ count: count() })\n      .from(reviewComments)\n      .where(eq(reviewComments.reviewId, reviewId));\n    return result[0]?.count || 0;\n  }\n\n  // User Follows\n  async followUser(follow: InsertUserFollow): Promise<UserFollow> {\n    const result = await db.insert(userFollows).values(follow).returning();\n    return result[0];\n  }\n\n  async unfollowUser(followerId: string, followingId: string): Promise<boolean> {\n    const result = await db\n      .delete(userFollows)\n      .where(\n        and(\n          eq(userFollows.followerId, followerId),\n          eq(userFollows.followingId, followingId)\n        )\n      )\n      .returning();\n    return result.length > 0;\n  }\n\n  async isFollowing(followerId: string, followingId: string): Promise<boolean> {\n    const result = await db\n      .select()\n      .from(userFollows)\n      .where(\n        and(\n          eq(userFollows.followerId, followerId),\n          eq(userFollows.followingId, followingId)\n        )\n      )\n      .limit(1);\n    return result.length > 0;\n  }\n\n  async getFollowers(userId: string): Promise<PublicUser[]> {\n    const result = await db\n      .select({ \n        user: {\n          id: users.id,\n          username: users.username,\n          profileImageUrl: users.profileImageUrl,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          bio: users.bio,\n          location: users.location,\n          isVerified: users.isVerified,\n          isPrivate: users.isPrivate,\n          favoriteGenres: users.favoriteGenres,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        }\n      })\n      .from(userFollows)\n      .innerJoin(users, eq(userFollows.followerId, users.id))\n      .where(eq(userFollows.followingId, userId))\n      .orderBy(desc(userFollows.createdAt));\n    return result.map(row => row.user);\n  }\n\n  async getFollowing(userId: string): Promise<PublicUser[]> {\n    const result = await db\n      .select({ \n        user: {\n          id: users.id,\n          username: users.username,\n          profileImageUrl: users.profileImageUrl,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          bio: users.bio,\n          location: users.location,\n          isVerified: users.isVerified,\n          isPrivate: users.isPrivate,\n          favoriteGenres: users.favoriteGenres,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        }\n      })\n      .from(userFollows)\n      .innerJoin(users, eq(userFollows.followingId, users.id))\n      .where(eq(userFollows.followerId, userId))\n      .orderBy(desc(userFollows.createdAt));\n    return result.map(row => row.user);\n  }\n\n  // Ticketmaster Integration\n  async searchTicketmasterEvents(options: TicketmasterSearchOptions = {}): Promise<any[]> {\n    try {\n      const events = await ticketmasterService.searchEvents(options);\n      return events.map(event => ticketmasterService.transformEvent(event));\n    } catch (error) {\n      console.error('Error searching Ticketmaster events:', error);\n      return [];\n    }\n  }\n\n  async getTicketmasterEvent(eventId: string): Promise<any | null> {\n    try {\n      const event = await ticketmasterService.getEvent(eventId);\n      if (!event) return null;\n      return ticketmasterService.transformEvent(event);\n    } catch (error) {\n      console.error('Error fetching Ticketmaster event:', error);\n      return null;\n    }\n  }\n\n  // Setlist.fm Integration\n  async searchSetlistFmEvents(options: SetlistFmSearchOptions = {}): Promise<any[]> {\n    try {\n      const setlists = await setlistFmService.searchSetlists(options);\n      return setlists.map(setlist => setlistFmService.transformSetlist(setlist));\n    } catch (error) {\n      console.error('Error searching Setlist.fm events:', error);\n      return [];\n    }\n  }\n\n  async getConcertsWithTicketmaster(options: {\n    search?: string;\n    genre?: string;\n    city?: string;\n    limit?: number;\n    offset?: number;\n    includeTicketmaster?: boolean;\n  } = {}): Promise<ConcertWithRating[]> {\n    try {\n      // Get database concerts first\n      const dbConcerts = await this.getConcerts(options);\n      \n      // If Ticketmaster integration is disabled, return only DB concerts\n      if (!options.includeTicketmaster) {\n        return dbConcerts;\n      }\n\n      // Build Ticketmaster search options\n      const tmOptions: TicketmasterSearchOptions = {\n        size: options.limit || 20,\n        page: Math.floor((options.offset || 0) / (options.limit || 20)),\n      };\n\n      if (options.search) tmOptions.keyword = options.search;\n      if (options.city) tmOptions.city = options.city;\n      if (options.genre) tmOptions.classificationName = options.genre;\n\n      // Get Ticketmaster events\n      const tmEvents = await this.searchTicketmasterEvents(tmOptions);\n      \n      // Transform Ticketmaster events to ConcertWithRating format\n      const tmConcerts: ConcertWithRating[] = tmEvents.map(event => ({\n        ...event,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        // Add default rating values since these are external events (using undefined to match DB concerts)\n        averageRating: undefined,\n        performanceRating: undefined,\n        soundRating: undefined,\n        venueRating: undefined,\n        valueRating: undefined,\n        reviewCount: 0,\n      }));\n\n      // Combine and deduplicate (prioritize DB concerts)\n      const combinedConcerts = [...dbConcerts];\n      const dbConcertIds = new Set(dbConcerts.map(c => c.id));\n      \n      for (const tmConcert of tmConcerts) {\n        if (!dbConcertIds.has(tmConcert.id)) {\n          combinedConcerts.push(tmConcert);\n        }\n      }\n\n      // Apply search filtering to combined results\n      let filteredConcerts = combinedConcerts;\n      \n      if (options.search) {\n        const searchLower = options.search.toLowerCase();\n        filteredConcerts = combinedConcerts.filter(concert =>\n          concert.artist.toLowerCase().includes(searchLower) ||\n          concert.venue.toLowerCase().includes(searchLower) ||\n          concert.city.toLowerCase().includes(searchLower)\n        );\n      }\n\n      if (options.genre) {\n        const genreLower = options.genre.toLowerCase();\n        filteredConcerts = filteredConcerts.filter(concert =>\n          concert.genre?.toLowerCase().includes(genreLower)\n        );\n      }\n\n      // Apply pagination\n      const startIndex = options.offset || 0;\n      const endIndex = startIndex + (options.limit || 50);\n      \n      return filteredConcerts.slice(startIndex, endIndex);\n    } catch (error) {\n      console.error('Error getting concerts with Ticketmaster:', error);\n      // Fallback to database-only concerts\n      return this.getConcerts(options);\n    }\n  }\n\n  async getConcertsWithHistorical(options: {\n    search?: string;\n    genre?: string;\n    city?: string;\n    limit?: number;\n    offset?: number;\n    includeTicketmaster?: boolean;\n    includeHistorical?: boolean;\n    startDate?: string;\n    endDate?: string;\n  } = {}): Promise<ConcertWithRating[]> {\n    try {\n      // Get database concerts first\n      const dbConcerts = await this.getConcerts(options);\n      \n      let combinedConcerts = [...dbConcerts];\n      const allConcertIds = new Set(dbConcerts.map(c => c.id));\n\n      // Add Ticketmaster events if requested\n      if (options.includeTicketmaster) {\n        const tmOptions: TicketmasterSearchOptions = {\n          size: options.limit || 20,\n          page: Math.floor((options.offset || 0) / (options.limit || 20)),\n        };\n\n        if (options.search) tmOptions.keyword = options.search;\n        if (options.city) tmOptions.city = options.city;\n        if (options.genre) tmOptions.classificationName = options.genre;\n        if (options.startDate) tmOptions.startDateTime = options.startDate + 'T00:00:00Z';\n        if (options.endDate) tmOptions.endDateTime = options.endDate + 'T23:59:59Z';\n\n        const tmEvents = await this.searchTicketmasterEvents(tmOptions);\n        \n        const tmConcerts: ConcertWithRating[] = tmEvents.map(event => ({\n          ...event,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          averageRating: undefined,\n          performanceRating: undefined,\n          soundRating: undefined,\n          venueRating: undefined,\n          valueRating: undefined,\n          reviewCount: 0,\n        }));\n\n        // Add Ticketmaster concerts that aren't already in the database\n        for (const tmConcert of tmConcerts) {\n          if (!allConcertIds.has(tmConcert.id)) {\n            combinedConcerts.push(tmConcert);\n            allConcertIds.add(tmConcert.id);\n          }\n        }\n      }\n\n      // Add Setlist.fm historical events if requested\n      if (options.includeHistorical) {\n        const sfmOptions: SetlistFmSearchOptions = {\n          p: Math.floor((options.offset || 0) / (options.limit || 20)) + 1, // Setlist.fm pages start at 1\n        };\n\n        if (options.search) sfmOptions.artistName = options.search;\n        if (options.city) sfmOptions.cityName = options.city;\n\n        const sfmEvents = await this.searchSetlistFmEvents(sfmOptions);\n        \n        const sfmConcerts: ConcertWithRating[] = sfmEvents.map(event => ({\n          ...event,\n          createdAt: new Date(),\n          updatedAt: new Date(),\n          averageRating: undefined,\n          performanceRating: undefined,\n          soundRating: undefined,\n          venueRating: undefined,\n          valueRating: undefined,\n          reviewCount: 0,\n        }));\n\n        // Add Setlist.fm concerts that aren't already in the combined results\n        for (const sfmConcert of sfmConcerts) {\n          if (!allConcertIds.has(sfmConcert.id)) {\n            combinedConcerts.push(sfmConcert);\n            allConcertIds.add(sfmConcert.id);\n          }\n        }\n      }\n\n      // Apply search filtering to combined results\n      let filteredConcerts = combinedConcerts;\n      \n      if (options.search) {\n        const searchLower = options.search.toLowerCase();\n        filteredConcerts = combinedConcerts.filter(concert =>\n          concert.artist.toLowerCase().includes(searchLower) ||\n          concert.venue.toLowerCase().includes(searchLower) ||\n          concert.city.toLowerCase().includes(searchLower)\n        );\n      }\n\n      if (options.genre) {\n        const genreLower = options.genre.toLowerCase();\n        filteredConcerts = filteredConcerts.filter(concert =>\n          concert.genre?.toLowerCase().includes(genreLower)\n        );\n      }\n\n      // Apply pagination\n      const startIndex = options.offset || 0;\n      const endIndex = startIndex + (options.limit || 50);\n      \n      return filteredConcerts.slice(startIndex, endIndex);\n    } catch (error) {\n      console.error('Error getting concerts with historical data:', error);\n      // Fallback to database-only concerts\n      return this.getConcerts(options);\n    }\n  }\n}\n\nexport const storage = new PostgresStorage();\n","size_bytes":41442},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, real, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (mandatory for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Users table (updated for Replit Auth integration)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  username: varchar(\"username\", { length: 30 }).unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  // Extended fields for concert critic functionality\n  bio: text(\"bio\"),\n  location: text(\"location\"),\n  isVerified: boolean(\"is_verified\").default(false),\n  isPrivate: boolean(\"is_private\").default(false),\n  favoriteGenres: text(\"favorite_genres\").array().default(sql`'{}'::text[]`),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Concerts table\nexport const concerts = pgTable(\"concerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  artist: text(\"artist\").notNull(),\n  venue: text(\"venue\").notNull(),\n  city: text(\"city\").notNull(),\n  date: text(\"date\").notNull(), // Store as ISO string for simplicity\n  time: text(\"time\").notNull(),\n  price: text(\"price\").notNull(),\n  genre: text(\"genre\"),\n  imageUrl: text(\"image_url\"),\n  ticketUrl: text(\"ticket_url\"),\n  description: text(\"description\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Reviews table\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  concertId: varchar(\"concert_id\").references(() => concerts.id, { onDelete: \"cascade\" }).notNull(),\n  overallRating: integer(\"overall_rating\").notNull(), // 1-5\n  performanceRating: integer(\"performance_rating\").notNull(),\n  soundRating: integer(\"sound_rating\").notNull(),\n  venueRating: integer(\"venue_rating\").notNull(),\n  valueRating: integer(\"value_rating\").notNull(),\n  reviewText: text(\"review_text\").notNull(),\n  photos: text(\"photos\").array().default(sql`'{}'::text[]`),\n  likes: integer(\"likes\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => ({\n  uniqueUserConcert: sql`UNIQUE (${table.userId}, ${table.concertId})`,\n}));\n\n// User follows table (for social features)\nexport const userFollows = pgTable(\"user_follows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  followerId: varchar(\"follower_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  followingId: varchar(\"following_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniqueUserFollow: sql`UNIQUE (${table.followerId}, ${table.followingId})`,\n}));\n\n// Concert wishlists table\nexport const concertWishlists = pgTable(\"concert_wishlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  concertId: varchar(\"concert_id\").references(() => concerts.id, { onDelete: \"cascade\" }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniqueUserConcert: sql`UNIQUE (${table.userId}, ${table.concertId})`,\n}));\n\n// Review likes table\nexport const reviewLikes = pgTable(\"review_likes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  reviewId: varchar(\"review_id\").references(() => reviews.id, { onDelete: \"cascade\" }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniqueUserReview: sql`UNIQUE (${table.userId}, ${table.reviewId})`,\n}));\n\n// Review comments table\nexport const reviewComments = pgTable(\"review_comments\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  reviewId: varchar(\"review_id\").references(() => reviews.id, { onDelete: \"cascade\" }).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  commentText: text(\"comment_text\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  type: varchar(\"type\", { length: 50 }).notNull(), // 'follow', 'like', 'comment', 'review', 'mention'\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  link: text(\"link\"), // URL to the related content\n  isRead: boolean(\"is_read\").default(false),\n  relatedUserId: varchar(\"related_user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  relatedReviewId: varchar(\"related_review_id\").references(() => reviews.id, { onDelete: \"cascade\" }),\n  relatedConcertId: varchar(\"related_concert_id\").references(() => concerts.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"notifications_user_id_idx\").on(table.userId),\n  index(\"notifications_is_read_idx\").on(table.isRead),\n]);\n\n// Artists table\nexport const artists = pgTable(\"artists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  genres: text(\"genres\").array().default(sql`'{}'::text[]`),\n  bio: text(\"bio\"),\n  imageUrl: text(\"image_url\"),\n  spotifyUrl: text(\"spotify_url\"),\n  website: text(\"website\"),\n  country: text(\"country\"),\n  isVerified: boolean(\"is_verified\").default(false),\n  followerCount: integer(\"follower_count\").default(0),\n  concertCount: integer(\"concert_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"artists_name_idx\").on(table.name),\n]);\n\n// Venues table  \nexport const venues = pgTable(\"venues\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  city: text(\"city\").notNull(),\n  state: text(\"state\"),\n  country: text(\"country\").notNull(),\n  address: text(\"address\"),\n  capacity: integer(\"capacity\"),\n  type: varchar(\"type\", { length: 50 }), // 'arena', 'theater', 'club', 'stadium', 'festival', 'outdoor'\n  amenities: text(\"amenities\").array().default(sql`'{}'::text[]`), // ['parking', 'food', 'bar', 'accessible']\n  imageUrl: text(\"image_url\"),\n  website: text(\"website\"),\n  averageRating: real(\"average_rating\"),\n  reviewCount: integer(\"review_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"venues_city_idx\").on(table.city),\n  index(\"venues_name_idx\").on(table.name),\n]);\n\n// User settings table\nexport const userSettings = pgTable(\"user_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull().unique(),\n  emailNotifications: boolean(\"email_notifications\").default(true),\n  pushNotifications: boolean(\"push_notifications\").default(true),\n  newFollowerNotif: boolean(\"new_follower_notif\").default(true),\n  newReviewNotif: boolean(\"new_review_notif\").default(true),\n  newCommentNotif: boolean(\"new_comment_notif\").default(true),\n  newLikeNotif: boolean(\"new_like_notif\").default(true),\n  upcomingConcertReminders: boolean(\"upcoming_concert_reminders\").default(true),\n  theme: varchar(\"theme\", { length: 20 }).default(\"system\"), // 'light', 'dark', 'system'\n  language: varchar(\"language\", { length: 10 }).default(\"en\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Setlists table\nexport const setlists = pgTable(\"setlists\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  concertId: varchar(\"concert_id\").references(() => concerts.id, { onDelete: \"cascade\" }).notNull(),\n  songs: text(\"songs\").array().default(sql`'{}'::text[]`), // Array of song names\n  encoreSongs: text(\"encore_songs\").array().default(sql`'{}'::text[]`),\n  notes: text(\"notes\"),\n  source: varchar(\"source\", { length: 50 }), // 'setlistfm', 'user_submitted'\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"setlists_concert_id_idx\").on(table.concertId),\n]);\n\n// Artist follows (for following artists to get notified about their concerts)\nexport const artistFollows = pgTable(\"artist_follows\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  artistId: varchar(\"artist_id\").references(() => artists.id, { onDelete: \"cascade\" }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniqueUserArtist: sql`UNIQUE (${table.userId}, ${table.artistId})`,\n}));\n\n// Zod schemas for validation\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const upsertUserSchema = insertUserSchema.partial().extend({\n  id: z.string(), // Required for Replit Auth\n});\n\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\n\nexport const insertConcertSchema = createInsertSchema(concerts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  likes: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  overallRating: z.number().min(1).max(5),\n  performanceRating: z.number().min(1).max(5),\n  soundRating: z.number().min(1).max(5),\n  venueRating: z.number().min(1).max(5),\n  valueRating: z.number().min(1).max(5),\n  reviewText: z.string().min(10).max(2000),\n});\n\nexport const insertUserFollowSchema = createInsertSchema(userFollows).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertConcertWishlistSchema = createInsertSchema(concertWishlists).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReviewLikeSchema = createInsertSchema(reviewLikes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReviewCommentSchema = createInsertSchema(reviewComments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  commentText: z.string().min(1).max(500),\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertArtistSchema = createInsertSchema(artists).omit({\n  id: true,\n  followerCount: true,\n  concertCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertVenueSchema = createInsertSchema(venues).omit({\n  id: true,\n  averageRating: true,\n  reviewCount: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSettingsSchema = createInsertSchema(userSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSetlistSchema = createInsertSchema(setlists).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertArtistFollowSchema = createInsertSchema(artistFollows).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Additional type exports\nexport type Concert = typeof concerts.$inferSelect;\nexport type Review = typeof reviews.$inferSelect;\nexport type UserFollow = typeof userFollows.$inferSelect;\nexport type ConcertWishlist = typeof concertWishlists.$inferSelect;\nexport type ReviewLike = typeof reviewLikes.$inferSelect;\nexport type ReviewComment = typeof reviewComments.$inferSelect;\nexport type Notification = typeof notifications.$inferSelect;\nexport type Artist = typeof artists.$inferSelect;\nexport type Venue = typeof venues.$inferSelect;\nexport type UserSettings = typeof userSettings.$inferSelect;\nexport type Setlist = typeof setlists.$inferSelect;\nexport type ArtistFollow = typeof artistFollows.$inferSelect;\n\nexport type InsertConcert = z.infer<typeof insertConcertSchema>;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type InsertUserFollow = z.infer<typeof insertUserFollowSchema>;\nexport type InsertConcertWishlist = z.infer<typeof insertConcertWishlistSchema>;\nexport type InsertReviewLike = z.infer<typeof insertReviewLikeSchema>;\nexport type InsertReviewComment = z.infer<typeof insertReviewCommentSchema>;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type InsertArtist = z.infer<typeof insertArtistSchema>;\nexport type InsertVenue = z.infer<typeof insertVenueSchema>;\nexport type InsertUserSettings = z.infer<typeof insertUserSettingsSchema>;\nexport type InsertSetlist = z.infer<typeof insertSetlistSchema>;\nexport type InsertArtistFollow = z.infer<typeof insertArtistFollowSchema>;\n\n// Public user type (excludes sensitive fields)\nexport type PublicUser = Omit<User, 'email'>;\n\n// Extended types for API responses\nexport type ReviewWithUser = Review & {\n  user: PublicUser;\n  concert: Concert;\n  isLiked?: boolean;\n  likesCount?: number;\n  commentsCount?: number;\n};\n\nexport type ReviewCommentWithUser = ReviewComment & {\n  user: PublicUser;\n};\n\nexport type ConcertWithRating = Concert & {\n  averageRating?: number;\n  performanceRating?: number;\n  soundRating?: number;\n  venueRating?: number;\n  valueRating?: number;\n  reviewCount?: number;\n  isWishlisted?: boolean;\n};\n\nexport type UserWithStats = PublicUser & {\n  stats: {\n    concertsAttended: number;\n    reviewsWritten: number;\n    followers: number;\n    following: number;\n    averageRating?: number;\n  };\n  isFollowing?: boolean;\n};\n","size_bytes":14231},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { SidebarProvider, SidebarTrigger } from \"@/components/ui/sidebar\";\nimport { AppSidebar } from \"@/components/app-sidebar\";\nimport { MobileBottomNav } from \"@/components/mobile-bottom-nav\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ThemeToggle } from \"@/components/theme-toggle\";\nimport { AuthProvider, useAuth } from \"@/hooks/useAuth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport Discover from \"@/pages/discover\";\nimport Reviews from \"@/pages/reviews\";\nimport Profile from \"@/pages/profile\";\nimport Wishlist from \"@/pages/wishlist\";\nimport Timeline from \"@/pages/timeline\";\nimport Settings from \"@/pages/settings\";\nimport SearchUsers from \"@/pages/search-users\";\nimport ConcertDetail from \"@/pages/concert-detail\";\nimport AuthPage from \"@/pages/auth-page\";\nimport LandingPage from \"@/pages/landing\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LandingPage} />\n      <ProtectedRoute path=\"/discover\" component={Discover} />\n      <ProtectedRoute path=\"/concerts/:id\" component={ConcertDetail} />\n      <ProtectedRoute path=\"/timeline\" component={Timeline} />\n      <ProtectedRoute path=\"/search-users\" component={SearchUsers} />\n      <ProtectedRoute path=\"/reviews\" component={Reviews} />\n      <ProtectedRoute path=\"/wishlist\" component={Wishlist} />\n      <ProtectedRoute path=\"/profile/:username\" component={Profile} />\n      <ProtectedRoute path=\"/profile\" component={Profile} />\n      <ProtectedRoute path=\"/notifications\" component={() => <NotFound />} />\n      <ProtectedRoute path=\"/settings\" component={Settings} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction MainApp() {\n  const { user, isLoading } = useAuth();\n  const [location, navigate] = useLocation();\n  \n  const style = {\n    \"--sidebar-width\": \"20rem\",\n    \"--sidebar-width-icon\": \"4rem\",\n  };\n\n  const handleCreateReview = () => {\n    navigate(\"/reviews\");\n  };\n\n  // Show loading state during auth check\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Show landing page layout for unauthenticated users or on auth/landing pages\n  const isPublicPage = location === \"/\" || location === \"/auth\";\n  const shouldShowPublicLayout = !user || isPublicPage;\n\n  if (shouldShowPublicLayout) {\n    return (\n      <div className=\"min-h-screen\">\n        <Router />\n      </div>\n    );\n  }\n\n  // Show authenticated app layout\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        {/* Desktop Sidebar - hidden on mobile */}\n        <div className=\"hidden md:block\">\n          <AppSidebar />\n        </div>\n        \n        {/* Main Content Area */}\n        <div className=\"flex flex-col flex-1 overflow-hidden\">\n          {/* Header - only show on desktop */}\n          <header className=\"hidden md:flex items-center justify-between p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n            <div className=\"flex items-center gap-4\">\n              <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n              <div>\n                <h1 className=\"font-semibold text-lg\">ConcertCritic</h1>\n              </div>\n            </div>\n            <ThemeToggle />\n          </header>\n          \n          {/* Mobile Header - only show on mobile */}\n          <header className=\"md:hidden flex items-center justify-between p-4 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n            <h1 className=\"font-semibold text-lg\">ConcertCritic</h1>\n            <ThemeToggle />\n          </header>\n          \n          {/* Main Content - with padding bottom for mobile nav */}\n          <main className=\"flex-1 overflow-auto p-6 bg-background pb-20 md:pb-6\">\n            <Router />\n          </main>\n        </div>\n      </div>\n      \n      {/* Mobile Bottom Navigation - only show on mobile */}\n      <MobileBottomNav onCreateReview={handleCreateReview} />\n    </SidebarProvider>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <ThemeProvider defaultTheme=\"system\" storageKey=\"concertcritic-theme\">\n            <MainApp />\n            <Toaster />\n          </ThemeProvider>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4921},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 0 0% 10%;\n\n  --border: 0 0% 92%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 0 0% 10%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 0 0% 10%;\n\n  --sidebar-border: 0 0% 90%;\n\n  --sidebar-primary: 206 100% 65%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 94%;\n\n  --sidebar-accent-foreground: 0 0% 15%;\n\n  --sidebar-ring: 206 100% 65%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 0 0% 10%;\n\n  --popover-border: 0 0% 92%;\n\n  --primary: 206 100% 65%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 94%;\n\n  --secondary-foreground: 0 0% 15%;\n\n  --muted: 0 0% 96%;\n\n  --muted-foreground: 0 0% 45%;\n\n  --accent: 0 0% 96%;\n\n  --accent-foreground: 0 0% 15%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 88%;\n  --ring: 206 100% 65%;\n  --chart-1: 206 100% 65%;\n  --chart-2: 240 80% 30%;\n  --chart-3: 142 76% 36%;\n  --chart-4: 45 93% 47%;\n  --chart-5: 0 72% 51%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 15 8% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 15 6% 16%;\n\n  --card: 15 6% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 15 6% 18%;\n\n  --sidebar: 15 6% 10%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 15 6% 14%;\n\n  --sidebar-primary: 206 100% 75%;\n\n  --sidebar-primary-foreground: 0 0% 95%;\n\n  --sidebar-accent: 15 6% 14%;\n\n  --sidebar-accent-foreground: 0 0% 85%;\n\n  --sidebar-ring: 206 100% 75%;\n\n  --popover: 15 6% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 15 6% 20%;\n\n  --primary: 206 100% 75%;\n\n  --primary-foreground: 0 0% 95%;\n\n  --secondary: 15 6% 16%;\n\n  --secondary-foreground: 0 0% 85%;\n\n  --muted: 15 6% 12%;\n\n  --muted-foreground: 0 0% 65%;\n\n  --accent: 15 6% 14%;\n\n  --accent-foreground: 0 0% 85%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 95%;\n\n  --input: 15 6% 20%;\n  --ring: 206 100% 75%;\n  --chart-1: 206 100% 75%;\n  --chart-2: 240 80% 60%;\n  --chart-3: 142 76% 50%;\n  --chart-4: 45 93% 60%;\n  --chart-5: 0 72% 60%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 1px 2px -1px hsl(0 0% 0% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 2px 4px -1px hsl(0 0% 0% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 4px 6px -1px hsl(0 0% 0% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00), 0px 8px 10px -1px hsl(0 0% 0% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(0 0% 0% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9654},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/app-sidebar.tsx":{"content":"import { Compass, PenTool, User as UserIcon, Heart, Settings, Bell, Users, LogOut } from \"lucide-react\";\nimport logoImage from \"@assets/cc-logo.png\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarHeader,\n  SidebarFooter,\n} from \"@/components/ui/sidebar\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { User } from \"@shared/schema\";\n\nconst navigationItems = [\n  {\n    title: \"Discover\",\n    url: \"/discover\",\n    icon: Compass,\n    description: \"Find concerts near you\"\n  },\n  {\n    title: \"Timeline\",\n    url: \"/timeline\",\n    icon: Users,\n    description: \"Social feed & trending\"\n  },\n  {\n    title: \"Wishlist\",\n    url: \"/wishlist\",\n    icon: Heart,\n    description: \"Saved concerts\"\n  },\n  {\n    title: \"Profile\",\n    url: \"/profile\",\n    icon: UserIcon,\n    description: \"Your music profile\"\n  },\n];\n\nconst settingsItems = [\n  {\n    title: \"Notifications\",\n    url: \"/notifications\",\n    icon: Bell,\n    badge: \"3\"\n  },\n  {\n    title: \"Settings\",\n    url: \"/settings\",\n    icon: Settings,\n  },\n];\n\nexport function AppSidebar() {\n  const [location, navigate] = useLocation();\n  const { user } = useAuth();\n\n  const handleNavigation = (url: string, title: string) => {\n    console.log(`Navigating to ${title}: ${url}`);\n    navigate(url);\n  };\n\n  const handleProfileClick = () => {\n    console.log('Opening user profile');\n    navigate('/profile');\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  // Generate initials from user name or email\n  const getInitials = () => {\n    if (!user) return \"U\";\n    \n    if (user.firstName && user.lastName) {\n      return `${user.firstName[0]}${user.lastName[0]}`.toUpperCase();\n    }\n    \n    if (user.firstName) {\n      return user.firstName[0].toUpperCase();\n    }\n    \n    if (user.email) {\n      return user.email[0].toUpperCase();\n    }\n    \n    return \"U\";\n  };\n\n  // Generate display name\n  const getDisplayName = () => {\n    if (!user) return \"User\";\n    \n    if (user.firstName && user.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    \n    if (user.firstName) {\n      return user.firstName;\n    }\n    \n    if (user.email) {\n      return user.email.split('@')[0];\n    }\n    \n    return \"User\";\n  };\n\n  // Generate username - prioritize custom username\n  const getUsername = () => {\n    if (!user) return \"@user\";\n    \n    // Use custom username if available\n    if (user.username) return `@${user.username}`;\n    \n    // Generate safe fallback from first name (no dots or invalid chars)\n    if (user.firstName) {\n      const sanitized = user.firstName.toLowerCase().replace(/[^a-z0-9_-]/g, '');\n      if (sanitized) return `@${sanitized}`;\n    }\n    if (user.lastName) {\n      const sanitized = user.lastName.toLowerCase().replace(/[^a-z0-9_-]/g, '');\n      if (sanitized) return `@${sanitized}`;\n    }\n    \n    return \"@user\";\n  };\n\n  return (\n    <Sidebar data-testid=\"sidebar-main\">\n      <SidebarHeader className=\"p-4\">\n        <div className=\"flex items-center gap-3\">\n          <img \n            src={logoImage} \n            alt=\"ConcertCritic Logo\" \n            className=\"h-8 w-auto\"\n          />\n        </div>\n      </SidebarHeader>\n      \n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {navigationItems.map((item) => {\n                const isActive = location === item.url;\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild\n                      className={isActive ? 'bg-sidebar-accent' : ''}\n                      data-testid={`nav-${item.title.toLowerCase().replace(' ', '-')}`}\n                    >\n                      <button\n                        onClick={() => handleNavigation(item.url, item.title)}\n                        className=\"w-full\"\n                      >\n                        <item.icon className=\"h-4 w-4\" />\n                        <div className=\"text-left\">\n                          <span className=\"font-medium\">{item.title}</span>\n                          <br />\n                          <span className=\"text-xs text-muted-foreground\">{item.description}</span>\n                        </div>\n                      </button>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel>Account</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {settingsItems.map((item) => {\n                const isActive = location === item.url;\n                return (\n                  <SidebarMenuItem key={item.title}>\n                    <SidebarMenuButton \n                      asChild\n                      className={isActive ? 'bg-sidebar-accent' : ''}\n                      data-testid={`nav-${item.title.toLowerCase()}`}\n                    >\n                      <button\n                        onClick={() => handleNavigation(item.url, item.title)}\n                        className=\"w-full flex items-center justify-between\"\n                      >\n                        <div className=\"flex items-center gap-2\">\n                          <item.icon className=\"h-4 w-4\" />\n                          <span>{item.title}</span>\n                        </div>\n                        {item.badge && (\n                          <Badge variant=\"secondary\" className=\"ml-auto\">\n                            {item.badge}\n                          </Badge>\n                        )}\n                      </button>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      \n      <SidebarFooter className=\"p-4 space-y-2\">\n        <div className=\"flex items-center gap-3 p-2 rounded-lg hover-elevate cursor-pointer\" onClick={handleProfileClick}>\n          <Avatar data-testid=\"avatar-current-user\">\n            <AvatarImage src={user?.profileImageUrl || undefined} alt={getDisplayName()} />\n            <AvatarFallback>{getInitials()}</AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1 min-w-0\">\n            <p className=\"font-medium text-sm truncate\" data-testid=\"text-display-name\">{getDisplayName()}</p>\n            <p className=\"text-xs text-muted-foreground truncate\" data-testid=\"text-username\">{getUsername()}</p>\n          </div>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleLogout}\n          className=\"w-full justify-start\"\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"h-4 w-4 mr-2\" />\n          Sign Out\n        </Button>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n","size_bytes":7313},"client/src/components/concert-card.tsx":{"content":"import { Calendar, MapPin, Star, Heart, ExternalLink } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\n\ninterface ConcertCardProps {\n  id: string;\n  artist: string;\n  venue: string;\n  date: string;\n  time: string;\n  city: string;\n  price: string;\n  genre?: string;\n  imageUrl?: string;\n  rating?: number;\n  isWishlisted?: boolean;\n  ticketUrl?: string;\n}\n\nexport default function ConcertCard({\n  id,\n  artist,\n  venue,\n  date,\n  time,\n  city,\n  price,\n  genre,\n  imageUrl,\n  rating,\n  isWishlisted = false,\n  ticketUrl,\n}: ConcertCardProps) {\n  const [wishlistState, setWishlistState] = useState(isWishlisted);\n\n  const handleWishlistToggle = () => {\n    setWishlistState(!wishlistState);\n    console.log(`${wishlistState ? 'Removed from' : 'Added to'} wishlist: ${artist}`);\n  };\n\n  const handleCardClick = () => {\n    console.log(`Viewing concert details: ${id}`);\n  };\n\n  const handleTicketClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (ticketUrl) {\n      window.open(ticketUrl, '_blank', 'noopener,noreferrer');\n    } else {\n      console.log(`No ticket URL available for: ${artist}`);\n    }\n  };\n\n  return (\n    <Card \n      className=\"group hover-elevate overflow-hidden cursor-pointer\" \n      onClick={handleCardClick}\n      data-testid={`card-concert-${id}`}\n    >\n      <div className=\"relative\">\n        <div className=\"aspect-video bg-gradient-to-br from-primary/20 to-primary/40 flex items-center justify-center\">\n          {imageUrl ? (\n            <img \n              src={imageUrl} \n              alt={artist}\n              className=\"w-full h-full object-cover\"\n            />\n          ) : (\n            <div className=\"text-4xl font-bold text-primary/60\">\n              {artist.charAt(0)}\n            </div>\n          )}\n        </div>\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent\" />\n        \n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"absolute top-2 right-2 bg-background/20 backdrop-blur-sm hover:bg-background/40\"\n          onClick={(e) => {\n            e.stopPropagation();\n            handleWishlistToggle();\n          }}\n          data-testid={`button-wishlist-${id}`}\n        >\n          <Heart className={`h-4 w-4 ${wishlistState ? 'fill-red-500 text-red-500' : 'text-white'}`} />\n        </Button>\n\n        {genre && (\n          <Badge className=\"absolute top-2 left-2\" variant=\"secondary\">\n            {genre}\n          </Badge>\n        )}\n      </div>\n      \n      <CardContent className=\"p-4\">\n        <div className=\"space-y-3\">\n          <div>\n            <h3 className=\"font-semibold text-lg leading-tight group-hover:text-primary transition-colors\" data-testid={`text-artist-${id}`}>\n              {artist}\n            </h3>\n            <p className=\"text-muted-foreground text-sm\" data-testid={`text-venue-${id}`}>\n              {venue}\n            </p>\n          </div>\n          \n          <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-1\">\n              <Calendar className=\"h-4 w-4\" />\n              <span>{date}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <MapPin className=\"h-4 w-4\" />\n              <span>{city}</span>\n            </div>\n          </div>\n\n          {rating && (\n            <div className=\"flex items-center gap-1\">\n              <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n              <span className=\"text-sm font-medium\">{rating.toFixed(1)}</span>\n            </div>\n          )}\n          \n          <div className=\"flex items-center justify-between pt-2\">\n            <div>\n              <span className=\"text-lg font-semibold\">{price}</span>\n              <span className=\"text-sm text-muted-foreground ml-1\">• {time}</span>\n            </div>\n            <Button \n              size=\"sm\" \n              onClick={handleTicketClick}\n              disabled={!ticketUrl}\n              data-testid={`button-tickets-${id}`}\n            >\n              <ExternalLink className=\"h-4 w-4 mr-1\" />\n              Tickets\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4399},"client/src/components/review-card.tsx":{"content":"import { Star, Heart, MessageCircle, Calendar, MapPin, MoreVertical, Pencil, Trash2 } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CommentDialog } from \"./comment-dialog\";\n\ninterface ReviewCardProps {\n  id: string;\n  userId: string; // Add userId to check ownership\n  user: {\n    name: string;\n    username: string;\n    avatar?: string;\n  };\n  concert: {\n    artist: string;\n    venue: string;\n    date: string;\n    city: string;\n  };\n  rating: {\n    overall: number;\n    performance: number;\n    sound: number;\n    venue: number;\n    value: number;\n  };\n  reviewText: string;\n  photos?: string[];\n  likes: number;\n  comments: number;\n  isLiked?: boolean;\n  postedAt: string;\n  onEdit?: () => void; // Callback for edit action\n}\n\nexport default function ReviewCard({\n  id,\n  userId,\n  user,\n  concert,\n  rating,\n  reviewText,\n  photos = [],\n  likes: initialLikes,\n  comments: initialComments,\n  isLiked: initialIsLiked = false,\n  postedAt,\n  onEdit,\n}: ReviewCardProps) {\n  const [commentDialogOpen, setCommentDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const { toast } = useToast();\n  const { user: currentUser } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Check if current user owns this review\n  const isOwner = currentUser?.id === userId;\n\n  // Fetch current like status and count from API\n  const { data: likesData } = useQuery({\n    queryKey: ['/api/reviews', id, 'likes'],\n    initialData: { count: initialLikes, isLiked: initialIsLiked },\n  });\n\n  // Fetch comment count from API\n  const { data: commentsData } = useQuery({\n    queryKey: ['/api/reviews', id, 'comments'],\n    initialData: [],\n    select: (data: any[]) => data.length, // Return just the count\n  });\n\n  // Like/Unlike mutation\n  const likeMutation = useMutation({\n    mutationFn: async () => {\n      if (likesData?.isLiked) {\n        // Unlike\n        return apiRequest('DELETE', `/api/reviews/${id}/like`);\n      } else {\n        // Like\n        return apiRequest('POST', `/api/reviews/${id}/like`);\n      }\n    },\n    onMutate: async () => {\n      // Cancel outgoing refetches\n      await queryClient.cancelQueries({ queryKey: ['/api/reviews', id, 'likes'] });\n      \n      // Snapshot previous value\n      const previousLikes = queryClient.getQueryData(['/api/reviews', id, 'likes']);\n      \n      // Optimistically update to new value\n      queryClient.setQueryData(['/api/reviews', id, 'likes'], (old: any) => ({\n        count: (old?.count || 0) + (old?.isLiked ? -1 : 1),\n        isLiked: !old?.isLiked,\n      }));\n      \n      return { previousLikes };\n    },\n    onError: (err: any, variables, context) => {\n      // If mutation fails, use context to roll back\n      queryClient.setQueryData(['/api/reviews', id, 'likes'], context?.previousLikes);\n      \n      // Handle 401 errors specifically\n      if (err.status === 401) {\n        toast({\n          title: \"Please log in\",\n          description: \"You need to be logged in to like reviews.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to update like. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n    onSettled: () => {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey: ['/api/reviews', id, 'likes'] });\n    },\n  });\n\n  const handleLike = () => {\n    likeMutation.mutate();\n  };\n\n  const handleComment = () => {\n    setCommentDialogOpen(true);\n  };\n\n  const handleUserClick = () => {\n    console.log(`Viewing profile: ${user.username}`);\n  };\n\n  // Delete review mutation\n  const deleteReviewMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('DELETE', `/api/reviews/${id}`);\n      return response;\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Review deleted\",\n        description: \"Your review has been successfully deleted.\",\n      });\n      \n      // Invalidate all review queries\n      queryClient.invalidateQueries({ queryKey: ['/api/reviews'] });\n      if (currentUser?.id) {\n        queryClient.invalidateQueries({ queryKey: ['/api/users', currentUser.id, 'reviews'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/users', currentUser.id, 'stats'] });\n      }\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete review\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = () => {\n    setDeleteDialogOpen(true);\n  };\n\n  const confirmDelete = () => {\n    deleteReviewMutation.mutate();\n    setDeleteDialogOpen(false);\n  };\n\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < rating ? 'fill-yellow-400 text-yellow-400' : 'text-muted-foreground'\n        }`}\n      />\n    ));\n  };\n\n  return (\n    <>\n    <Card className=\"hover-elevate\" data-testid={`card-review-${id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Avatar \n              className=\"cursor-pointer\" \n              onClick={handleUserClick}\n              data-testid={`avatar-user-${user.username}`}\n            >\n              <AvatarImage src={user.avatar} alt={user.name} />\n              <AvatarFallback>{user.name?.charAt(0) || user.username?.charAt(0) || '?'}</AvatarFallback>\n            </Avatar>\n            <div>\n              <h4 \n                className=\"font-semibold cursor-pointer hover:text-primary transition-colors\"\n                onClick={handleUserClick}\n                data-testid={`text-username-${user.username}`}\n              >\n                {user.name}\n              </h4>\n              <p className=\"text-sm text-muted-foreground\">@{user.username}</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <div className=\"text-right\">\n              <div className=\"flex items-center gap-1 mb-1\">\n                {renderStars(rating.overall)}\n                <span className=\"text-sm font-medium ml-1\">{rating.overall.toFixed(1)}</span>\n              </div>\n              <p className=\"text-xs text-muted-foreground\">{postedAt}</p>\n            </div>\n            {/* Edit/Delete menu for review owner */}\n            {isOwner && (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"icon\"\n                    className=\"h-8 w-8\"\n                    data-testid={`button-review-menu-${id}`}\n                  >\n                    <MoreVertical className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  {onEdit && (\n                    <DropdownMenuItem \n                      onClick={onEdit}\n                      data-testid={`button-edit-review-${id}`}\n                    >\n                      <Pencil className=\"h-4 w-4 mr-2\" />\n                      Edit Review\n                    </DropdownMenuItem>\n                  )}\n                  <DropdownMenuItem \n                    onClick={handleDelete}\n                    className=\"text-destructive\"\n                    data-testid={`button-delete-review-${id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4 mr-2\" />\n                    Delete Review\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            )}\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Concert Info */}\n        <div className=\"bg-muted/50 rounded-lg p-3\">\n          <h5 className=\"font-semibold text-sm\" data-testid={`text-concert-artist-${id}`}>\n            {concert.artist}\n          </h5>\n          <div className=\"flex items-center gap-4 text-xs text-muted-foreground mt-1\">\n            <div className=\"flex items-center gap-1\">\n              <MapPin className=\"h-3 w-3\" />\n              <span>{concert.venue}, {concert.city}</span>\n            </div>\n            <div className=\"flex items-center gap-1\">\n              <Calendar className=\"h-3 w-3\" />\n              <span>{concert.date}</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Detailed Ratings */}\n        <div className=\"grid grid-cols-2 gap-2 text-sm\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Performance:</span>\n            <div className=\"flex items-center gap-1\">\n              {renderStars(rating.performance)}\n            </div>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Sound:</span>\n            <div className=\"flex items-center gap-1\">\n              {renderStars(rating.sound)}\n            </div>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Venue:</span>\n            <div className=\"flex items-center gap-1\">\n              {renderStars(rating.venue)}\n            </div>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-muted-foreground\">Value:</span>\n            <div className=\"flex items-center gap-1\">\n              {renderStars(rating.value)}\n            </div>\n          </div>\n        </div>\n\n        {/* Review Text */}\n        <div className=\"text-sm leading-relaxed\" data-testid={`text-review-content-${id}`}>\n          {reviewText}\n        </div>\n\n        {/* Photos */}\n        {photos.length > 0 && (\n          <div className=\"flex gap-2 overflow-x-auto\">\n            {photos.map((photo, index) => (\n              <div \n                key={index} \n                className=\"flex-shrink-0 w-20 h-20 bg-muted rounded-md overflow-hidden cursor-pointer hover-elevate\"\n                onClick={() => console.log(`Viewing photo ${index + 1}`)}\n              >\n                <img \n                  src={photo} \n                  alt={`Review photo ${index + 1}`}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Actions */}\n        <div className=\"flex items-center gap-4 pt-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleLike}\n            disabled={likeMutation.isPending}\n            className={likesData?.isLiked ? 'text-red-500' : ''}\n            data-testid={`button-like-${id}`}\n          >\n            <Heart className={`h-4 w-4 mr-1 ${likesData?.isLiked ? 'fill-current' : ''}`} />\n            {likesData?.count || 0}\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleComment}\n            data-testid={`button-comment-${id}`}\n          >\n            <MessageCircle className=\"h-4 w-4 mr-1\" />\n            {commentsData || 0}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n    \n    <CommentDialog\n      isOpen={commentDialogOpen}\n      onClose={() => setCommentDialogOpen(false)}\n      reviewId={id}\n      reviewTitle={`Review by ${user.name}`}\n    />\n    \n    {/* Delete confirmation dialog */}\n    <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n      <AlertDialogContent data-testid=\"dialog-delete-review-confirm\">\n        <AlertDialogHeader>\n          <AlertDialogTitle>Delete Review</AlertDialogTitle>\n          <AlertDialogDescription>\n            Are you sure you want to delete this review? This action cannot be undone.\n          </AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n          <AlertDialogAction\n            onClick={confirmDelete}\n            className=\"bg-destructive hover:bg-destructive/90\"\n            disabled={deleteReviewMutation.isPending}\n            data-testid=\"button-confirm-delete\"\n          >\n            {deleteReviewMutation.isPending ? \"Deleting...\" : \"Delete\"}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n    </>\n  );\n}\n","size_bytes":13319},"client/src/components/search-filters.tsx":{"content":"import { Search, Filter, MapPin, Calendar, CalendarDays, X } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Calendar as CalendarComponent } from \"@/components/ui/calendar\";\nimport { Label } from \"@/components/ui/label\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { useState } from \"react\";\nimport { format } from \"date-fns\";\nimport type { DateRange } from \"react-day-picker\";\n\ninterface SearchFiltersProps {\n  onSearch?: (query: string) => void;\n  onLocationChange?: (location: string) => void;\n  onGenreChange?: (genre: string) => void;\n  onDateRange?: (dateRange: { startDate?: string; endDate?: string } | null) => void;\n  onPriceRange?: (priceRange: [number, number]) => void;\n}\n\nexport default function SearchFilters({\n  onSearch,\n  onLocationChange,\n  onGenreChange,\n  onDateRange,\n  onPriceRange,\n}: SearchFiltersProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [priceRange, setPriceRange] = useState([0, 200]);\n  const [isFiltersOpen, setIsFiltersOpen] = useState(false);\n  const [dateRange, setDateRange] = useState<DateRange | undefined>();\n  const [isDatePickerOpen, setIsDatePickerOpen] = useState(false);\n  \n  // Get today's date for disabling past dates\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n\n  const handleSearch = () => {\n    onSearch?.(searchQuery);\n    console.log('Searching for:', searchQuery);\n  };\n\n  const handleLocationChange = (value: string) => {\n    onLocationChange?.(value);\n    console.log('Location changed to:', value);\n  };\n\n  const handleGenreChange = (value: string) => {\n    onGenreChange?.(value);\n    console.log('Genre changed to:', value);\n  };\n\n  const handleDateRangeChange = (range: DateRange | undefined) => {\n    setDateRange(range);\n    \n    if (range) {\n      const formatDate = (date: Date) => format(date, 'yyyy-MM-dd');\n      const startDate = range.from ? formatDate(range.from) : undefined;\n      const endDate = range.to ? formatDate(range.to) : undefined;\n      \n      onDateRange?.({ startDate, endDate });\n      console.log('Date range changed to:', { startDate, endDate });\n    } else {\n      onDateRange?.(null);\n      console.log('Date range cleared');\n    }\n  };\n\n  const clearDateRange = () => {\n    setDateRange(undefined);\n    onDateRange?.(null);\n    setIsDatePickerOpen(false);\n  };\n\n  const getDateRangeDisplayText = () => {\n    if (!dateRange?.from) return \"Select dates\";\n    if (!dateRange.to) return format(dateRange.from, 'MMM d, yyyy');\n    return `${format(dateRange.from, 'MMM d')} - ${format(dateRange.to, 'MMM d, yyyy')}`;\n  };\n\n  const handlePriceRangeChange = (value: number[]) => {\n    setPriceRange(value);\n    onPriceRange?.([value[0], value[1]]);\n    console.log('Price range changed to:', value);\n  };\n\n  return (\n    <div className=\"bg-card border rounded-lg p-4 space-y-4\">\n      {/* Main Search */}\n      <div className=\"flex gap-2\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n          <Input\n            placeholder=\"Search artists, venues, or events...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            onKeyDown={(e) => e.key === 'Enter' && handleSearch()}\n            className=\"pl-10\"\n            data-testid=\"input-search\"\n          />\n        </div>\n        <Button onClick={handleSearch} data-testid=\"button-search\">\n          Search\n        </Button>\n      </div>\n\n      {/* Quick Filters */}\n      <div className=\"flex flex-wrap gap-2\">\n        <Select onValueChange={handleLocationChange}>\n          <SelectTrigger className=\"w-[160px]\" data-testid=\"select-location\">\n            <MapPin className=\"h-4 w-4 mr-2\" />\n            <SelectValue placeholder=\"Location\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"los-angeles\">Los Angeles, CA</SelectItem>\n            <SelectItem value=\"new-york\">New York, NY</SelectItem>\n            <SelectItem value=\"chicago\">Chicago, IL</SelectItem>\n            <SelectItem value=\"austin\">Austin, TX</SelectItem>\n            <SelectItem value=\"seattle\">Seattle, WA</SelectItem>\n            <SelectItem value=\"denver\">Denver, CO</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Select onValueChange={handleGenreChange}>\n          <SelectTrigger className=\"w-[140px]\" data-testid=\"select-genre\">\n            <SelectValue placeholder=\"Genre\" />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"rock\">Rock</SelectItem>\n            <SelectItem value=\"pop\">Pop</SelectItem>\n            <SelectItem value=\"hip-hop\">Hip Hop</SelectItem>\n            <SelectItem value=\"electronic\">Electronic</SelectItem>\n            <SelectItem value=\"country\">Country</SelectItem>\n            <SelectItem value=\"indie\">Indie</SelectItem>\n            <SelectItem value=\"jazz\">Jazz</SelectItem>\n            <SelectItem value=\"classical\">Classical</SelectItem>\n          </SelectContent>\n        </Select>\n\n        <Popover open={isDatePickerOpen} onOpenChange={setIsDatePickerOpen}>\n          <PopoverTrigger asChild>\n            <Button\n              variant=\"outline\"\n              className={`w-[200px] justify-start text-left font-normal ${\n                !dateRange?.from && \"text-muted-foreground\"\n              }`}\n              data-testid=\"button-date-picker\"\n            >\n              <CalendarDays className=\"mr-2 h-4 w-4\" />\n              {getDateRangeDisplayText()}\n              {dateRange?.from && (\n                <X\n                  className=\"ml-auto h-4 w-4 hover:text-destructive\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    clearDateRange();\n                  }}\n                />\n              )}\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-auto p-0\" align=\"start\">\n            <CalendarComponent\n              initialFocus\n              mode=\"range\"\n              defaultMonth={dateRange?.from}\n              selected={dateRange}\n              onSelect={handleDateRangeChange}\n              numberOfMonths={2}\n              disabled={(date) => date < today}\n              data-testid=\"calendar-date-range\"\n            />\n            {dateRange?.from && (\n              <div className=\"p-3 border-t\">\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={clearDateRange}\n                  className=\"w-full\"\n                  data-testid=\"button-clear-dates\"\n                >\n                  Clear dates\n                </Button>\n              </div>\n            )}\n          </PopoverContent>\n        </Popover>\n\n        <Popover open={isFiltersOpen} onOpenChange={setIsFiltersOpen}>\n          <PopoverTrigger asChild>\n            <Button variant=\"outline\" data-testid=\"button-filters\">\n              <Filter className=\"h-4 w-4 mr-2\" />\n              Filters\n            </Button>\n          </PopoverTrigger>\n          <PopoverContent className=\"w-80\">\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-sm font-medium\">Price Range</Label>\n                <div className=\"mt-2\">\n                  <Slider\n                    value={priceRange}\n                    onValueChange={handlePriceRangeChange}\n                    max={200}\n                    min={0}\n                    step={5}\n                    className=\"w-full\"\n                    data-testid=\"slider-price\"\n                  />\n                  <div className=\"flex justify-between text-sm text-muted-foreground mt-1\">\n                    <span>${priceRange[0]}</span>\n                    <span>${priceRange[1]}</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\" \n                  className=\"flex-1\"\n                  onClick={() => {\n                    setPriceRange([0, 200]);\n                    console.log('Filters cleared');\n                  }}\n                  data-testid=\"button-clear-filters\"\n                >\n                  Clear\n                </Button>\n                <Button \n                  size=\"sm\" \n                  className=\"flex-1\"\n                  onClick={() => {\n                    setIsFiltersOpen(false);\n                    console.log('Filters applied');\n                  }}\n                  data-testid=\"button-apply-filters\"\n                >\n                  Apply\n                </Button>\n              </div>\n            </div>\n          </PopoverContent>\n        </Popover>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9031},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst initialState: ThemeProviderState = {\n  theme: \"system\",\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"vite-ui-theme\",\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n\n  return context;\n};\n","size_bytes":1605},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      <Sun className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\n      <Moon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":741},"client/src/components/user-profile-card.tsx":{"content":"import { Calendar, MapPin, Music, Users, PenTool, Star } from \"lucide-react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useState } from \"react\";\n\ninterface UserProfileCardProps {\n  user: {\n    id: string;\n    name: string;\n    username: string;\n    bio?: string;\n    avatar?: string;\n    location?: string;\n    joinedDate: string;\n    isVerified?: boolean;\n    isPrivate?: boolean;\n  };\n  stats: {\n    concertsAttended: number;\n    reviewsWritten: number;\n    followers: number;\n    following: number;\n    averageRating?: number;\n  };\n  favoriteGenres?: string[];\n  isFollowing?: boolean;\n  isCurrentUser?: boolean;\n  onEditProfile?: () => void;\n}\n\nexport default function UserProfileCard({\n  user,\n  stats,\n  favoriteGenres = [],\n  isFollowing = false,\n  isCurrentUser = false,\n  onEditProfile,\n}: UserProfileCardProps) {\n  const [followingState, setFollowingState] = useState(isFollowing);\n  const [followersCount, setFollowersCount] = useState(stats.followers);\n\n  const handleFollow = () => {\n    if (!isCurrentUser) {\n      setFollowingState(!followingState);\n      setFollowersCount(prev => followingState ? prev - 1 : prev + 1);\n      console.log(`${followingState ? 'Unfollowed' : 'Followed'} user: ${user.username}`);\n    }\n  };\n\n  const handleEditProfile = () => {\n    if (onEditProfile) {\n      onEditProfile();\n    } else {\n      console.log('No edit profile handler provided');\n    }\n  };\n\n  const handleMessage = () => {\n    console.log(`Opening message with: ${user.username}`);\n  };\n\n  return (\n    <Card className=\"w-full max-w-md\" data-testid={`card-user-profile-${user.id}`}>\n      <CardHeader className=\"text-center pb-2\">\n        <div className=\"flex flex-col items-center gap-4\">\n          <Avatar className=\"w-20 h-20\" data-testid={`avatar-user-${user.username}`}>\n            <AvatarImage src={user.avatar} alt={user.name} />\n            <AvatarFallback className=\"text-lg\">{user.name.charAt(0)}</AvatarFallback>\n          </Avatar>\n          \n          <div className=\"space-y-1\">\n            <div className=\"flex items-center gap-2 justify-center\">\n              <h3 className=\"font-bold text-lg\" data-testid={`text-name-${user.username}`}>\n                {user.name}\n              </h3>\n              {user.isVerified && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  ✓ Verified\n                </Badge>\n              )}\n              {user.isPrivate && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  Private\n                </Badge>\n              )}\n            </div>\n            <p className=\"text-muted-foreground text-sm\" data-testid={`text-username-${user.username}`}>\n              @{user.username}\n            </p>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Bio */}\n        {user.bio && (\n          <p className=\"text-sm text-center leading-relaxed\" data-testid={`text-bio-${user.username}`}>\n            {user.bio}\n          </p>\n        )}\n\n        {/* Location and Join Date */}\n        <div className=\"flex items-center justify-center gap-4 text-xs text-muted-foreground\">\n          {user.location && (\n            <div className=\"flex items-center gap-1\">\n              <MapPin className=\"h-3 w-3\" />\n              <span>{user.location}</span>\n            </div>\n          )}\n          <div className=\"flex items-center gap-1\">\n            <Calendar className=\"h-3 w-3\" />\n            <span>Joined {user.joinedDate}</span>\n          </div>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-2 gap-4 text-center\">\n          <div>\n            <div className=\"font-bold text-lg\" data-testid={`stat-concerts-${user.username}`}>\n              {stats.concertsAttended}\n            </div>\n            <div className=\"text-xs text-muted-foreground flex items-center justify-center gap-1\">\n              <Music className=\"h-3 w-3\" />\n              Concerts\n            </div>\n          </div>\n          <div>\n            <div className=\"font-bold text-lg\" data-testid={`stat-reviews-${user.username}`}>\n              {stats.reviewsWritten}\n            </div>\n            <div className=\"text-xs text-muted-foreground flex items-center justify-center gap-1\">\n              <PenTool className=\"h-3 w-3\" />\n              Reviews\n            </div>\n          </div>\n          <div>\n            <div className=\"font-bold text-lg\" data-testid={`stat-followers-${user.username}`}>\n              {followersCount}\n            </div>\n            <div className=\"text-xs text-muted-foreground flex items-center justify-center gap-1\">\n              <Users className=\"h-3 w-3\" />\n              Followers\n            </div>\n          </div>\n          <div>\n            <div className=\"font-bold text-lg\" data-testid={`stat-following-${user.username}`}>\n              {stats.following}\n            </div>\n            <div className=\"text-xs text-muted-foreground flex items-center justify-center gap-1\">\n              <Users className=\"h-3 w-3\" />\n              Following\n            </div>\n          </div>\n        </div>\n\n        {/* Average Rating */}\n        {stats.averageRating && (\n          <div className=\"flex items-center justify-center gap-2\">\n            <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n            <span className=\"font-medium\">{stats.averageRating.toFixed(1)}</span>\n            <span className=\"text-xs text-muted-foreground\">avg rating</span>\n          </div>\n        )}\n\n        {/* Favorite Genres */}\n        {favoriteGenres.length > 0 && (\n          <div className=\"space-y-2\">\n            <p className=\"text-xs font-medium text-muted-foreground text-center\">Favorite Genres</p>\n            <div className=\"flex flex-wrap gap-1 justify-center\">\n              {favoriteGenres.slice(0, 4).map((genre) => (\n                <Badge key={genre} variant=\"secondary\" className=\"text-xs\">\n                  {genre}\n                </Badge>\n              ))}\n              {favoriteGenres.length > 4 && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  +{favoriteGenres.length - 4}\n                </Badge>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2\">\n          {isCurrentUser ? (\n            <Button \n              variant=\"outline\" \n              className=\"flex-1\"\n              onClick={handleEditProfile}\n              data-testid=\"button-edit-profile\"\n            >\n              Edit Profile\n            </Button>\n          ) : (\n            <>\n              <Button\n                variant={followingState ? \"outline\" : \"default\"}\n                className=\"flex-1\"\n                onClick={handleFollow}\n                data-testid={`button-follow-${user.username}`}\n              >\n                {followingState ? \"Following\" : \"Follow\"}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={handleMessage}\n                data-testid={`button-message-${user.username}`}\n              >\n                <PenTool className=\"h-4 w-4\" />\n              </Button>\n            </>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7492},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/discover.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport SearchFilters from '@/components/search-filters';\nimport ConcertCard from '@/components/concert-card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Concert } from '@/../../shared/schema';\n\n// Concert data with aggregated ratings and review counts\ntype ConcertWithExtras = Concert & {\n  averageRating?: number;\n  performanceRating?: number;\n  soundRating?: number;\n  venueRating?: number;\n  valueRating?: number;\n  reviewCount: number;\n  isWishlisted?: boolean;\n};\n\n// Transform Concert data to ConcertCard props format\nconst transformConcertForCard = (concert: ConcertWithExtras) => ({\n  ...concert,\n  genre: concert.genre || undefined,\n  imageUrl: concert.imageUrl || undefined,\n  rating: concert.averageRating || undefined,\n  ticketUrl: concert.ticketUrl || undefined,\n});\n\nconst trendingGenres = ['Electronic', 'Indie Rock', 'Pop', 'Hip Hop', 'Jazz', 'Classical'];\n\nexport default function Discover() {\n  const [searchParams, setSearchParams] = useState<{\n    search?: string;\n    genre?: string;\n    city?: string;\n    startDate?: string;\n    endDate?: string;\n  }>({});\n  const [activeView, setActiveView] = useState<'grid' | 'list'>('grid');\n\n  // Build query key with search parameters\n  const buildQueryKey = () => {\n    const params = new URLSearchParams({ includeTicketmaster: 'true' });\n    if (searchParams.search) params.append('search', searchParams.search);\n    if (searchParams.genre) params.append('genre', searchParams.genre);\n    if (searchParams.city) params.append('city', searchParams.city);\n    if (searchParams.startDate) params.append('startDate', searchParams.startDate);\n    if (searchParams.endDate) params.append('endDate', searchParams.endDate);\n    return `/api/concerts?${params.toString()}`;\n  };\n\n  // Fetch concerts from API (including Ticketmaster events)\n  const { data: concerts = [], isLoading, error } = useQuery<ConcertWithExtras[]>({\n    queryKey: [buildQueryKey()],\n  });\n\n  // Search functionality - now triggers API call\n  const handleSearch = (query: string) => {\n    setSearchParams(prev => ({ ...prev, search: query || undefined }));\n    console.log('Searching for:', query);\n  };\n\n  const handleLocationChange = (location: string) => {\n    setSearchParams(prev => ({ ...prev, city: location || undefined }));\n    console.log('Filtering by location:', location);\n  };\n\n  const handleGenreFilter = (genre: string) => {\n    setSearchParams(prev => ({ ...prev, genre: genre || undefined }));\n    console.log('Filtering by genre:', genre);\n  };\n\n  const handleDateRangeChange = (dateRange: { startDate?: string; endDate?: string } | null) => {\n    if (dateRange) {\n      setSearchParams(prev => ({ \n        ...prev, \n        startDate: dateRange.startDate, \n        endDate: dateRange.endDate \n      }));\n      console.log('Filtering by date range:', dateRange);\n    } else {\n      setSearchParams(prev => {\n        const { startDate, endDate, ...rest } = prev;\n        return rest;\n      });\n      console.log('Date range filter cleared');\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n          Discover Concerts\n        </h1>\n        <p className=\"text-muted-foreground mt-1\">\n          Find your next live music experience\n        </p>\n      </div>\n\n      {/* Search and Filters */}\n      <SearchFilters\n        onSearch={handleSearch}\n        onLocationChange={handleLocationChange}\n        onGenreChange={handleGenreFilter}\n        onDateRange={handleDateRangeChange}\n        onPriceRange={(range) => console.log('Price range:', range)}\n      />\n\n      {/* Trending Genres */}\n      <div className=\"space-y-3\">\n        <h2 className=\"text-lg font-semibold\">Trending Genres</h2>\n        <div className=\"flex flex-wrap gap-2\">\n          {trendingGenres.map((genre) => (\n            <Badge \n              key={genre} \n              variant=\"secondary\" \n              className=\"cursor-pointer hover-elevate\"\n              onClick={() => handleGenreFilter(genre)}\n              data-testid={`badge-genre-${genre.toLowerCase().replace(' ', '-')}`}\n            >\n              {genre}\n            </Badge>\n          ))}\n        </div>\n      </div>\n\n      {/* View Toggle */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-sm text-muted-foreground\">\n            {concerts.length} concerts found\n          </span>\n        </div>\n        \n        <Tabs value={activeView} onValueChange={(value) => setActiveView(value as 'grid' | 'list')}>\n          <TabsList>\n            <TabsTrigger value=\"grid\" data-testid=\"tab-grid-view\">Grid</TabsTrigger>\n            <TabsTrigger value=\"list\" data-testid=\"tab-list-view\">List</TabsTrigger>\n          </TabsList>\n        </Tabs>\n      </div>\n\n      {/* Concert Results */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"animate-pulse bg-muted rounded-lg h-64\"></div>\n          ))}\n        </div>\n      ) : error ? (\n        <div className=\"text-center py-8\">\n          <p className=\"text-muted-foreground\">Failed to load concerts. Please try again.</p>\n        </div>\n      ) : (\n        <Tabs value={activeView} className=\"w-full\">\n          <TabsContent value=\"grid\" className=\"mt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {concerts.map((concert) => (\n                <ConcertCard key={concert.id} {...transformConcertForCard(concert)} />\n              ))}\n            </div>\n          </TabsContent>\n          \n          <TabsContent value=\"list\" className=\"mt-6\">\n            <div className=\"space-y-4\">\n              {concerts.map((concert) => (\n                <div key={concert.id} className=\"w-full max-w-2xl\">\n                  <ConcertCard {...transformConcertForCard(concert)} />\n                </div>\n              ))}\n            </div>\n          </TabsContent>\n        </Tabs>\n      )}\n\n      {/* Load More */}\n      {concerts.length > 0 && (\n        <div className=\"flex justify-center pt-8\">\n          <Button \n            variant=\"outline\" \n            onClick={() => console.log('Loading more concerts...')}\n            data-testid=\"button-load-more\"\n          >\n            Load More Concerts\n          </Button>\n        </div>\n      )}\n\n      {/* Empty State */}\n      {concerts.length === 0 && !isLoading && (\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-lg font-semibold mb-2\">No concerts found</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Try adjusting your search criteria or browse by genre\n          </p>\n          <Button \n            onClick={() => setSearchParams({})}\n            data-testid=\"button-clear-filters\"\n          >\n            Clear Filters\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":7222},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { useLocation } from 'wouter';\nimport UserProfileCard from '@/components/user-profile-card';\nimport ReviewCard from '@/components/review-card';\nimport ConcertCard from '@/components/concert-card';\nimport { EditProfileDialog } from '@/components/edit-profile-dialog';\nimport { WriteReviewDialog } from '@/components/write-review-dialog';\nimport { OnboardingDialog } from '@/components/onboarding-dialog';\nimport { checkIfUserNeedsOnboarding } from '@/hooks/useAuth';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Settings, Calendar, PenTool, Heart, Trophy, Award, Star, Music } from 'lucide-react';\nimport type { PublicUser, ReviewWithUser, ConcertWithRating, UserWithStats } from '@shared/schema';\n\n// Helper functions to transform API data  \nconst getDisplayName = (user: any) => {\n  if (user.firstName && user.lastName) {\n    return `${user.firstName} ${user.lastName}`;\n  }\n  if (user.firstName) return user.firstName;\n  if (user.lastName) return user.lastName;\n  return 'Anonymous';\n};\n\nconst getUsername = (user: any) => {\n  // Return custom username if set, otherwise return a safe fallback\n  if (user.username) return user.username;\n  \n  // Generate safe fallback from first name (no dots or invalid chars)\n  if (user.firstName) {\n    const sanitized = user.firstName.toLowerCase().replace(/[^a-z0-9_-]/g, '');\n    if (sanitized) return sanitized;\n  }\n  if (user.lastName) {\n    const sanitized = user.lastName.toLowerCase().replace(/[^a-z0-9_-]/g, '');\n    if (sanitized) return sanitized;\n  }\n  return 'user';\n};\n\nconst transformReviewForCard = (review: ReviewWithUser) => ({\n  id: review.id,\n  userId: review.userId, // Add userId for ownership check\n  user: {\n    name: getDisplayName(review.user),\n    username: getUsername(review.user),\n    avatar: review.user.profileImageUrl || undefined\n  },\n  concert: {\n    artist: review.concert.artist,\n    venue: review.concert.venue,\n    date: new Date(review.concert.date).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }),\n    city: review.concert.city\n  },\n  rating: {\n    overall: review.overallRating,\n    performance: review.performanceRating,\n    sound: review.soundRating,\n    venue: review.venueRating,\n    value: review.valueRating\n  },\n  reviewText: review.reviewText,\n  photos: review.photos || [],\n  likes: review.likes || 0,\n  comments: 0,\n  isLiked: review.isLiked || false,\n  postedAt: review.createdAt ? new Date(review.createdAt).toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric'\n  }) : 'Unknown'\n});\n\nconst transformConcertForCard = (concert: ConcertWithRating) => ({\n  id: concert.id,\n  artist: concert.artist,\n  venue: concert.venue,\n  date: new Date(concert.date).toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric'\n  }),\n  time: concert.time,\n  city: concert.city,\n  price: concert.price,\n  genre: concert.genre || undefined,\n  imageUrl: concert.imageUrl || undefined,\n  rating: concert.averageRating,\n  isWishlisted: true // Items from wishlist API are wishlisted by definition\n});\n\n// Mock data removed - now using real API data\n\nexport default function Profile() {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [isEditProfileOpen, setIsEditProfileOpen] = useState(false);\n  const [isWriteReviewOpen, setIsWriteReviewOpen] = useState(false);\n  const [isOnboardingOpen, setIsOnboardingOpen] = useState(false);\n  const [editingReviewId, setEditingReviewId] = useState<string | null>(null);\n  const [, navigate] = useLocation();\n  \n  // Get current user\n  const { data: currentUserBasic, isLoading: userBasicLoading } = useQuery<PublicUser>({\n    queryKey: ['/api/user'],\n  });\n\n  // Get current user with stats\n  const { data: currentUser, isLoading: userStatsLoading } = useQuery<UserWithStats>({\n    queryKey: ['/api/users', currentUserBasic?.id, 'stats'],\n    queryFn: async () => {\n      if (!currentUserBasic?.id) throw new Error('No user ID');\n      const response = await fetch(`/api/users/${currentUserBasic.id}`);\n      if (!response.ok) throw new Error('Failed to fetch user stats');\n      return response.json();\n    },\n    enabled: !!currentUserBasic?.id,\n  });\n  \n  const userLoading = userBasicLoading || userStatsLoading;\n\n  // Get user's recent reviews (limited for overview section)\n  const { data: recentReviews = [], isLoading: recentReviewsLoading, error: recentReviewsError } = useQuery<ReviewWithUser[]>({\n    queryKey: ['/api/users', currentUser?.id, 'reviews', 'recent'],\n    queryFn: async () => {\n      if (!currentUser?.id) return [];\n      const response = await fetch(`/api/users/${currentUser.id}/reviews?limit=3`);\n      if (!response.ok) throw new Error('Failed to fetch recent reviews');\n      return response.json();\n    },\n    enabled: !!currentUser?.id,\n  });\n\n  // Get all user's reviews (for reviews tab and accurate stats)\n  const { data: allReviews = [], isLoading: allReviewsLoading, error: allReviewsError } = useQuery<ReviewWithUser[]>({\n    queryKey: ['/api/users', currentUser?.id, 'reviews', 'all'],\n    queryFn: async () => {\n      if (!currentUser?.id) return [];\n      const response = await fetch(`/api/users/${currentUser.id}/reviews`);\n      if (!response.ok) throw new Error('Failed to fetch all reviews');\n      return response.json();\n    },\n    enabled: !!currentUser?.id,\n  });\n\n  // Get user's wishlist\n  const { data: wishlistConcerts = [], isLoading: wishlistLoading, error: wishlistError } = useQuery<ConcertWithRating[]>({\n    queryKey: ['/api/users/me/wishlist'],\n    queryFn: async () => {\n      const response = await fetch('/api/users/me/wishlist');\n      if (!response.ok) throw new Error('Failed to fetch wishlist');\n      return response.json();\n    },\n    enabled: !!currentUser?.id,\n  });\n\n  const isLoading = userLoading || recentReviewsLoading || allReviewsLoading || wishlistLoading;\n  \n  // Check if user needs onboarding when basic user data loads\n  useEffect(() => {\n    if (currentUserBasic && checkIfUserNeedsOnboarding(currentUserBasic as any)) {\n      setIsOnboardingOpen(true);\n    }\n  }, [currentUserBasic]);\n  \n  const handleEditProfile = () => {\n    setIsEditProfileOpen(true);\n  };\n\n  const handleViewAllReviews = () => {\n    setActiveTab('reviews');\n  };\n\n  const handleViewAllConcerts = () => {\n    setActiveTab('concerts');\n  };\n\n  const handleNavigateToDiscover = () => {\n    navigate('/');\n  };\n\n  const handleWriteFirstReview = () => {\n    setIsWriteReviewOpen(true);\n  };\n\n  const handleEditReview = (reviewId: string) => {\n    setEditingReviewId(reviewId);\n    setIsWriteReviewOpen(true);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n            My Profile\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Manage your music profile and review history\n          </p>\n        </div>\n        <Button \n          variant=\"outline\" \n          onClick={handleEditProfile}\n          data-testid=\"button-settings\"\n        >\n          <Settings className=\"h-4 w-4 mr-2\" />\n          Settings\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Profile Card */}\n        <div className=\"lg:col-span-1\">\n          {isLoading ? (\n            <Card>\n              <CardContent className=\"p-6 space-y-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <Skeleton className=\"h-20 w-20 rounded-full\" />\n                  <div className=\"space-y-2\">\n                    <Skeleton className=\"h-6 w-32\" />\n                    <Skeleton className=\"h-4 w-24\" />\n                    <Skeleton className=\"h-3 w-48\" />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ) : currentUser ? (\n            <UserProfileCard\n              user={{\n                id: currentUser.id,\n                name: getDisplayName(currentUser),\n                username: getUsername(currentUser),\n                bio: currentUser.bio || undefined,\n                avatar: currentUser.profileImageUrl || undefined,\n                location: currentUser.location || undefined,\n                joinedDate: currentUser.createdAt ? new Date(currentUser.createdAt).toLocaleDateString('en-US', {\n                  month: 'short',\n                  year: 'numeric'\n                }) : 'Unknown',\n                isVerified: currentUser.isVerified || false,\n                isPrivate: currentUser.isPrivate || false\n              }}\n              stats={{\n                concertsAttended: currentUser.stats?.concertsAttended || 0,\n                reviewsWritten: currentUser.stats?.reviewsWritten || 0,\n                followers: currentUser.stats?.followers || 0,\n                following: currentUser.stats?.following || 0,\n                averageRating: currentUser.stats?.averageRating\n              }}\n              favoriteGenres={allReviews.length > 0 \n                ? Array.from(new Set(allReviews.map(review => review.concert.genre).filter((genre): genre is string => Boolean(genre)))).slice(0, 5)\n                : []\n              }\n              isCurrentUser={true}\n              onEditProfile={handleEditProfile}\n            />\n          ) : (\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <p className=\"text-muted-foreground\">Failed to load profile</p>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Content Tabs */}\n        <div className=\"lg:col-span-2\">\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">\n                Overview\n              </TabsTrigger>\n              <TabsTrigger value=\"reviews\" data-testid=\"tab-reviews\">\n                <PenTool className=\"h-4 w-4 mr-1\" />\n                Reviews\n              </TabsTrigger>\n              <TabsTrigger value=\"concerts\" data-testid=\"tab-concerts\">\n                <Calendar className=\"h-4 w-4 mr-1\" />\n                History\n              </TabsTrigger>\n              <TabsTrigger value=\"wishlist\" data-testid=\"tab-wishlist\">\n                <Heart className=\"h-4 w-4 mr-1\" />\n                Wishlist\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"overview\" className=\"space-y-6 mt-6\">\n              {/* Achievements Section */}\n              {currentUser && (\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                    <Trophy className=\"h-5 w-5 text-yellow-500\" />\n                    Achievements\n                  </h3>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                    {/* Concert Achievements */}\n                    <Card className={`${(currentUser.stats?.concertsAttended || 0) >= 1 ? 'bg-gradient-to-br from-yellow-50 to-yellow-100 dark:from-yellow-900/20 dark:to-yellow-800/20 border-yellow-200' : 'opacity-50'}`}>\n                      <CardContent className=\"p-4 text-center\">\n                        <Music className={`h-8 w-8 mx-auto mb-2 ${(currentUser.stats?.concertsAttended || 0) >= 1 ? 'text-yellow-600' : 'text-muted-foreground'}`} />\n                        <h4 className=\"font-medium text-sm\">First Concert</h4>\n                        <p className=\"text-xs text-muted-foreground\">Attend your first concert</p>\n                      </CardContent>\n                    </Card>\n\n                    <Card className={`${(currentUser.stats?.concertsAttended || 0) >= 5 ? 'bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 border-blue-200' : 'opacity-50'}`}>\n                      <CardContent className=\"p-4 text-center\">\n                        <Star className={`h-8 w-8 mx-auto mb-2 ${(currentUser.stats?.concertsAttended || 0) >= 5 ? 'text-blue-600' : 'text-muted-foreground'}`} />\n                        <h4 className=\"font-medium text-sm\">Concert Explorer</h4>\n                        <p className=\"text-xs text-muted-foreground\">Attend 5 concerts</p>\n                      </CardContent>\n                    </Card>\n\n                    <Card className={`${(currentUser.stats?.reviewsWritten || 0) >= 1 ? 'bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 border-green-200' : 'opacity-50'}`}>\n                      <CardContent className=\"p-4 text-center\">\n                        <PenTool className={`h-8 w-8 mx-auto mb-2 ${(currentUser.stats?.reviewsWritten || 0) >= 1 ? 'text-green-600' : 'text-muted-foreground'}`} />\n                        <h4 className=\"font-medium text-sm\">First Review</h4>\n                        <p className=\"text-xs text-muted-foreground\">Write your first review</p>\n                      </CardContent>\n                    </Card>\n\n                    <Card className={`${(currentUser.stats?.reviewsWritten || 0) >= 10 ? 'bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 border-purple-200' : 'opacity-50'}`}>\n                      <CardContent className=\"p-4 text-center\">\n                        <Award className={`h-8 w-8 mx-auto mb-2 ${(currentUser.stats?.reviewsWritten || 0) >= 10 ? 'text-purple-600' : 'text-muted-foreground'}`} />\n                        <h4 className=\"font-medium text-sm\">Review Expert</h4>\n                        <p className=\"text-xs text-muted-foreground\">Write 10 reviews</p>\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              )}\n\n              {/* Recent Reviews */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold\">Recent Reviews</h3>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={handleViewAllReviews}\n                    data-testid=\"button-view-all-reviews\"\n                  >\n                    View All\n                  </Button>\n                </div>\n                {recentReviewsLoading ? (\n                  <div className=\"space-y-4\">\n                    {[...Array(2)].map((_, i) => (\n                      <Card key={i}>\n                        <CardContent className=\"p-4 space-y-3\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Skeleton className=\"h-8 w-8 rounded-full\" />\n                            <div className=\"space-y-2\">\n                              <Skeleton className=\"h-3 w-24\" />\n                              <Skeleton className=\"h-2 w-16\" />\n                            </div>\n                          </div>\n                          <Skeleton className=\"h-12 w-full\" />\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : recentReviewsError ? (\n                  <div className=\"text-center py-8 bg-destructive/10 rounded-lg border border-destructive/20\">\n                    <PenTool className=\"h-12 w-12 mx-auto text-destructive mb-2\" />\n                    <p className=\"text-destructive mb-2\">Failed to load recent reviews</p>\n                    <Button variant=\"outline\" size=\"sm\" onClick={() => window.location.reload()}>\n                      Retry\n                    </Button>\n                  </div>\n                ) : recentReviews.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {recentReviews.slice(0, 2).map((review) => (\n                      <ReviewCard \n                        key={review.id} \n                        {...transformReviewForCard(review)} \n                        onEdit={() => handleEditReview(review.id)}\n                      />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 bg-muted/20 rounded-lg\">\n                    <PenTool className=\"h-12 w-12 mx-auto text-muted-foreground mb-2\" />\n                    <p className=\"text-muted-foreground\">No reviews yet</p>\n                  </div>\n                )}\n              </div>\n\n              {/* Recent Concerts */}\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-semibold\">Recent Concerts</h3>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={handleViewAllConcerts}\n                    data-testid=\"button-view-all-concerts\"\n                  >\n                    View All\n                  </Button>\n                </div>\n                {recentReviewsLoading ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {[...Array(2)].map((_, i) => (\n                      <Card key={i}>\n                        <CardContent className=\"p-4 space-y-3\">\n                          <Skeleton className=\"h-32 w-full\" />\n                          <Skeleton className=\"h-4 w-3/4\" />\n                          <Skeleton className=\"h-3 w-1/2\" />\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : recentReviews.length > 0 ? (\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    {recentReviews.slice(0, 2).map((review) => (\n                      <ConcertCard key={review.concert.id} {...transformConcertForCard(review.concert)} />\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 bg-muted/20 rounded-lg\">\n                    <Music className=\"h-12 w-12 mx-auto text-muted-foreground mb-2\" />\n                    <p className=\"text-muted-foreground\">No concerts reviewed yet</p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"reviews\" className=\"space-y-4 mt-6\">\n              {allReviewsLoading ? (\n                <div className=\"space-y-6\">\n                  {[...Array(3)].map((_, i) => (\n                    <Card key={i}>\n                      <CardContent className=\"p-6 space-y-3\">\n                        <div className=\"flex items-center space-x-3\">\n                          <Skeleton className=\"h-10 w-10 rounded-full\" />\n                          <div className=\"space-y-2\">\n                            <Skeleton className=\"h-4 w-32\" />\n                            <Skeleton className=\"h-3 w-24\" />\n                          </div>\n                        </div>\n                        <Skeleton className=\"h-20 w-full\" />\n                        <div className=\"flex space-x-2\">\n                          <Skeleton className=\"h-4 w-16\" />\n                          <Skeleton className=\"h-4 w-16\" />\n                          <Skeleton className=\"h-4 w-16\" />\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              ) : allReviewsError ? (\n                <div className=\"text-center py-12\">\n                  <PenTool className=\"h-16 w-16 mx-auto text-destructive mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2 text-destructive\">Failed to load reviews</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    There was an error loading your reviews. Please try again.\n                  </p>\n                  <Button variant=\"outline\" onClick={() => window.location.reload()}>\n                    Retry\n                  </Button>\n                </div>\n              ) : allReviews.length > 0 ? (\n                <div className=\"space-y-6\">\n                  {allReviews.map((review) => (\n                    <ReviewCard \n                      key={review.id} \n                      {...transformReviewForCard(review)}\n                      onEdit={() => handleEditReview(review.id)}\n                    />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <PenTool className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No reviews yet</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Start sharing your concert experiences\n                  </p>\n                  <Button \n                    onClick={handleWriteFirstReview}\n                    data-testid=\"button-write-first-review\"\n                  >\n                    Write Your First Review\n                  </Button>\n                </div>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"concerts\" className=\"space-y-4 mt-6\">\n              <div className=\"text-center py-12\">\n                <Calendar className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">Concert history</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Your concert attendance history will appear here\n                </p>\n                <Button \n                  onClick={handleNavigateToDiscover}\n                  data-testid=\"button-discover-concerts-history\"\n                >\n                  Discover Concerts\n                </Button>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"wishlist\" className=\"space-y-4 mt-6\">\n              {wishlistError ? (\n                <div className=\"text-center py-12\">\n                  <Heart className=\"h-16 w-16 mx-auto text-destructive mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2 text-destructive\">Failed to load wishlist</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    There was an error loading your saved concerts. Please try again.\n                  </p>\n                  <Button variant=\"outline\" onClick={() => window.location.reload()}>\n                    Retry\n                  </Button>\n                </div>\n              ) : wishlistConcerts.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {wishlistConcerts.map((concert) => (\n                    <ConcertCard key={concert.id} {...transformConcertForCard(concert)} />\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-12\">\n                  <Heart className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No concerts saved</h3>\n                  <p className=\"text-muted-foreground mb-4\">\n                    Save concerts you're interested in to your wishlist\n                  </p>\n                  <Button \n                    onClick={handleNavigateToDiscover}\n                    data-testid=\"button-discover-concerts-wishlist\"\n                  >\n                    Discover Concerts\n                  </Button>\n                </div>\n              )}\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Edit Profile Dialog */}\n      {currentUser && (\n        <EditProfileDialog \n          open={isEditProfileOpen}\n          onOpenChange={setIsEditProfileOpen}\n          user={{\n            id: currentUser.id,\n            name: getDisplayName(currentUser),\n            username: currentUser.username || undefined,\n            bio: currentUser.bio || undefined,\n            avatar: currentUser.profileImageUrl || undefined,\n            location: currentUser.location || undefined\n          }}\n        />\n      )}\n\n      {/* Write Review Dialog */}\n      <WriteReviewDialog \n        open={isWriteReviewOpen}\n        onOpenChange={(open) => {\n          setIsWriteReviewOpen(open);\n          if (!open) setEditingReviewId(null);\n        }}\n        editingReviewId={editingReviewId}\n      />\n\n      {/* Onboarding Dialog */}\n      {currentUserBasic && (\n        <OnboardingDialog \n          open={isOnboardingOpen}\n          onOpenChange={setIsOnboardingOpen}\n          user={{\n            id: currentUserBasic.id,\n            email: (currentUserBasic as any).email || undefined,\n            firstName: currentUserBasic.firstName || undefined,\n            lastName: currentUserBasic.lastName || undefined,\n          }}\n        />\n      )}\n\n    </div>\n  );\n}\n","size_bytes":25038},"client/src/pages/reviews.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport ReviewCard from '@/components/review-card';\nimport { WriteReviewDialog } from '@/components/write-review-dialog';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { PenTool, Plus } from 'lucide-react';\nimport type { ReviewWithUser, PublicUser } from '@shared/schema';\n\n// Helper function to transform API review data for the ReviewCard component\nconst transformReviewForCard = (review: ReviewWithUser, currentUser: PublicUser | undefined) => ({\n  id: review.id,\n  userId: review.userId, // Add userId for ownership check\n  user: {\n    name: `${review.user.firstName || ''} ${review.user.lastName || ''}`.trim() || 'Anonymous',\n    username: review.user.username || 'anonymous',\n    avatar: review.user.profileImageUrl || undefined\n  },\n  concert: {\n    artist: review.concert.artist,\n    venue: review.concert.venue,\n    date: new Date(review.concert.date).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }),\n    city: review.concert.city\n  },\n  rating: {\n    overall: review.overallRating,\n    performance: review.performanceRating,\n    sound: review.soundRating,\n    venue: review.venueRating,\n    value: review.valueRating\n  },\n  reviewText: review.reviewText,\n  photos: review.photos || [],\n  likes: review.likes || 0,\n  comments: 0, // TODO: Add comments count when implemented\n  isLiked: review.isLiked || false,\n  postedAt: review.createdAt ? new Date(review.createdAt).toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric'\n  }) : 'Unknown'\n});\n\n// All mock data removed - now using real API data\n\nexport default function Reviews() {\n  const [activeTab, setActiveTab] = useState('my-reviews');\n  const [writeReviewOpen, setWriteReviewOpen] = useState(false);\n  const [editingReviewId, setEditingReviewId] = useState<string | null>(null);\n  \n  // Get current user\n  const { data: currentUser, isLoading: userLoading } = useQuery<PublicUser>({\n    queryKey: ['/api/user'],\n  });\n\n  // Get user's reviews\n  const { data: reviews = [], isLoading: reviewsLoading, error } = useQuery<ReviewWithUser[]>({\n    queryKey: ['/api/users', currentUser?.id, 'reviews'],\n    queryFn: async () => {\n      if (!currentUser?.id) return [];\n      const response = await fetch(`/api/users/${currentUser.id}/reviews`);\n      if (!response.ok) throw new Error('Failed to fetch reviews');\n      return response.json();\n    },\n    enabled: !!currentUser?.id,\n  });\n  \n  const handleWriteReview = () => {\n    setWriteReviewOpen(true);\n  };\n\n  const handleEditReview = (reviewId: string) => {\n    setEditingReviewId(reviewId);\n    setWriteReviewOpen(true);\n  };\n\n  const isLoading = userLoading || reviewsLoading;\n  \n  const stats = {\n    totalReviews: reviews.length,\n    averageRating: reviews.length > 0 \n      ? Number((reviews.reduce((sum, review) => sum + review.overallRating, 0) / reviews.length).toFixed(1))\n      : 0,\n    totalLikes: reviews.reduce((sum, review) => sum + (review.likes || 0), 0),\n    totalComments: 0 // TODO: Add comments count when implemented\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n            My Reviews\n          </h1>\n          <p className=\"text-muted-foreground mt-1\">\n            Share your concert experiences with the community\n          </p>\n        </div>\n        <Button onClick={handleWriteReview} data-testid=\"button-write-review\">\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Write Review\n        </Button>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n        <div className=\"bg-card border rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-primary\">\n            {isLoading ? '...' : stats.totalReviews}\n          </div>\n          <div className=\"text-sm text-muted-foreground\">Total Reviews</div>\n        </div>\n        <div className=\"bg-card border rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-primary\">\n            {isLoading ? '...' : stats.averageRating}\n          </div>\n          <div className=\"text-sm text-muted-foreground\">Avg Rating</div>\n        </div>\n        <div className=\"bg-card border rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-primary\">\n            {isLoading ? '...' : stats.totalLikes}\n          </div>\n          <div className=\"text-sm text-muted-foreground\">Total Likes</div>\n        </div>\n        <div className=\"bg-card border rounded-lg p-4 text-center\">\n          <div className=\"text-2xl font-bold text-primary\">\n            {isLoading ? '...' : stats.totalComments}\n          </div>\n          <div className=\"text-sm text-muted-foreground\">Comments</div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"my-reviews\" data-testid=\"tab-my-reviews\">\n            <PenTool className=\"h-4 w-4 mr-2\" />\n            My Reviews ({isLoading ? '...' : reviews.length})\n          </TabsTrigger>\n          <TabsTrigger value=\"drafts\" data-testid=\"tab-drafts\">\n            Drafts (0)\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"my-reviews\" className=\"space-y-6 mt-6\">\n          {isLoading ? (\n            <div className=\"space-y-6\">\n              {[...Array(3)].map((_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-6 space-y-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <Skeleton className=\"h-10 w-10 rounded-full\" />\n                      <div className=\"space-y-2\">\n                        <Skeleton className=\"h-4 w-32\" />\n                        <Skeleton className=\"h-3 w-24\" />\n                      </div>\n                    </div>\n                    <Skeleton className=\"h-20 w-full\" />\n                    <div className=\"flex space-x-2\">\n                      <Skeleton className=\"h-4 w-16\" />\n                      <Skeleton className=\"h-4 w-16\" />\n                      <Skeleton className=\"h-4 w-16\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : error ? (\n            <div className=\"text-center py-12\">\n              <PenTool className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Failed to load reviews</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                There was an error loading your reviews. Please try again.\n              </p>\n              <Button variant=\"outline\" onClick={() => window.location.reload()}>\n                Retry\n              </Button>\n            </div>\n          ) : reviews.length > 0 ? (\n            <div className=\"space-y-6\">\n              {reviews.map((review) => (\n                <ReviewCard \n                  key={review.id} \n                  {...transformReviewForCard(review, currentUser)}\n                  onEdit={() => handleEditReview(review.id)}\n                />\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-12\">\n              <PenTool className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No reviews yet</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Start sharing your concert experiences with the community\n              </p>\n              <Button onClick={handleWriteReview}>\n                Write Your First Review\n              </Button>\n            </div>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"drafts\" className=\"mt-6\">\n          <div className=\"text-center py-12\">\n            <PenTool className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No drafts</h3>\n            <p className=\"text-muted-foreground\">\n              Your review drafts will appear here\n            </p>\n          </div>\n        </TabsContent>\n      </Tabs>\n\n      {/* Write Review Dialog */}\n      <WriteReviewDialog\n        open={writeReviewOpen}\n        onOpenChange={(open) => {\n          setWriteReviewOpen(open);\n          if (!open) setEditingReviewId(null);\n        }}\n        editingReviewId={editingReviewId}\n      />\n    </div>\n  );\n}\n","size_bytes":8765},"client/src/components/examples/app-sidebar.tsx":{"content":"import { AppSidebar } from '../app-sidebar';\nimport { SidebarProvider } from '@/components/ui/sidebar';\n\nexport default function AppSidebarExample() {\n  const style = {\n    \"--sidebar-width\": \"16rem\",\n    \"--sidebar-width-icon\": \"3rem\",\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <AppSidebar />\n        <div className=\"flex-1 bg-background p-4\">\n          <h1 className=\"text-2xl font-bold\">Sidebar Example</h1>\n          <p className=\"text-muted-foreground mt-2\">This is how the sidebar looks in the application.</p>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":662},"client/src/components/examples/concert-card.tsx":{"content":"import ConcertCard from '../concert-card';\n\nexport default function ConcertCardExample() {\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 p-4\">\n      <ConcertCard\n        id=\"1\"\n        artist=\"The Midnight\"\n        venue=\"The Wiltern\"\n        date=\"Dec 15, 2024\"\n        time=\"8:00 PM\"\n        city=\"Los Angeles, CA\"\n        price=\"$45.00\"\n        genre=\"Synthwave\"\n        rating={4.8}\n        isWishlisted={false}\n      />\n      <ConcertCard\n        id=\"2\"\n        artist=\"Tame Impala\"\n        venue=\"Red Rocks Amphitheatre\"\n        date=\"Dec 20, 2024\"\n        time=\"7:30 PM\"\n        city=\"Morrison, CO\"\n        price=\"$89.50\"\n        genre=\"Psychedelic Rock\"\n        rating={4.9}\n        isWishlisted={true}\n      />\n      <ConcertCard\n        id=\"3\"\n        artist=\"Billie Eilish\"\n        venue=\"Madison Square Garden\"\n        date=\"Jan 5, 2025\"\n        time=\"8:00 PM\"\n        city=\"New York, NY\"\n        price=\"$125.00\"\n        genre=\"Pop\"\n        rating={4.7}\n      />\n    </div>\n  );\n}\n","size_bytes":1031},"client/src/components/examples/review-card.tsx":{"content":"import ReviewCard from '../review-card';\n\nexport default function ReviewCardExample() {\n  return (\n    <div className=\"space-y-4 p-4 max-w-2xl\">\n      <ReviewCard\n        id=\"1\"\n        user={{\n          name: \"Sarah Johnson\",\n          username: \"sarahj_music\",\n          avatar: undefined\n        }}\n        concert={{\n          artist: \"The Midnight\",\n          venue: \"The Wiltern\",\n          date: \"Dec 15, 2024\",\n          city: \"Los Angeles, CA\"\n        }}\n        rating={{\n          overall: 5,\n          performance: 5,\n          sound: 4,\n          atmosphere: 5,\n          value: 4\n        }}\n        reviewText=\"Absolutely incredible show! The Midnight delivered an unforgettable performance with their signature synthwave sound. The crowd was electric and the production value was top-notch. Would definitely see them again!\"\n        photos={[]}\n        likes={42}\n        comments={8}\n        isLiked={false}\n        postedAt=\"2 hours ago\"\n      />\n      \n      <ReviewCard\n        id=\"2\"\n        user={{\n          name: \"Mike Chen\",\n          username: \"mikethebeat\",\n          avatar: undefined\n        }}\n        concert={{\n          artist: \"Tame Impala\",\n          venue: \"Red Rocks Amphitheatre\",\n          date: \"Dec 20, 2024\",\n          city: \"Morrison, CO\"\n        }}\n        rating={{\n          overall: 4,\n          performance: 5,\n          sound: 3,\n          atmosphere: 5,\n          value: 4\n        }}\n        reviewText=\"Red Rocks + Tame Impala = perfection. The natural acoustics of this venue combined with Kevin Parker's psychedelic masterpieces created pure magic. Only downside was some sound issues during the first few songs, but they sorted it out quickly.\"\n        photos={[]}\n        likes={156}\n        comments={23}\n        isLiked={true}\n        postedAt=\"1 day ago\"\n      />\n    </div>\n  );\n}\n","size_bytes":1839},"client/src/components/examples/search-filters.tsx":{"content":"import SearchFilters from '../search-filters';\n\nexport default function SearchFiltersExample() {\n  return (\n    <div className=\"p-4\">\n      <SearchFilters\n        onSearch={(query) => console.log('Search:', query)}\n        onLocationChange={(location) => console.log('Location:', location)}\n        onGenreChange={(genre) => console.log('Genre:', genre)}\n        onDateRange={(dateRange) => console.log('Date Range:', dateRange)}\n        onPriceRange={(priceRange) => console.log('Price Range:', priceRange)}\n      />\n    </div>\n  );\n}\n","size_bytes":536},"client/src/components/examples/user-profile-card.tsx":{"content":"import UserProfileCard from '../user-profile-card';\n\nexport default function UserProfileCardExample() {\n  return (\n    <div className=\"flex flex-wrap gap-4 p-4\">\n      {/* Current User */}\n      <UserProfileCard\n        user={{\n          id: \"1\",\n          name: \"Sarah Johnson\",\n          username: \"sarahj_music\",\n          bio: \"Live music enthusiast from LA. Always searching for the next great show! 🎵\",\n          avatar: undefined,\n          location: \"Los Angeles, CA\",\n          joinedDate: \"Oct 2023\",\n          isVerified: true,\n          isPrivate: false\n        }}\n        stats={{\n          concertsAttended: 127,\n          reviewsWritten: 89,\n          followers: 1543,\n          following: 892,\n          averageRating: 4.3\n        }}\n        favoriteGenres={[\"Indie Rock\", \"Electronic\", \"Synthwave\", \"Jazz\", \"Folk\"]}\n        isFollowing={false}\n        isCurrentUser={true}\n      />\n      \n      {/* Other User */}\n      <UserProfileCard\n        user={{\n          id: \"2\",\n          name: \"Mike Chen\",\n          username: \"mikethebeat\",\n          bio: \"Red Rocks is my second home. EDM and rock are life!\",\n          avatar: undefined,\n          location: \"Denver, CO\",\n          joinedDate: \"Jan 2024\",\n          isVerified: false,\n          isPrivate: false\n        }}\n        stats={{\n          concertsAttended: 78,\n          reviewsWritten: 52,\n          followers: 892,\n          following: 234,\n          averageRating: 4.1\n        }}\n        favoriteGenres={[\"EDM\", \"Rock\", \"Dubstep\"]}\n        isFollowing={false}\n        isCurrentUser={false}\n      />\n      \n      {/* Private User */}\n      <UserProfileCard\n        user={{\n          id: \"3\",\n          name: \"Emma Wilson\",\n          username: \"emmaw_private\",\n          bio: \"Music lover seeking authentic experiences.\",\n          avatar: undefined,\n          location: \"Seattle, WA\",\n          joinedDate: \"Mar 2024\",\n          isVerified: false,\n          isPrivate: true\n        }}\n        stats={{\n          concertsAttended: 45,\n          reviewsWritten: 23,\n          followers: 156,\n          following: 98\n        }}\n        favoriteGenres={[\"Indie\", \"Alternative\"]}\n        isFollowing={true}\n        isCurrentUser={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2239},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <div className=\"w-4 h-4 bg-primary rounded flex items-center justify-center\">\n        <span className=\"text-primary-foreground font-bold text-xs\">CC</span>\n      </div>\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21997},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/ticketmasterService.ts":{"content":"/**\n * Ticketmaster Discovery API service for fetching real-time concert data\n */\n\ninterface TicketmasterEvent {\n  id: string;\n  name: string;\n  type: string;\n  url: string;\n  locale: string;\n  images: Array<{\n    ratio: string;\n    url: string;\n    width: number;\n    height: number;\n    fallback: boolean;\n  }>;\n  sales: {\n    public: {\n      startDateTime: string;\n      startTBD: boolean;\n      startTBA: boolean;\n      endDateTime: string;\n    };\n  };\n  dates: {\n    start: {\n      localDate: string;\n      localTime: string;\n      dateTime: string;\n      dateTBD: boolean;\n      dateTBA: boolean;\n      timeTBA: boolean;\n      noSpecificTime: boolean;\n    };\n    timezone: string;\n    status: {\n      code: string;\n    };\n  };\n  classifications: Array<{\n    primary: boolean;\n    segment: {\n      id: string;\n      name: string;\n    };\n    genre: {\n      id: string;\n      name: string;\n    };\n    subGenre: {\n      id: string;\n      name: string;\n    };\n  }>;\n  _embedded?: {\n    venues?: Array<{\n      id: string;\n      name: string;\n      type: string;\n      locale: string;\n      postalCode: string;\n      timezone: string;\n      city: {\n        name: string;\n      };\n      state: {\n        name: string;\n        stateCode: string;\n      };\n      country: {\n        name: string;\n        countryCode: string;\n      };\n      address: {\n        line1: string;\n      };\n      location: {\n        longitude: string;\n        latitude: string;\n      };\n    }>;\n    attractions?: Array<{\n      id: string;\n      name: string;\n      type: string;\n      locale: string;\n      images: Array<{\n        ratio: string;\n        url: string;\n        width: number;\n        height: number;\n        fallback: boolean;\n      }>;\n      classifications: Array<{\n        primary: boolean;\n        segment: {\n          id: string;\n          name: string;\n        };\n        genre: {\n          id: string;\n          name: string;\n        };\n        subGenre: {\n          id: string;\n          name: string;\n        };\n      }>;\n    }>;\n  };\n  priceRanges?: Array<{\n    type: string;\n    currency: string;\n    min: number;\n    max: number;\n  }>;\n}\n\ninterface TicketmasterResponse {\n  _embedded?: {\n    events?: TicketmasterEvent[];\n  };\n  page: {\n    size: number;\n    totalElements: number;\n    totalPages: number;\n    number: number;\n  };\n}\n\nexport interface TicketmasterSearchOptions {\n  keyword?: string;\n  city?: string;\n  stateCode?: string;\n  countryCode?: string;\n  classificationName?: string; // genre\n  size?: number;\n  page?: number;\n  sort?: string;\n  startDateTime?: string;\n  endDateTime?: string;\n  radius?: number;\n  unit?: 'miles' | 'km';\n}\n\nexport class TicketmasterService {\n  private readonly baseUrl = 'https://app.ticketmaster.com/discovery/v2';\n  private readonly consumerKey: string;\n\n  constructor() {\n    this.consumerKey = process.env.TICKETMASTER_CONSUMER_KEY || '';\n  }\n\n  /**\n   * Search for music events using Ticketmaster Discovery API\n   */\n  async searchEvents(options: TicketmasterSearchOptions = {}): Promise<TicketmasterEvent[]> {\n    try {\n      // Check if API key is available\n      if (!this.consumerKey) {\n        console.warn('Ticketmaster API key not configured - returning empty results');\n        return [];\n      }\n\n      const params = new URLSearchParams({\n        apikey: this.consumerKey,\n        classificationName: 'music', // Only music events\n        size: String(options.size || 50),\n        page: String(options.page || 0),\n        sort: options.sort || 'date,asc',\n      });\n\n      // Add optional parameters\n      if (options.keyword) params.append('keyword', options.keyword);\n      if (options.city) params.append('city', options.city);\n      if (options.stateCode) params.append('stateCode', options.stateCode);\n      if (options.countryCode) params.append('countryCode', options.countryCode);\n      if (options.classificationName) params.append('classificationName', options.classificationName);\n      if (options.startDateTime) params.append('startDateTime', options.startDateTime);\n      if (options.endDateTime) params.append('endDateTime', options.endDateTime);\n      if (options.radius) params.append('radius', String(options.radius));\n      if (options.unit) params.append('unit', options.unit);\n\n      const url = `${this.baseUrl}/events.json?${params.toString()}`;\n      console.log('Fetching from Ticketmaster:', url.replace(this.consumerKey, '[API_KEY]'));\n\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        throw new Error(`Ticketmaster API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: TicketmasterResponse = await response.json();\n      return data._embedded?.events || [];\n    } catch (error) {\n      console.error('Error fetching from Ticketmaster API:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get event details by ID\n   */\n  async getEvent(eventId: string): Promise<TicketmasterEvent | null> {\n    try {\n      const params = new URLSearchParams({\n        apikey: this.consumerKey,\n      });\n\n      const url = `${this.baseUrl}/events/${eventId}.json?${params.toString()}`;\n      const response = await fetch(url);\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          return null;\n        }\n        throw new Error(`Ticketmaster API error: ${response.status} ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching event from Ticketmaster API:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Transform Ticketmaster event to our Concert format\n   */\n  transformEvent(event: TicketmasterEvent): any {\n    const venue = event._embedded?.venues?.[0];\n    const attraction = event._embedded?.attractions?.[0];\n    const priceRange = event.priceRanges?.[0];\n    const classification = event.classifications?.[0] || attraction?.classifications?.[0];\n    \n    // Get the best image (prefer 16:9 ratio, fallback to largest)\n    const getBestImage = (images: Array<any> | undefined) => {\n      if (!images || images.length === 0) return null;\n      \n      // Try to find 16:9 ratio image\n      const ratio16x9 = images.find(img => img.ratio === '16_9');\n      if (ratio16x9) return ratio16x9.url;\n      \n      // Fall back to largest image\n      const sortedBySize = images.sort((a, b) => (b.width * b.height) - (a.width * a.height));\n      return sortedBySize[0]?.url || null;\n    };\n\n    const imageUrl = getBestImage(event.images) || getBestImage(attraction?.images);\n\n    return {\n      // Use Ticketmaster ID with a prefix to avoid conflicts\n      id: `tm_${event.id}`,\n      artist: attraction?.name || event.name,\n      venue: venue?.name || 'TBA',\n      city: venue ? `${venue.city.name}, ${venue.state?.stateCode || venue.country.countryCode}` : 'TBA',\n      date: event.dates.start.localDate,\n      time: event.dates.start.localTime || 'TBA',\n      price: priceRange ? `$${priceRange.min}-$${priceRange.max}` : 'TBA',\n      genre: classification?.genre?.name || classification?.subGenre?.name || 'Music',\n      imageUrl,\n      ticketUrl: event.url,\n      description: `${attraction?.name || event.name} at ${venue?.name || 'TBA'}${venue?.city ? ` in ${venue.city.name}` : ''}`,\n      // Additional metadata\n      ticketmasterId: event.id,\n      venueId: venue?.id,\n      attractionId: attraction?.id,\n      eventStatus: event.dates.status.code,\n      timezone: event.dates.timezone,\n    };\n  }\n}\n\nexport const ticketmasterService = new TicketmasterService();","size_bytes":7504},"client/src/pages/timeline.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport ReviewCard from '@/components/review-card';\nimport { Users, TrendingUp, Search, Filter, Clock } from 'lucide-react';\n\ninterface ReviewWithUser {\n  id: string;\n  userId: string;\n  concertId: string;\n  overallRating: number;\n  performanceRating: number;\n  soundRating: number;\n  venueRating: number;\n  valueRating: number;\n  reviewText: string | null;\n  photos: string[] | null;\n  createdAt: string;\n  likesCount: number;\n  commentsCount: number;\n  isLiked: boolean;\n  user: {\n    id: string;\n    username: string;\n    displayName: string | null;\n    profileImage: string | null;\n  };\n  concert: {\n    id: string;\n    artist: string;\n    venue: string;\n    date: string;\n    city: string;\n    genre: string | null;\n    imageUrl: string | null;\n  };\n}\n\n// Transform function to match ReviewCard props\nconst transformReviewForCard = (review: ReviewWithUser) => ({\n  id: review.id,\n  userId: review.userId, // Add userId for ownership check\n  user: {\n    name: review.user.displayName || review.user.username,\n    username: review.user.username,\n    avatar: review.user.profileImage || undefined\n  },\n  concert: {\n    artist: review.concert.artist,\n    venue: review.concert.venue,\n    date: review.concert.date ? new Date(review.concert.date).toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric'\n    }) : 'Unknown',\n    city: review.concert.city\n  },\n  rating: {\n    overall: review.overallRating,\n    performance: review.performanceRating,\n    sound: review.soundRating,\n    venue: review.venueRating,\n    value: review.valueRating\n  },\n  reviewText: review.reviewText || '',\n  photos: review.photos || [],\n  likes: review.likesCount,\n  comments: review.commentsCount,\n  isLiked: review.isLiked,\n  postedAt: review.createdAt ? new Date(review.createdAt).toLocaleDateString('en-US', {\n    month: 'short',\n    day: 'numeric'\n  }) : 'Unknown'\n});\n\nexport default function Timeline() {\n  const [activeTab, setActiveTab] = useState('following');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Get timeline reviews (for now, get all recent reviews as we don't have following system yet)\n  const { data: timelineReviews = [], isLoading: timelineLoading, error: timelineError } = useQuery<ReviewWithUser[]>({\n    queryKey: ['/api/reviews', 'timeline'],\n    queryFn: async () => {\n      const response = await fetch('/api/reviews?limit=20&sort=recent');\n      if (!response.ok) throw new Error('Failed to fetch timeline');\n      return response.json();\n    },\n  });\n\n  // Get trending/popular reviews\n  const { data: trendingReviews = [], isLoading: trendingLoading, error: trendingError } = useQuery<ReviewWithUser[]>({\n    queryKey: ['/api/reviews', 'trending'],\n    queryFn: async () => {\n      const response = await fetch('/api/reviews?limit=20&sort=rating');\n      if (!response.ok) throw new Error('Failed to fetch trending reviews');\n      return response.json();\n    },\n  });\n\n  const filteredTimelineReviews = timelineReviews.filter(review =>\n    review.concert.artist.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    review.concert.venue.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    review.user.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (review.user.displayName && review.user.displayName.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const filteredTrendingReviews = trendingReviews.filter(review =>\n    review.concert.artist.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    review.concert.venue.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    review.user.username.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (review.user.displayName && review.user.displayName.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const renderSkeletons = () => (\n    <div className=\"space-y-6\">\n      {[...Array(3)].map((_, i) => (\n        <Card key={i}>\n          <CardContent className=\"p-6 space-y-3\">\n            <div className=\"flex items-center space-x-3\">\n              <Skeleton className=\"h-10 w-10 rounded-full\" />\n              <div className=\"space-y-2\">\n                <Skeleton className=\"h-4 w-32\" />\n                <Skeleton className=\"h-3 w-24\" />\n              </div>\n            </div>\n            <Skeleton className=\"h-20 w-full\" />\n            <div className=\"flex space-x-2\">\n              <Skeleton className=\"h-4 w-16\" />\n              <Skeleton className=\"h-4 w-16\" />\n              <Skeleton className=\"h-4 w-16\" />\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n\n  const renderError = (error: Error) => (\n    <div className=\"text-center py-12\">\n      <Clock className=\"h-16 w-16 mx-auto text-destructive mb-4\" />\n      <h3 className=\"text-lg font-semibold mb-2 text-destructive\">Failed to load reviews</h3>\n      <p className=\"text-muted-foreground mb-4\">\n        There was an error loading the timeline. Please try again.\n      </p>\n      <Button variant=\"outline\" onClick={() => window.location.reload()} data-testid=\"button-retry-timeline\">\n        Retry\n      </Button>\n    </div>\n  );\n\n  const renderEmptyState = (title: string, description: string) => (\n    <div className=\"text-center py-12\">\n      <Users className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n      <h3 className=\"text-lg font-semibold mb-2\">{title}</h3>\n      <p className=\"text-muted-foreground mb-4\">{description}</p>\n      <Button data-testid=\"button-discover-users\">\n        <Users className=\"h-4 w-4 mr-2\" />\n        Discover Users\n      </Button>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center gap-2\">\n          <Users className=\"h-6 w-6 text-primary\" />\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-timeline\">Social Timeline</h1>\n        </div>\n        <p className=\"text-muted-foreground\">\n          Discover what other music lovers are saying about concerts\n        </p>\n      </div>\n\n      {/* Search */}\n      <div className=\"flex gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Search reviews, artists, or users...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-timeline\"\n          />\n        </div>\n        <Button variant=\"outline\" data-testid=\"button-filter-timeline\">\n          <Filter className=\"h-4 w-4 mr-2\" />\n          Filter\n        </Button>\n      </div>\n\n      {/* Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-2\">\n          <TabsTrigger value=\"following\" data-testid=\"tab-following\">\n            <Users className=\"h-4 w-4 mr-2\" />\n            Following\n          </TabsTrigger>\n          <TabsTrigger value=\"trending\" data-testid=\"tab-trending\">\n            <TrendingUp className=\"h-4 w-4 mr-2\" />\n            Trending\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"following\" className=\"space-y-4 mt-6\">\n          {timelineLoading ? (\n            renderSkeletons()\n          ) : timelineError ? (\n            renderError(timelineError)\n          ) : filteredTimelineReviews.length > 0 ? (\n            <div className=\"space-y-6\">\n              {filteredTimelineReviews.map((review) => (\n                <ReviewCard key={review.id} {...transformReviewForCard(review)} />\n              ))}\n            </div>\n          ) : searchQuery ? (\n            <div className=\"text-center py-12\">\n              <Search className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No reviews found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Try adjusting your search to find reviews\n              </p>\n              <Button variant=\"outline\" onClick={() => setSearchQuery('')} data-testid=\"button-clear-search\">\n                Clear Search\n              </Button>\n            </div>\n          ) : (\n            renderEmptyState(\n              \"No reviews from following\",\n              \"Follow other users to see their concert reviews in your timeline\"\n            )\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"trending\" className=\"space-y-4 mt-6\">\n          {trendingLoading ? (\n            renderSkeletons()\n          ) : trendingError ? (\n            renderError(trendingError)\n          ) : filteredTrendingReviews.length > 0 ? (\n            <div className=\"space-y-6\">\n              {filteredTrendingReviews.map((review) => (\n                <ReviewCard key={review.id} {...transformReviewForCard(review)} />\n              ))}\n            </div>\n          ) : searchQuery ? (\n            <div className=\"text-center py-12\">\n              <Search className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No reviews found</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                Try adjusting your search to find reviews\n              </p>\n              <Button variant=\"outline\" onClick={() => setSearchQuery('')} data-testid=\"button-clear-search\">\n                Clear Search\n              </Button>\n            </div>\n          ) : (\n            renderEmptyState(\n              \"No trending reviews\",\n              \"Be the first to share a concert review and start the conversation\"\n            )\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":10134},"client/src/pages/wishlist.tsx":{"content":"import { useState } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport ConcertCard from '@/components/concert-card';\nimport { Heart, Search, Filter, Calendar, MapPin } from 'lucide-react';\n\ninterface ConcertWithRating {\n  id: string;\n  artist: string;\n  venue: string;\n  date: string;\n  city: string;\n  genre?: string;\n  price?: number;\n  imageUrl?: string;\n  averageRating?: number;\n}\n\n// Transform function to match ConcertCard props\nconst transformConcertForCard = (concert: ConcertWithRating) => ({\n  id: concert.id,\n  artist: concert.artist,\n  venue: concert.venue,\n  date: concert.date,\n  time: \"8:00 PM\", // Default time since API doesn't provide\n  city: concert.city,\n  price: concert.price ? `$${concert.price}` : \"Price TBA\",\n  genre: concert.genre || undefined,\n  imageUrl: concert.imageUrl || undefined,\n  rating: concert.averageRating,\n  isWishlisted: true // Items from wishlist API are wishlisted by definition\n});\n\nexport default function Wishlist() {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Get user's wishlist\n  const { data: wishlistConcerts = [], isLoading, error } = useQuery<ConcertWithRating[]>({\n    queryKey: ['/api/users/me/wishlist'],\n    queryFn: async () => {\n      const response = await fetch('/api/users/me/wishlist');\n      if (!response.ok) throw new Error('Failed to fetch wishlist');\n      return response.json();\n    },\n  });\n\n  // Filter concerts based on search query\n  const filteredConcerts = wishlistConcerts.filter(concert =>\n    concert.artist.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    concert.venue.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    concert.city.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    (concert.genre && concert.genre.toLowerCase().includes(searchQuery.toLowerCase()))\n  );\n\n  const handleRemoveFromWishlist = (concertId: string) => {\n    console.log('Remove from wishlist:', concertId);\n    // TODO: Implement remove from wishlist API call\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <Skeleton className=\"h-8 w-48\" />\n          <Skeleton className=\"h-4 w-96\" />\n        </div>\n        \n        <div className=\"flex gap-4\">\n          <Skeleton className=\"h-10 flex-1\" />\n          <Skeleton className=\"h-10 w-24\" />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <Card key={i}>\n              <CardContent className=\"p-4 space-y-3\">\n                <Skeleton className=\"h-32 w-full\" />\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-1/2\" />\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center gap-2\">\n          <Heart className=\"h-6 w-6 text-primary\" />\n          <h1 className=\"text-3xl font-bold\" data-testid=\"heading-wishlist\">My Wishlist</h1>\n        </div>\n        <p className=\"text-muted-foreground\">\n          {wishlistConcerts.length} saved concert{wishlistConcerts.length !== 1 ? 's' : ''}\n        </p>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"flex gap-4\">\n        <div className=\"relative flex-1\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n          <Input\n            placeholder=\"Search your saved concerts...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n            data-testid=\"input-search-wishlist\"\n          />\n        </div>\n        <Button variant=\"outline\" data-testid=\"button-filter-wishlist\">\n          <Filter className=\"h-4 w-4 mr-2\" />\n          Filter\n        </Button>\n      </div>\n\n      {/* Content */}\n      {error ? (\n        <div className=\"text-center py-12\">\n          <Heart className=\"h-16 w-16 mx-auto text-destructive mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2 text-destructive\">Failed to load wishlist</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            There was an error loading your saved concerts. Please try again.\n          </p>\n          <Button variant=\"outline\" onClick={() => window.location.reload()} data-testid=\"button-retry-wishlist\">\n            Retry\n          </Button>\n        </div>\n      ) : filteredConcerts.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredConcerts.map((concert) => (\n            <ConcertCard key={concert.id} {...transformConcertForCard(concert)} />\n          ))}\n        </div>\n      ) : wishlistConcerts.length > 0 ? (\n        <div className=\"text-center py-12\">\n          <Search className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No concerts found</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Try adjusting your search to find saved concerts\n          </p>\n          <Button variant=\"outline\" onClick={() => setSearchQuery('')} data-testid=\"button-clear-search\">\n            Clear Search\n          </Button>\n        </div>\n      ) : (\n        <div className=\"text-center py-12\">\n          <Heart className=\"h-16 w-16 mx-auto text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No concerts saved</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Save concerts you're interested in to build your wishlist\n          </p>\n          <Button data-testid=\"button-discover-concerts\">\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            Discover Concerts\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6147},"replit.md":{"content":"# ConcertCritic\n\n## Overview\n\nConcertCritic is a social platform for live music enthusiasts to discover concerts, write reviews, and connect with fellow music lovers. The application combines concert discovery through the Ticketmaster API with a social review system, allowing users to find events, share experiences, and build a community around live music.\n\nThe platform features real-time concert search, multi-criteria rating systems for venues and performances, user profiles with music preferences, social following mechanics, and wishlist functionality. Users can write detailed reviews with photos, follow other reviewers, and discover concerts through both API integration and community recommendations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack React Query for server state management and caching\n- **Styling**: Tailwind CSS with custom design system inspired by music platforms (Spotify, Bandcamp)\n- **Component Library**: Radix UI primitives with shadcn/ui components for consistent, accessible interface\n- **Build Tool**: Vite with custom configuration for development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for REST API endpoints\n- **Database ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Session Management**: Express sessions with PostgreSQL storage for user authentication\n- **File Structure**: Modular architecture separating routes, storage layer, and external service integrations\n- **Error Handling**: Centralized error middleware with structured logging\n\n### Authentication System\n- **Provider**: Replit Authentication (mandatory for platform integration)\n- **Session Storage**: PostgreSQL-backed sessions with configurable TTL\n- **Security**: HTTP-only cookies with secure flags and CSRF protection\n- **User Management**: OAuth-based user creation and profile management\n\n### Database Design\n- **Primary Database**: PostgreSQL with connection pooling via Neon serverless\n- **Schema Management**: Drizzle migrations with version control\n- **Core Tables**: Users, concerts, reviews, wishlists, user follows, review likes, sessions\n- **Indexing**: Strategic indexes on search fields (artist, venue, city) and foreign keys\n- **Data Types**: JSON fields for flexible metadata storage (photos, genre arrays)\n\n### External Service Integration\n- **Concert Data**: Ticketmaster Discovery API for real-time event information\n- **API Caching**: Memoized responses with TTL to optimize external API usage\n- **Data Transformation**: Service layer converts external API responses to internal schema\n- **Fallback Strategy**: Graceful degradation when external services are unavailable\n\n### Design System\n- **Color Palette**: Dark and light mode support with music-focused purple primary colors\n- **Typography**: Inter and Poppins font families for readability and visual hierarchy\n- **Component Variants**: Consistent spacing system using Tailwind utility classes\n- **Responsive Design**: Mobile-first approach with breakpoint-specific layouts\n- **Accessibility**: ARIA compliance through Radix UI primitives\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, TypeScript for frontend development\n- **Routing & State**: Wouter for routing, TanStack React Query for server state\n- **Backend Framework**: Express.js with middleware for CORS, sessions, and body parsing\n\n### Database & ORM\n- **Database**: PostgreSQL via Neon serverless platform\n- **ORM**: Drizzle ORM with Drizzle Kit for migrations\n- **Connection**: `@neondatabase/serverless` driver with WebSocket support\n- **Session Storage**: `connect-pg-simple` for PostgreSQL session management\n\n### UI & Styling\n- **Component Library**: Complete Radix UI primitive set (Dialog, Dropdown, etc.)\n- **Styling**: Tailwind CSS with PostCSS processing\n- **Design Tokens**: Custom CSS variables for theme consistency\n- **Icons**: Lucide React for consistent iconography\n\n### External APIs\n- **Concert Data**: Ticketmaster Discovery API for event information\n- **Authentication**: Replit OAuth system for user management\n- **Image Hosting**: Prepared for Cloudinary integration (future enhancement)\n\n### Development & Build Tools\n- **Build System**: Vite with React plugin and runtime error handling\n- **TypeScript**: Full type coverage with path aliases for clean imports\n- **Code Quality**: ESBuild for production bundling\n- **Development**: Hot module replacement and development server integration\n\n### Validation & Forms\n- **Schema Validation**: Zod schemas with Drizzle integration\n- **Form Handling**: React Hook Form with Hookform resolvers\n- **Error Handling**: Structured error responses with validation feedback","size_bytes":4974},"client/src/components/mobile-bottom-nav.tsx":{"content":"import { Compass, Users, User, UserSearch, Plus } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\n\nconst leftNavigationItems = [\n  {\n    title: \"Timeline\", \n    url: \"/timeline\",\n    icon: Users,\n  },\n  {\n    title: \"Find Friends\",\n    url: \"/search-users\",\n    icon: UserSearch,\n  },\n];\n\nconst rightNavigationItems = [\n  {\n    title: \"Discover\",\n    url: \"/discover\",\n    icon: Compass,\n  },\n  {\n    title: \"Profile\",\n    url: \"/profile\", \n    icon: User,\n  },\n];\n\ninterface MobileBottomNavProps {\n  onCreateReview?: () => void;\n}\n\nexport function MobileBottomNav({ onCreateReview }: MobileBottomNavProps) {\n  const [location, navigate] = useLocation();\n\n  const handleNavigation = (url: string) => {\n    navigate(url);\n  };\n\n  const handleCreateReview = () => {\n    if (onCreateReview) {\n      onCreateReview();\n    } else {\n      // Default navigation to reviews page for creating\n      navigate(\"/reviews\");\n    }\n  };\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 z-50 bg-background border-t md:hidden\">\n      <div className=\"flex items-center justify-between px-4 py-2 safe-area-inset-bottom\">\n        {/* Left tabs */}\n        <div className=\"flex flex-1 justify-around\">\n          {leftNavigationItems.map((item) => {\n            const isActive = location === item.url;\n            \n            return (\n              <button\n                key={item.title}\n                onClick={() => handleNavigation(item.url)}\n                className={cn(\n                  \"flex flex-col items-center justify-center py-2 px-1 transition-colors\",\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                )}\n                data-testid={`tab-${item.title.toLowerCase().replace(' ', '-')}`}\n              >\n                <item.icon className={cn(\"h-5 w-5 mb-1\", isActive && \"text-primary\")} />\n                <span className=\"text-xs font-medium\">{item.title}</span>\n              </button>\n            );\n          })}\n        </div>\n\n        {/* Center create review button */}\n        <div className=\"flex-shrink-0 mx-4\">\n          <button\n            onClick={handleCreateReview}\n            className=\"flex items-center justify-center w-12 h-12 bg-primary text-primary-foreground rounded-full shadow-lg hover:shadow-xl transition-all hover-elevate active-elevate-2\"\n            data-testid=\"button-create-review\"\n          >\n            <Plus className=\"h-6 w-6\" />\n          </button>\n        </div>\n\n        {/* Right tabs */}\n        <div className=\"flex flex-1 justify-around\">\n          {rightNavigationItems.map((item) => {\n            const isActive = location === item.url;\n            \n            return (\n              <button\n                key={item.title}\n                onClick={() => handleNavigation(item.url)}\n                className={cn(\n                  \"flex flex-col items-center justify-center py-2 px-1 transition-colors\",\n                  isActive ? \"text-primary\" : \"text-muted-foreground\"\n                )}\n                data-testid={`tab-${item.title.toLowerCase().replace(' ', '-')}`}\n              >\n                <item.icon className={cn(\"h-5 w-5 mb-1\", isActive && \"text-primary\")} />\n                <span className=\"text-xs font-medium\">{item.title}</span>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":3397},"client/src/pages/settings.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Bell, Moon, Globe, Shield, HelpCircle, LogOut, Trash2 } from \"lucide-react\";\n\nexport default function Settings() {\n  const [notifications, setNotifications] = useState(true);\n  const [darkMode, setDarkMode] = useState(false);\n  const [publicProfile, setPublicProfile] = useState(true);\n  \n  const { logoutMutation } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Delete account mutation\n  const deleteAccountMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", \"/api/users/me\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account deleted\",\n        description: \"Your account has been permanently deleted\",\n      });\n      setLocation(\"/auth\");\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Delete failed\",\n        description: error.message || \"Failed to delete account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogout = () => {\n    logoutMutation.mutate(undefined, {\n      onSuccess: () => {\n        setLocation(\"/auth\");\n      },\n    });\n  };\n\n  const handleDeleteAccount = () => {\n    deleteAccountMutation.mutate();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <div>\n        <h1 className=\"text-3xl font-bold tracking-tight\">Settings</h1>\n        <p className=\"text-muted-foreground\">\n          Manage your account settings and preferences.\n        </p>\n      </div>\n\n      <div className=\"grid gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Bell className=\"h-5 w-5\" />\n              Notifications\n            </CardTitle>\n            <CardDescription>\n              Configure how you receive notifications about concerts and reviews.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"push-notifications\">Push notifications</Label>\n              <Switch\n                id=\"push-notifications\"\n                checked={notifications}\n                onCheckedChange={setNotifications}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"email-notifications\">Email notifications</Label>\n              <Switch id=\"email-notifications\" />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"concert-alerts\">Concert alerts</Label>\n              <Switch id=\"concert-alerts\" defaultChecked />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Moon className=\"h-5 w-5\" />\n              Appearance\n            </CardTitle>\n            <CardDescription>\n              Customize how the app looks and feels.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"dark-mode\">Dark mode</Label>\n              <Switch\n                id=\"dark-mode\"\n                checked={darkMode}\n                onCheckedChange={setDarkMode}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Shield className=\"h-5 w-5\" />\n              Privacy\n            </CardTitle>\n            <CardDescription>\n              Control your privacy and data sharing preferences.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"public-profile\">Public profile</Label>\n              <Switch\n                id=\"public-profile\"\n                checked={publicProfile}\n                onCheckedChange={setPublicProfile}\n              />\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <Label htmlFor=\"concert-history\">Show concert history</Label>\n              <Switch id=\"concert-history\" defaultChecked />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Globe className=\"h-5 w-5\" />\n              General\n            </CardTitle>\n            <CardDescription>\n              General account and app settings.\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <Button variant=\"outline\" className=\"w-full justify-start\">\n              <HelpCircle className=\"mr-2 h-4 w-4\" />\n              Help & Support\n            </Button>\n            <Separator />\n            <Button \n              variant=\"destructive\" \n              className=\"w-full justify-start\"\n              onClick={handleLogout}\n              disabled={logoutMutation.isPending}\n              data-testid=\"button-sign-out\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              {logoutMutation.isPending ? \"Signing Out...\" : \"Sign Out\"}\n            </Button>\n            <AlertDialog>\n              <AlertDialogTrigger asChild>\n                <Button \n                  variant=\"destructive\" \n                  className=\"w-full justify-start\"\n                  disabled={deleteAccountMutation.isPending}\n                  data-testid=\"button-delete-account\"\n                >\n                  <Trash2 className=\"mr-2 h-4 w-4\" />\n                  {deleteAccountMutation.isPending ? \"Deleting...\" : \"Delete Account\"}\n                </Button>\n              </AlertDialogTrigger>\n              <AlertDialogContent data-testid=\"dialog-delete-account\">\n                <AlertDialogHeader>\n                  <AlertDialogTitle>Delete Account</AlertDialogTitle>\n                  <AlertDialogDescription>\n                    Are you sure you want to permanently delete your account? This action cannot be undone and will remove:\n                    <br />\n                    <br />\n                    • All your reviews and ratings\n                    <br />\n                    • Your wishlist and preferences\n                    <br />\n                    • Your followers and following connections\n                    <br />\n                    • All profile information and data\n                  </AlertDialogDescription>\n                </AlertDialogHeader>\n                <AlertDialogFooter>\n                  <AlertDialogCancel data-testid=\"button-cancel-delete\">\n                    Cancel\n                  </AlertDialogCancel>\n                  <AlertDialogAction\n                    onClick={handleDeleteAccount}\n                    className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                    data-testid=\"button-confirm-delete\"\n                  >\n                    Delete Account\n                  </AlertDialogAction>\n                </AlertDialogFooter>\n              </AlertDialogContent>\n            </AlertDialog>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8112},"client/src/pages/search-users.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Search, Users, UserPlus, Star } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nimport type { PublicUser } from \"@shared/schema\";\n\nexport default function SearchUsers() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: searchResults, isLoading, error } = useQuery<PublicUser[]>({\n    queryKey: [\"/api/users/search\", { q: searchQuery }],\n    enabled: searchQuery.length >= 2,\n  });\n\n  const followUserMutation = async (userId: string) => {\n    try {\n      await apiRequest(\"POST\", `/api/users/${userId}/follow`);\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/search\"] });\n      toast({\n        title: \"Success\",\n        description: \"User followed successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to follow user\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const unfollowUserMutation = async (userId: string) => {\n    try {\n      await apiRequest(\"DELETE\", `/api/users/${userId}/follow`);\n      queryClient.invalidateQueries({ queryKey: [\"/api/users/search\"] });\n      toast({\n        title: \"Success\", \n        description: \"User unfollowed successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to unfollow user\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <div className=\"space-y-2\">\n        <h1 className=\"text-2xl font-bold flex items-center gap-2\">\n          <Users className=\"h-6 w-6\" />\n          Find Friends\n        </h1>\n        <p className=\"text-muted-foreground\">\n          Discover other music lovers and concert enthusiasts\n        </p>\n      </div>\n\n      <div className=\"relative\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Search for users by name or email...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-10\"\n          data-testid=\"input-search-users\"\n        />\n      </div>\n\n      {searchQuery.length > 0 && searchQuery.length < 2 && (\n        <div className=\"text-center text-muted-foreground py-8\">\n          Type at least 2 characters to search for users\n        </div>\n      )}\n\n      {isLoading && (\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-2 text-muted-foreground\">Searching users...</p>\n        </div>\n      )}\n\n      {error && (\n        <div className=\"text-center text-muted-foreground py-8\">\n          Failed to search users. Please try again.\n        </div>\n      )}\n\n      {searchResults && Array.isArray(searchResults) && searchResults.length === 0 && searchQuery.length >= 2 && !isLoading && (\n        <div className=\"text-center text-muted-foreground py-8\">\n          <Users className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n          <p>No users found matching \"{searchQuery}\"</p>\n        </div>\n      )}\n\n      <div className=\"space-y-3\">\n        {Array.isArray(searchResults) && searchResults.map((user: PublicUser) => (\n          <Card key={user.id} className=\"hover-elevate\" data-testid={`card-user-${user.id}`}>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-3\">\n                  <Avatar className=\"h-12 w-12\">\n                    <AvatarImage src={user.profileImageUrl || undefined} />\n                    <AvatarFallback>\n                      {user.name?.charAt(0).toUpperCase() || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  \n                  <div className=\"space-y-1\">\n                    <h3 className=\"font-semibold\" data-testid={`text-username-${user.id}`}>\n                      {user.name}\n                    </h3>\n                    <p className=\"text-sm text-muted-foreground\">@{user.username || user.name}</p>\n                    \n                    <div className=\"flex items-center gap-2 text-sm\">\n                      {user.bio && (\n                        <p className=\"text-sm text-muted-foreground\">{user.bio}</p>\n                      )}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex flex-col items-end gap-2\">\n                  {false ? (\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => unfollowUserMutation(user.id)}\n                      data-testid={`button-unfollow-${user.id}`}\n                    >\n                      Following\n                    </Button>\n                  ) : (\n                    <Button\n                      variant=\"default\"\n                      size=\"sm\"\n                      onClick={() => followUserMutation(user.id)}\n                      className=\"flex items-center gap-2\"\n                      data-testid={`button-follow-${user.id}`}\n                    >\n                      <UserPlus className=\"h-4 w-4\" />\n                      Follow\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":5882},"server/auth.ts":{"content":"// Blueprint for username/password authentication using passport-local\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport bcrypt from \"bcrypt\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser, insertUserSchema } from \"@shared/schema\";\nimport { fromZodError } from \"zod-validation-error\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\n// Configurable bcrypt cost (default 12 provides strong security)\nconst BCRYPT_COST = parseInt(process.env.BCRYPT_COST || '12');\n\nasync function hashPassword(password: string): Promise<string> {\n  return await bcrypt.hash(password, BCRYPT_COST);\n}\n\nasync function comparePasswords(supplied: string, stored: string, username?: string): Promise<{ isValid: boolean; needsMigration: boolean }> {\n  try {\n    // Check if stored password is a bcrypt hash (starts with \"$2\")\n    if (stored.startsWith('$2')) {\n      // It's already a bcrypt hash, use normal comparison\n      const isValid = await bcrypt.compare(supplied, stored);\n      return { isValid, needsMigration: false };\n    }\n    \n    // Legacy password handling\n    console.log(`Legacy password detected for user: ${username || 'unknown'}`);\n    \n    // First check if it's plaintext (direct comparison)\n    if (supplied === stored) {\n      console.log(`Legacy plaintext password verified for user: ${username || 'unknown'}`);\n      return { isValid: true, needsMigration: true };\n    }\n    \n    // Could add other legacy hash formats here if needed\n    // For now, if it doesn't match as plaintext and isn't bcrypt, it's invalid\n    return { isValid: false, needsMigration: false };\n    \n  } catch (error) {\n    // Log security event but don't expose details\n    console.error(`Password comparison error for user: ${username || 'unknown'}`, error);\n    return { isValid: false, needsMigration: false };\n  }\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 1 week\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user) {\n          return done(null, false);\n        }\n        \n        const { isValid, needsMigration } = await comparePasswords(password, user.password, username);\n        if (!isValid) {\n          return done(null, false);\n        }\n        \n        // Handle password migration for legacy passwords\n        if (needsMigration) {\n          console.log(`Migrating legacy password to bcrypt for user: ${username}`);\n          try {\n            const hashedPassword = await hashPassword(password);\n            await storage.updateUser(user.id, { password: hashedPassword });\n            console.log(`Successfully migrated password for user: ${username}`);\n          } catch (migrationError) {\n            console.error(`Failed to migrate password for user: ${username}`, migrationError);\n            // Don't fail the login if migration fails, but log it\n          }\n        }\n        \n        return done(null, user);\n      } catch (error) {\n        console.error('Authentication error:', error);\n        // Convert all authentication errors to 401 responses, not 500\n        return done(null, false);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      // Validate the request body\n      const validation = insertUserSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({\n          message: \"Invalid registration data\",\n          details: fromZodError(validation.error).toString(),\n        });\n      }\n\n      const { username, password, email, name } = validation.data;\n\n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n\n      // Check if email already exists (if provided)\n      if (email) {\n        const existingEmailUser = await storage.getUserByEmail(email);\n        if (existingEmailUser) {\n          return res.status(400).json({ message: \"Email already exists\" });\n        }\n      }\n\n      // Create new user with hashed password\n      const hashedPassword = await hashPassword(password);\n      const user = await storage.createUser({\n        username,\n        password: hashedPassword,\n        email,\n        name,\n      });\n\n      // Log in the new user\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json(user);\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) {\n        console.error('Login authentication error:', err);\n        return res.status(401).json({ message: \"Authentication failed\" });\n      }\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid username or password\" });\n      }\n      req.login(user, (loginErr) => {\n        if (loginErr) {\n          console.error('Login session error:', loginErr);\n          return res.status(401).json({ message: \"Authentication failed\" });\n        }\n        res.status(200).json(user);\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.status(200).json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n    res.json(req.user);\n  });\n}","size_bytes":6527},"client/src/hooks/useAuth.tsx":{"content":"// Replit Auth context for user session management\nimport { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport { getQueryFn, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport const checkIfUserNeedsOnboarding = (user?: SelectUser): boolean => {\n  if (!user) return false;\n  \n  // User needs onboarding if they're missing firstName or lastName\n  return !user.firstName || !user.lastName;\n};\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  logoutMutation: UseMutationResult<void, Error, void>;\n};\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      // Use window.location for Replit Auth logout to handle redirect properly\n      window.location.href = \"/api/logout\";\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message || \"Failed to logout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        logoutMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":2081},"client/src/lib/protected-route.tsx":{"content":"// Blueprint for protected route component\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}","size_bytes":747},"client/src/pages/auth-page.tsx":{"content":"import { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Music, Users, Star, TrendingUp, Github, Chrome, Apple, Mail, Sparkles } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\n\n\nexport default function AuthPage() {\n  const { user, isLoading } = useAuth();\n  const [, navigate] = useLocation();\n\n  // Redirect if already logged in\n  useEffect(() => {\n    if (user) {\n      navigate(\"/discover\");\n    }\n  }, [user, navigate]);\n\n  // Show loading if redirecting\n  if (isLoading || user) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const handleSignIn = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary/5 via-background to-primary/10\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"grid lg:grid-cols-2 gap-8 min-h-screen items-center\">\n          {/* Left Column - Forms */}\n          <div className=\"flex items-center justify-center\">\n            <Card className=\"w-full max-w-md\">\n              <CardHeader className=\"text-center space-y-6\">\n                <div className=\"flex justify-center\">\n                  <div className=\"h-20 w-auto flex items-center justify-center\">\n                    <img \n                      src=\"/concert-critic-logo.png\" \n                      alt=\"ConcertCritic Logo\" \n                      className=\"h-16 w-auto object-contain\"\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <CardTitle className=\"text-2xl font-bold\">Welcome to ConcertCritic</CardTitle>\n                  <CardDescription>\n                    Discover concerts, write reviews, and connect with fellow music lovers\n                  </CardDescription>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-6\">\n                <div className=\"space-y-4\">\n                  <Button \n                    onClick={handleSignIn}\n                    className=\"w-full h-12 text-base font-medium\"\n                    data-testid=\"button-sign-in-replit\"\n                  >\n                    <Sparkles className=\"mr-2 h-5 w-5\" />\n                    Continue with Your Account\n                  </Button>\n                  \n                  <div className=\"relative\">\n                    <div className=\"absolute inset-0 flex items-center\">\n                      <span className=\"w-full border-t\" />\n                    </div>\n                    <div className=\"relative flex justify-center text-xs uppercase\">\n                      <span className=\"bg-background px-2 text-muted-foreground\">\n                        Continue with Replit Auth\n                      </span>\n                    </div>\n                  </div>\n                  \n                  \n                  <div className=\"text-center space-y-2\">\n                    <p className=\"text-sm text-muted-foreground\">\n                      Secure authentication powered by Replit Auth\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Forgot your password? Password reset is handled automatically during sign-in\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Right Column - Hero Section */}\n          <div className=\"hidden lg:flex flex-col justify-center space-y-8 p-8\">\n            <div className=\"space-y-4\">\n              <h1 className=\"text-4xl font-bold tracking-tight\">\n                Join the Music Community\n              </h1>\n              <p className=\"text-xl text-muted-foreground leading-relaxed\">\n                Discover amazing concerts, share your experiences, and connect with music lovers around the world.\n              </p>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-6\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-primary rounded-lg p-2\">\n                  <Music className=\"h-6 w-6 text-primary-foreground\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">Discover Concerts</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Find live music events near you\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-primary rounded-lg p-2\">\n                  <Star className=\"h-6 w-6 text-primary-foreground\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">Write Reviews</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Share your concert experiences\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-primary rounded-lg p-2\">\n                  <Users className=\"h-6 w-6 text-primary-foreground\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">Connect</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Follow other music enthusiasts\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"flex items-start space-x-3\">\n                <div className=\"bg-primary rounded-lg p-2\">\n                  <TrendingUp className=\"h-6 w-6 text-primary-foreground\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold\">Trending</h3>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Stay up to date with music trends\n                  </p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"pt-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Join thousands of music lovers sharing their concert experiences\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":6576},"client/src/components/write-review-dialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Loader2, Search, Star, X, Music, MapPin, Calendar, Clock, History, Upload, Image as ImageIcon, Video, Trash2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { insertReviewSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Concert, ConcertWithRating } from \"@shared/schema\";\n\n// Extended form schema that includes concert search\nconst writeReviewSchema = insertReviewSchema.omit({\n  userId: true,\n}).extend({\n  concertSearch: z.string().optional(),\n});\n\ntype WriteReviewFormData = z.infer<typeof writeReviewSchema>;\n\ninterface WriteReviewDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  editingReviewId?: string | null; // Optional review ID for edit mode\n}\n\nexport function WriteReviewDialog({ open, onOpenChange, editingReviewId }: WriteReviewDialogProps) {\n  const [concertSearchQuery, setConcertSearchQuery] = useState(\"\");\n  const [selectedConcert, setSelectedConcert] = useState<ConcertWithRating | null>(null);\n  const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\n  const [isUploading, setIsUploading] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  \n  const isEditMode = !!editingReviewId;\n\n  // Fetch existing review data when in edit mode\n  const { data: existingReview, isLoading: isLoadingReview } = useQuery({\n    queryKey: ['/api/reviews', editingReviewId],\n    queryFn: async () => {\n      if (!editingReviewId) return null;\n      const response = await fetch(`/api/reviews/${editingReviewId}`);\n      if (!response.ok) throw new Error('Failed to fetch review');\n      return response.json();\n    },\n    enabled: isEditMode && open,\n  });\n\n  // Helper function to determine concert type - only historical concerts for reviews\n  const getConcertType = (concert: ConcertWithRating) => {\n    // All concerts in review creation are historical since we only use Setlist.fm\n    return { type: 'historical', label: 'Historical', icon: History, color: 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300' };\n  };\n\n  // Search historical concerts from Setlist.fm only\n  const { data: searchResults = [], isLoading: isSearching } = useQuery<ConcertWithRating[]>({\n    queryKey: ['/api/setlistfm/events', { search: concertSearchQuery }],\n    queryFn: async () => {\n      if (!concertSearchQuery.trim()) return [];\n      const response = await fetch(`/api/setlistfm/events?artistName=${encodeURIComponent(concertSearchQuery)}&limit=10`);\n      if (!response.ok) throw new Error('Failed to search historical concerts');\n      return response.json();\n    },\n    enabled: concertSearchQuery.length > 2,\n  });\n\n  const form = useForm<WriteReviewFormData>({\n    resolver: zodResolver(writeReviewSchema),\n    defaultValues: {\n      concertId: \"\",\n      overallRating: 5,\n      performanceRating: 5,\n      soundRating: 5,\n      venueRating: 5,\n      valueRating: 5,\n      reviewText: \"\",\n      photos: [],\n      concertSearch: \"\",\n    },\n  });\n\n  // Pre-populate form when editing an existing review\n  useEffect(() => {\n    if (isEditMode && existingReview && open) {\n      form.reset({\n        concertId: existingReview.concertId,\n        overallRating: existingReview.overallRating,\n        performanceRating: existingReview.performanceRating,\n        soundRating: existingReview.soundRating,\n        venueRating: existingReview.venueRating,\n        valueRating: existingReview.valueRating,\n        reviewText: existingReview.reviewText,\n        photos: existingReview.photos || [],\n        concertSearch: \"\",\n      });\n      \n      // Set concert info for display\n      if (existingReview.concert) {\n        setSelectedConcert(existingReview.concert);\n      }\n      \n      // Set uploaded files for display\n      setUploadedFiles(existingReview.photos || []);\n    } else if (!open) {\n      // Reset when dialog closes\n      form.reset({\n        concertId: \"\",\n        overallRating: 5,\n        performanceRating: 5,\n        soundRating: 5,\n        venueRating: 5,\n        valueRating: 5,\n        reviewText: \"\",\n        photos: [],\n        concertSearch: \"\",\n      });\n      setSelectedConcert(null);\n      setUploadedFiles([]);\n      setConcertSearchQuery(\"\");\n    }\n  }, [isEditMode, existingReview, open, form]);\n\n  const saveReviewMutation = useMutation({\n    mutationFn: async (data: Omit<WriteReviewFormData, 'concertSearch'> & { concert?: any }) => {\n      if (isEditMode && editingReviewId) {\n        // Update existing review\n        const response = await apiRequest('PUT', `/api/reviews/${editingReviewId}`, data);\n        return response.json();\n      } else {\n        // Create new review\n        const response = await apiRequest('POST', '/api/reviews', data);\n        return response.json();\n      }\n    },\n    onSuccess: (data, variables) => {\n      toast({\n        title: isEditMode ? \"Review updated successfully!\" : \"Review created successfully!\",\n        description: isEditMode ? \"Your review has been updated.\" : \"Your concert review has been published.\",\n      });\n      \n      // Invalidate and refetch all relevant queries\n      queryClient.invalidateQueries({ queryKey: ['/api/reviews'] });\n      \n      // Invalidate user-specific queries if we have a user ID\n      if (user?.id) {\n        queryClient.invalidateQueries({ queryKey: ['/api/users', user.id, 'reviews'] });\n        queryClient.invalidateQueries({ queryKey: ['/api/users', user.id, 'stats'] });\n      }\n      \n      // Invalidate all user queries to refresh stats\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      \n      // Reset form state\n      form.reset();\n      setSelectedConcert(null);\n      setConcertSearchQuery(\"\");\n      setUploadedFiles([]);\n      \n      // Close dialog and scroll to top on next frame to prevent UI overlap\n      requestAnimationFrame(() => {\n        onOpenChange(false);\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: isEditMode ? \"Failed to update review\" : \"Failed to create review\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target.files;\n    if (!files || files.length === 0) return;\n\n    setIsUploading(true);\n    const formData = new FormData();\n    Array.from(files).forEach(file => {\n      formData.append('files', file);\n    });\n\n    try {\n      const response = await fetch('/api/upload', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) throw new Error('Failed to upload files');\n\n      const data = await response.json();\n      const newPaths = data.paths || [];\n      const updatedFiles = [...uploadedFiles, ...newPaths];\n      setUploadedFiles(updatedFiles);\n      form.setValue('photos', updatedFiles);\n\n      toast({\n        title: \"Files uploaded successfully!\",\n        description: `${newPaths.length} file(s) added to your review.`,\n      });\n    } catch (error) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Upload failed\",\n        description: \"Failed to upload files. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n      // Reset file input\n      event.target.value = '';\n    }\n  };\n\n  const removeUploadedFile = (index: number) => {\n    const updatedFiles = uploadedFiles.filter((_, i) => i !== index);\n    setUploadedFiles(updatedFiles);\n    form.setValue('photos', updatedFiles);\n  };\n\n  const onSubmit = (data: WriteReviewFormData) => {\n    if (!isEditMode && !selectedConcert) {\n      toast({\n        title: \"Please select a concert\",\n        description: \"You must select a concert to review.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const { concertSearch, ...reviewData } = data;\n    \n    // In edit mode, only send the review data (concertId is already in reviewData)\n    // In create mode, also send the concert object for upsert\n    saveReviewMutation.mutate(\n      isEditMode \n        ? reviewData  // Edit: just send review data, concertId already included\n        : { ...reviewData, concertId: selectedConcert!.id, concert: selectedConcert } // Create: send concert for upsert\n    );\n  };\n\n  const renderStarRating = (value: number, onChange: (value: number) => void, label: string) => {\n    return (\n      <div className=\"space-y-2\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium\">{label}</span>\n          <span className=\"text-sm text-muted-foreground\">{value}/5</span>\n        </div>\n        <div className=\"flex items-center space-x-1\">\n          {Array.from({ length: 5 }, (_, i) => {\n            const starValue = i + 1;\n            return (\n              <button\n                key={i}\n                type=\"button\"\n                className=\"p-1 hover:scale-110 transition-transform\"\n                onClick={() => onChange(starValue)}\n                data-testid={`star-${label.toLowerCase().replace(/\\s+/g, '-')}-${starValue}`}\n              >\n                <Star\n                  className={`h-6 w-6 ${\n                    starValue <= value \n                      ? 'fill-yellow-400 text-yellow-400' \n                      : 'text-muted-foreground hover:text-yellow-400'\n                  }`}\n                />\n              </button>\n            );\n          })}\n        </div>\n      </div>\n    );\n  };\n\n  const selectConcert = (concert: ConcertWithRating) => {\n    setSelectedConcert(concert);\n    form.setValue('concertId', concert.id);\n    setConcertSearchQuery(\"\");\n  };\n\n  const clearSelectedConcert = () => {\n    setSelectedConcert(null);\n    form.setValue('concertId', \"\");\n  };\n\n  // Pre-populate form with existing review data in edit mode\n  useEffect(() => {\n    if (isEditMode && existingReview && open) {\n      form.reset({\n        concertId: existingReview.concertId,\n        overallRating: existingReview.overallRating,\n        performanceRating: existingReview.performanceRating,\n        soundRating: existingReview.soundRating,\n        venueRating: existingReview.venueRating,\n        valueRating: existingReview.valueRating,\n        reviewText: existingReview.reviewText,\n        photos: existingReview.photos || [],\n      });\n      setUploadedFiles(existingReview.photos || []);\n      \n      // Set concert info for display\n      if (existingReview.concert) {\n        setSelectedConcert(existingReview.concert);\n      }\n    } else if (!open) {\n      // Reset form when dialog closes\n      form.reset();\n      setSelectedConcert(null);\n      setConcertSearchQuery(\"\");\n      setUploadedFiles([]);\n    }\n  }, [existingReview, isEditMode, open, form]);\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-write-review\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Music className=\"h-5 w-5 text-primary\" />\n            {isEditMode ? \"Edit Concert Review\" : \"Write Concert Review\"}\n          </DialogTitle>\n          <DialogDescription>\n            {isEditMode \n              ? \"Update your concert review and share your revised thoughts with the community.\"\n              : \"Share your concert experience with the community. Rate different aspects and tell us about your experience.\"}\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Concert Selection */}\n            <div className=\"space-y-4\">\n              <FormLabel>Concert Selection</FormLabel>\n              \n              {selectedConcert ? (\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"space-y-1\">\n                          <h4 className=\"font-semibold\">{selectedConcert.artist}</h4>\n                          <div className=\"flex items-center text-sm text-muted-foreground space-x-3\">\n                            <div className=\"flex items-center gap-1\">\n                              <MapPin className=\"h-3 w-3\" />\n                              {selectedConcert.venue}, {selectedConcert.city}\n                            </div>\n                            <div className=\"flex items-center gap-1\">\n                              <Calendar className=\"h-3 w-3\" />\n                              {new Date(selectedConcert.date).toLocaleDateString()}\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            {selectedConcert.genre && (\n                              <Badge variant=\"secondary\" className=\"text-xs\">\n                                {selectedConcert.genre}\n                              </Badge>\n                            )}\n                            {(() => {\n                              const concertType = getConcertType(selectedConcert);\n                              const IconComponent = concertType.icon;\n                              return (\n                                <Badge className={`text-xs ${concertType.color} border-none`}>\n                                  <IconComponent className=\"h-3 w-3 mr-1\" />\n                                  {concertType.label}\n                                </Badge>\n                              );\n                            })()}\n                          </div>\n                        </div>\n                        {!isEditMode && (\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={clearSelectedConcert}\n                            data-testid=\"button-clear-concert\"\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ) : (\n                <div className=\"space-y-3\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search by artist name\"\n                      value={concertSearchQuery}\n                      onChange={(e) => setConcertSearchQuery(e.target.value)}\n                      className=\"pl-10\"\n                      data-testid=\"input-concert-search\"\n                    />\n                  </div>\n                  \n                  {isSearching && (\n                    <div className=\"flex items-center justify-center py-4\">\n                      <Loader2 className=\"h-6 w-6 animate-spin\" />\n                    </div>\n                  )}\n                  \n                  {searchResults.length > 0 && (\n                    <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                      {searchResults.map((concert) => (\n                        <Card \n                          key={concert.id} \n                          className=\"cursor-pointer hover:bg-accent transition-colors\"\n                          onClick={() => selectConcert(concert)}\n                          data-testid={`concert-option-${concert.id}`}\n                        >\n                          <CardContent className=\"p-3\">\n                            <div className=\"space-y-1\">\n                              <h5 className=\"font-medium\">{concert.artist}</h5>\n                              <div className=\"flex items-center text-sm text-muted-foreground space-x-3\">\n                                <div className=\"flex items-center gap-1\">\n                                  <MapPin className=\"h-3 w-3\" />\n                                  {concert.venue}, {concert.city}\n                                </div>\n                                <div className=\"flex items-center gap-1\">\n                                  <Calendar className=\"h-3 w-3\" />\n                                  {new Date(concert.date).toLocaleDateString()}\n                                </div>\n                              </div>\n                              <div className=\"flex items-center gap-2\">\n                                {concert.genre && (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    {concert.genre}\n                                  </Badge>\n                                )}\n                                {(() => {\n                                  const concertType = getConcertType(concert);\n                                  const IconComponent = concertType.icon;\n                                  return (\n                                    <Badge className={`text-xs ${concertType.color} border-none`}>\n                                      <IconComponent className=\"h-3 w-3 mr-1\" />\n                                      {concertType.label}\n                                    </Badge>\n                                  );\n                                })()}\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  )}\n                  \n                  {concertSearchQuery.length > 2 && !isSearching && searchResults.length === 0 && (\n                    <div className=\"text-center py-4 text-muted-foreground\">\n                      No concerts found. Try a different search term.\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Rating Section */}\n            <div className=\"space-y-6\">\n              <div>\n                <h3 className=\"font-semibold mb-4\">Rate Your Experience</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"overallRating\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <div>\n                            {renderStarRating(field.value, field.onChange, \"Overall Rating\")}\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"performanceRating\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <div>\n                            {renderStarRating(field.value, field.onChange, \"Performance\")}\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"soundRating\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <div>\n                            {renderStarRating(field.value, field.onChange, \"Sound Quality\")}\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"venueRating\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <div>\n                            {renderStarRating(field.value, field.onChange, \"Venue\")}\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"valueRating\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormControl>\n                          <div>\n                            {renderStarRating(field.value, field.onChange, \"Value for Money\")}\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Review Text */}\n            <FormField\n              control={form.control}\n              name=\"reviewText\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Your Review</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Tell us about your concert experience... What stood out? How was the atmosphere? Would you recommend it?\"\n                      className=\"min-h-32 resize-none\"\n                      data-testid=\"textarea-review-text\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <div className=\"flex justify-between text-xs text-muted-foreground\">\n                    <span>Share your honest thoughts and experiences</span>\n                    <span>{field.value.length}/2000</span>\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Photo/Video Upload */}\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <FormLabel>Photos & Videos</FormLabel>\n                <span className=\"text-xs text-muted-foreground\">{uploadedFiles.length}/5</span>\n              </div>\n              \n              <div className=\"flex flex-wrap gap-3\">\n                {uploadedFiles.map((path, index) => (\n                  <div key={index} className=\"relative group\">\n                    <div className=\"w-24 h-24 rounded-md border border-border overflow-hidden bg-muted flex items-center justify-center\">\n                      {path.match(/\\.(jpg|jpeg|png|gif|webp)$/i) ? (\n                        <ImageIcon className=\"h-8 w-8 text-muted-foreground\" />\n                      ) : (\n                        <Video className=\"h-8 w-8 text-muted-foreground\" />\n                      )}\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      size=\"icon\"\n                      className=\"absolute -top-2 -right-2 h-6 w-6 rounded-full opacity-0 group-hover:opacity-100 transition-opacity\"\n                      onClick={() => removeUploadedFile(index)}\n                      data-testid={`button-remove-file-${index}`}\n                    >\n                      <Trash2 className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                ))}\n                \n                {uploadedFiles.length < 5 && (\n                  <label className=\"w-24 h-24 rounded-md border-2 border-dashed border-muted-foreground/25 hover:border-primary hover:bg-accent/50 transition-colors flex flex-col items-center justify-center cursor-pointer group\">\n                    <input\n                      type=\"file\"\n                      accept=\"image/*,video/*\"\n                      multiple\n                      className=\"hidden\"\n                      onChange={handleFileUpload}\n                      disabled={isUploading || uploadedFiles.length >= 5}\n                      data-testid=\"input-file-upload\"\n                    />\n                    {isUploading ? (\n                      <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n                    ) : (\n                      <>\n                        <Upload className=\"h-6 w-6 text-muted-foreground group-hover:text-primary transition-colors\" />\n                        <span className=\"text-xs text-muted-foreground mt-1\">Add</span>\n                      </>\n                    )}\n                  </label>\n                )}\n              </div>\n              \n              <p className=\"text-xs text-muted-foreground\">\n                Upload up to 5 photos or videos (max 10MB each). Images and videos help others experience what you saw!\n              </p>\n            </div>\n\n            <DialogFooter className=\"gap-3\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-review\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={saveReviewMutation.isPending || (!isEditMode && !selectedConcert)}\n                data-testid=\"button-submit-review\"\n              >\n                {saveReviewMutation.isPending && (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                )}\n                {isEditMode ? \"Update Review\" : \"Publish Review\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":26688},"client/src/components/edit-profile-dialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Loader2, Upload, User, Trash2, Check, X, AlertTriangle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Profile update schema - subset of insertUserSchema for profile editing\nconst profileUpdateSchema = z.object({\n  name: z.string().min(1, \"Name is required\").max(100, \"Name too long\"),\n  username: z.string()\n    .optional()\n    .refine((val) => !val || (val.length >= 3 && val.length <= 30), \"Username must be between 3 and 30 characters\")\n    .refine((val) => !val || /^[a-zA-Z0-9_-]+$/.test(val), \"Username can only contain letters, numbers, underscores, and hyphens\")\n    .transform(val => val && val.toLowerCase()),\n  bio: z.string().max(500, \"Bio too long\").optional(),\n  location: z.string().max(100, \"Location too long\").optional(),\n  profileImageUrl: z.string().optional().or(z.literal(\"\")), // Accept any string (including relative paths from object storage)\n});\n\ntype ProfileUpdateData = z.infer<typeof profileUpdateSchema>;\n\ninterface EditProfileDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  user: {\n    id: string;\n    name: string;\n    username?: string;\n    bio?: string;\n    avatar?: string;\n    location?: string;\n  };\n}\n\ninterface UsernameCheckResponse {\n  available: boolean;\n  message: string;\n}\n\nexport function EditProfileDialog({ open, onOpenChange, user }: EditProfileDialogProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameStatus, setUsernameStatus] = useState<'idle' | 'available' | 'taken' | 'invalid'>('idle');\n  const [usernameMessage, setUsernameMessage] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ProfileUpdateData>({\n    resolver: zodResolver(profileUpdateSchema),\n    defaultValues: {\n      name: user.name || \"\",\n      username: user.username || undefined,\n      bio: user.bio || \"\",\n      location: user.location || \"\",\n      profileImageUrl: user.avatar || \"\",\n    },\n  });\n\n  const watchedUsername = form.watch('username');\n\n  // Username availability checking\n  useEffect(() => {\n    const checkUsername = async () => {\n      if (!watchedUsername || watchedUsername.length < 3) {\n        setUsernameStatus('idle');\n        setUsernameMessage('');\n        return;\n      }\n\n      // Don't check if it's the current username\n      if (watchedUsername === user.username) {\n        setUsernameStatus('idle');\n        setUsernameMessage('');\n        return;\n      }\n\n      setIsCheckingUsername(true);\n      setUsernameStatus('idle');\n\n      try {\n        const response = await fetch(`/api/users/check-username/${encodeURIComponent(watchedUsername)}`);\n        const data: UsernameCheckResponse = await response.json();\n        \n        if (data.available) {\n          setUsernameStatus('available');\n        } else {\n          setUsernameStatus('taken');\n        }\n        setUsernameMessage(data.message);\n      } catch (error) {\n        setUsernameStatus('invalid');\n        setUsernameMessage('Failed to check availability');\n      } finally {\n        setIsCheckingUsername(false);\n      }\n    };\n\n    const timeoutId = setTimeout(checkUsername, 500);\n    return () => clearTimeout(timeoutId);\n  }, [watchedUsername, user.username]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: ProfileUpdateData) => {\n      // Split full name into firstName and lastName for backend\n      const nameParts = data.name.trim().split(' ');\n      const firstName = nameParts[0] || '';\n      const lastName = nameParts.length > 1 ? nameParts.slice(1).join(' ') : '';\n      \n      const response = await apiRequest('PUT', '/api/users/me', {\n        firstName,\n        lastName,\n        username: data.username || null,\n        bio: data.bio || null,\n        location: data.location || null,\n        profileImageUrl: data.profileImageUrl || null,\n      });\n      return { updatedData: data, response: await response.json() };\n    },\n    onSuccess: (result) => {\n      const updatedData = result.updatedData;\n      \n      toast({\n        title: \"Profile updated successfully!\",\n        description: \"Your profile changes have been saved.\",\n      });\n      \n      // Update cache directly for immediate UI update\n      queryClient.setQueryData(['/api/user'], (oldData: any) => {\n        if (oldData) {\n          return { \n            ...oldData, \n            username: updatedData.username,\n            profileImageUrl: updatedData.profileImageUrl \n          };\n        }\n        return oldData;\n      });\n      \n      // Update user stats query specifically\n      const userStatsQueryKey = ['/api/users', user.id, 'stats'];\n      queryClient.setQueryData(userStatsQueryKey, (oldData: any) => {\n        if (oldData) {\n          return { \n            ...oldData, \n            username: updatedData.username,\n            profileImageUrl: updatedData.profileImageUrl \n          };\n        }\n        return oldData;\n      });\n      \n      // Invalidate and refetch user data\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      \n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update profile\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteAccountMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest('DELETE', '/api/users/me');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Account deleted successfully\",\n        description: \"Your account and all data have been permanently deleted.\",\n      });\n      \n      // Clear all cached data\n      queryClient.clear();\n      \n      // Redirect to logout\n      setTimeout(() => {\n        window.location.href = \"/api/logout\";\n      }, 1000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to delete account\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteAccount = () => {\n    deleteAccountMutation.mutate();\n  };\n\n  const getUsernameStatusIcon = () => {\n    if (isCheckingUsername) {\n      return <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />;\n    }\n    \n    switch (usernameStatus) {\n      case 'available':\n        return <Check className=\"h-4 w-4 text-green-500\" />;\n      case 'taken':\n      case 'invalid':\n        return <X className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getUsernameStatusColor = () => {\n    switch (usernameStatus) {\n      case 'available':\n        return 'text-green-600';\n      case 'taken':\n      case 'invalid':\n        return 'text-red-600';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select an image smaller than 5MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    try {\n      // Create FormData for file upload\n      const formData = new FormData();\n      formData.append('file', file);\n\n      // Upload to object storage (assuming there's an upload endpoint)\n      const uploadResponse = await fetch('/api/upload/profile-image', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error('Failed to upload image');\n      }\n\n      const { url } = await uploadResponse.json();\n      form.setValue('profileImageUrl', url);\n      \n      toast({\n        title: \"Image uploaded successfully!\",\n        description: \"Your profile image has been updated.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Upload failed\",\n        description: error.message || \"Failed to upload image. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const onSubmit = (data: ProfileUpdateData) => {\n    updateProfileMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md max-h-[90vh] overflow-y-auto\" data-testid=\"dialog-edit-profile\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <User className=\"h-5 w-5\" />\n            Edit Profile\n          </DialogTitle>\n          <DialogDescription>\n            Update your profile information and photo.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Profile Photo Upload */}\n            <div className=\"flex flex-col items-center gap-4\">\n              <Avatar className=\"w-24 h-24\" data-testid=\"avatar-profile-edit\">\n                <AvatarImage src={form.watch('profileImageUrl') || user.avatar} alt={user.name} />\n                <AvatarFallback className=\"text-xl\">{user.name.charAt(0)}</AvatarFallback>\n              </Avatar>\n              \n              <div className=\"relative\">\n                <Input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  onChange={handleImageUpload}\n                  className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer z-10\"\n                  disabled={isUploading}\n                  data-testid=\"input-profile-image\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  disabled={isUploading}\n                  className=\"pointer-events-none\"\n                  data-testid=\"button-upload-image\"\n                >\n                  {isUploading ? (\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  ) : (\n                    <Upload className=\"h-4 w-4 mr-2\" />\n                  )}\n                  {isUploading ? \"Uploading...\" : \"Change Photo\"}\n                </Button>\n              </div>\n            </div>\n\n            {/* Name Field */}\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Name</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Your display name\"\n                      data-testid=\"input-name\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Username Field */}\n            <FormField\n              control={form.control}\n              name=\"username\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Username</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n                        @\n                      </div>\n                      <Input \n                        {...field}\n                        placeholder=\"your_username\"\n                        className=\"pl-8 pr-10\"\n                        data-testid=\"input-username\"\n                        autoComplete=\"off\"\n                      />\n                      <div className=\"absolute right-3 top-1/2 -translate-y-1/2\">\n                        {getUsernameStatusIcon()}\n                      </div>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                  {usernameMessage && (\n                    <p className={`text-sm ${getUsernameStatusColor()}`} data-testid=\"username-availability-message\">\n                      {usernameMessage}\n                    </p>\n                  )}\n                </FormItem>\n              )}\n            />\n\n            {/* Bio Field */}\n            <FormField\n              control={form.control}\n              name=\"bio\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Bio</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Tell us about yourself...\"\n                      className=\"resize-none\"\n                      rows={3}\n                      data-testid=\"input-bio\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Location Field */}\n            <FormField\n              control={form.control}\n              name=\"location\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Location</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"City, Country\"\n                      data-testid=\"input-location\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Danger Zone */}\n            <div className=\"pt-6\">\n              <Separator className=\"mb-4\" />\n              <div className=\"space-y-4\">\n                <div>\n                  <h3 className=\"text-lg font-medium text-destructive flex items-center gap-2\">\n                    <AlertTriangle className=\"h-5 w-5\" />\n                    Danger Zone\n                  </h3>\n                  <p className=\"text-sm text-muted-foreground mt-1\">\n                    Permanently delete your account and all associated data.\n                  </p>\n                </div>\n                \n                <AlertDialog>\n                  <AlertDialogTrigger asChild>\n                    <Button\n                      type=\"button\"\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      className=\"gap-2\"\n                      data-testid=\"button-delete-account\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                      Delete Account\n                    </Button>\n                  </AlertDialogTrigger>\n                  <AlertDialogContent data-testid=\"dialog-confirm-delete\">\n                    <AlertDialogHeader>\n                      <AlertDialogTitle className=\"flex items-center gap-2 text-destructive\">\n                        <AlertTriangle className=\"h-5 w-5\" />\n                        Delete Account Permanently?\n                      </AlertDialogTitle>\n                      <AlertDialogDescription className=\"space-y-2\">\n                        <p>This action cannot be undone. This will permanently delete your account and remove all of your data from our servers, including:</p>\n                        <ul className=\"list-disc list-inside space-y-1 text-sm\">\n                          <li>Your profile and personal information</li>\n                          <li>All your concert reviews and ratings</li>\n                          <li>Your concert history and wishlist</li>\n                          <li>All follows and social connections</li>\n                        </ul>\n                        <p className=\"font-medium\">Are you absolutely sure you want to delete your account?</p>\n                      </AlertDialogDescription>\n                    </AlertDialogHeader>\n                    <AlertDialogFooter>\n                      <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n                      <AlertDialogAction\n                        onClick={handleDeleteAccount}\n                        disabled={deleteAccountMutation.isPending}\n                        className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                        data-testid=\"button-confirm-delete\"\n                      >\n                        {deleteAccountMutation.isPending ? (\n                          <>\n                            <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                            Deleting...\n                          </>\n                        ) : (\n                          <>\n                            <Trash2 className=\"h-4 w-4 mr-2\" />\n                            Delete Account\n                          </>\n                        )}\n                      </AlertDialogAction>\n                    </AlertDialogFooter>\n                  </AlertDialogContent>\n                </AlertDialog>\n              </div>\n            </div>\n\n            <DialogFooter>\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"button-cancel-edit\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={updateProfileMutation.isPending || isUploading || (!!watchedUsername && watchedUsername.length >= 3 && watchedUsername !== user.username && usernameStatus === 'taken')}\n                data-testid=\"button-save-profile\"\n              >\n                {updateProfileMutation.isPending ? (\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                ) : null}\n                Save Changes\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":19143},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}","size_bytes":5543},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport type {\n  ObjectAclPolicy,\n} from \"./objectAcl.js\";\nimport {\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl.js\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n\n  // Uploads a file to private storage and returns the public path\n  async uploadFile(\n    buffer: Buffer,\n    mimeType: string,\n    originalName: string\n  ): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    const fileExtension = originalName.split('.').pop() || 'file';\n    const objectId = `${randomUUID()}.${fileExtension}`;\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const file = bucket.file(objectName);\n\n    // Upload the buffer\n    await file.save(buffer, {\n      contentType: mimeType,\n      metadata: {\n        contentType: mimeType,\n      },\n    });\n\n    // Set public ACL so the file can be accessed\n    await setObjectAclPolicy(file, { \n      visibility: \"public\",\n      owner: \"system\"\n    });\n\n    // Return normalized path\n    return `/objects/uploads/${objectId}`;\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}","size_bytes":9416},"server/setlistFmService.ts":{"content":"/**\n * Setlist.fm API service for fetching historical concert data\n */\n\ninterface SetlistFmArtist {\n  mbid: string;\n  name: string;\n  sortName: string;\n  disambiguation?: string;\n  url: string;\n}\n\ninterface SetlistFmCity {\n  id: string;\n  name: string;\n  state?: string;\n  stateCode?: string;\n  coords?: {\n    lat: number;\n    long: number;\n  };\n  country: {\n    code: string;\n    name: string;\n  };\n}\n\ninterface SetlistFmVenue {\n  id: string;\n  name: string;\n  city: SetlistFmCity;\n  url: string;\n}\n\ninterface SetlistFmSong {\n  name: string;\n  cover?: {\n    mbid: string;\n    name: string;\n    sortName: string;\n    url: string;\n  };\n  info?: string;\n  tape?: boolean;\n}\n\ninterface SetlistFmSet {\n  song: SetlistFmSong[];\n  encore?: number;\n}\n\ninterface SetlistFmSetlist {\n  id: string;\n  versionId: string;\n  eventDate: string; // DD-MM-YYYY format\n  lastUpdated: string;\n  artist: SetlistFmArtist;\n  venue: SetlistFmVenue;\n  sets?: {\n    set: SetlistFmSet[];\n  };\n  tour?: {\n    name: string;\n  };\n  info?: string;\n  url: string;\n}\n\ninterface SetlistFmSearchResponse {\n  type: string;\n  itemsPerPage: number;\n  page: number;\n  total: number;\n  setlist: SetlistFmSetlist[];\n}\n\ninterface SetlistFmArtistSearchResponse {\n  type: string;\n  itemsPerPage: number;\n  page: number;\n  total: number;\n  artist: SetlistFmArtist[];\n}\n\ninterface SetlistFmVenueSearchResponse {\n  type: string;\n  itemsPerPage: number;\n  page: number;\n  total: number;\n  venue: SetlistFmVenue[];\n}\n\nexport interface SetlistFmSearchOptions {\n  artistName?: string;\n  artistMbid?: string;\n  cityName?: string;\n  countryCode?: string;\n  date?: string; // DD-MM-YYYY format\n  venueName?: string;\n  venueId?: string;\n  year?: string;\n  state?: string;\n  tourName?: string;\n  p?: number; // page number, starts at 1\n}\n\nexport class SetlistFmService {\n  private readonly baseUrl = 'https://api.setlist.fm/rest/1.0';\n  private readonly apiKey: string;\n\n  constructor() {\n    this.apiKey = process.env.SETLIST_FM_API_KEY || '';\n  }\n\n  /**\n   * Search for setlists using Setlist.fm API\n   */\n  async searchSetlists(options: SetlistFmSearchOptions = {}): Promise<SetlistFmSetlist[]> {\n    try {\n      // Check if API key is available\n      if (!this.apiKey) {\n        console.warn('Setlist.fm API key not configured - returning empty results');\n        return [];\n      }\n\n      const params = new URLSearchParams();\n      \n      // Add search parameters\n      if (options.artistName) params.append('artistName', options.artistName);\n      if (options.artistMbid) params.append('artistMbid', options.artistMbid);\n      if (options.cityName) params.append('cityName', options.cityName);\n      if (options.countryCode) params.append('countryCode', options.countryCode);\n      if (options.date) params.append('date', options.date);\n      if (options.venueName) params.append('venueName', options.venueName);\n      if (options.venueId) params.append('venueId', options.venueId);\n      if (options.year) params.append('year', options.year);\n      if (options.state) params.append('state', options.state);\n      if (options.tourName) params.append('tourName', options.tourName);\n      if (options.p) params.append('p', String(options.p));\n\n      const url = `${this.baseUrl}/search/setlists?${params.toString()}`;\n      console.log('Fetching from Setlist.fm:', url.replace(this.apiKey, '[API_KEY]'));\n\n      const response = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'x-api-key': this.apiKey,\n          'User-Agent': 'ConcertCritic/1.0'\n        },\n      });\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          return []; // No results found\n        }\n        throw new Error(`Setlist.fm API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: SetlistFmSearchResponse = await response.json();\n      return data.setlist || [];\n    } catch (error) {\n      console.error('Error fetching from Setlist.fm API:', error);\n      // Return empty array instead of throwing to avoid breaking the combined search\n      return [];\n    }\n  }\n\n  /**\n   * Search for artists using Setlist.fm API\n   */\n  async searchArtists(artistName: string, page = 1): Promise<SetlistFmArtist[]> {\n    try {\n      if (!this.apiKey) {\n        console.warn('Setlist.fm API key not configured - returning empty results');\n        return [];\n      }\n\n      const params = new URLSearchParams({\n        artistName,\n        p: String(page),\n        sort: 'relevance'\n      });\n\n      const url = `${this.baseUrl}/search/artists?${params.toString()}`;\n      \n      const response = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'x-api-key': this.apiKey,\n          'User-Agent': 'ConcertCritic/1.0'\n        },\n      });\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          return [];\n        }\n        throw new Error(`Setlist.fm API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: SetlistFmArtistSearchResponse = await response.json();\n      return data.artist || [];\n    } catch (error) {\n      console.error('Error searching artists on Setlist.fm:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Search for venues using Setlist.fm API\n   */\n  async searchVenues(venueName: string, page = 1): Promise<SetlistFmVenue[]> {\n    try {\n      if (!this.apiKey) {\n        console.warn('Setlist.fm API key not configured - returning empty results');\n        return [];\n      }\n\n      const params = new URLSearchParams({\n        name: venueName,\n        p: String(page)\n      });\n\n      const url = `${this.baseUrl}/search/venues?${params.toString()}`;\n      \n      const response = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'x-api-key': this.apiKey,\n          'User-Agent': 'ConcertCritic/1.0'\n        },\n      });\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          return [];\n        }\n        throw new Error(`Setlist.fm API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: SetlistFmVenueSearchResponse = await response.json();\n      return data.venue || [];\n    } catch (error) {\n      console.error('Error searching venues on Setlist.fm:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Get setlists for a specific artist by MBID\n   */\n  async getArtistSetlists(artistMbid: string, page = 1): Promise<SetlistFmSetlist[]> {\n    try {\n      if (!this.apiKey) {\n        console.warn('Setlist.fm API key not configured - returning empty results');\n        return [];\n      }\n\n      const params = new URLSearchParams({\n        p: String(page)\n      });\n\n      const url = `${this.baseUrl}/artist/${artistMbid}/setlists?${params.toString()}`;\n      \n      const response = await fetch(url, {\n        headers: {\n          'Accept': 'application/json',\n          'x-api-key': this.apiKey,\n          'User-Agent': 'ConcertCritic/1.0'\n        },\n      });\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          return [];\n        }\n        throw new Error(`Setlist.fm API error: ${response.status} ${response.statusText}`);\n      }\n\n      const data: SetlistFmSearchResponse = await response.json();\n      return data.setlist || [];\n    } catch (error) {\n      console.error('Error fetching artist setlists from Setlist.fm:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Convert Setlist.fm date format (DD-MM-YYYY) to ISO format (YYYY-MM-DD)\n   */\n  private convertDateFormat(setlistDate: string): string {\n    try {\n      const [day, month, year] = setlistDate.split('-');\n      return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n    } catch (error) {\n      console.warn('Invalid date format from Setlist.fm:', setlistDate);\n      return setlistDate; // Return as-is if parsing fails\n    }\n  }\n\n  /**\n   * Extract setlist songs as a simple array of song names\n   */\n  private extractSetlist(setlist: SetlistFmSetlist): string[] {\n    if (!setlist.sets?.set) return [];\n    \n    const songs: string[] = [];\n    setlist.sets.set.forEach(set => {\n      if (set.song) {\n        set.song.forEach(song => {\n          if (song.name) {\n            songs.push(song.name);\n          }\n        });\n      }\n    });\n    \n    return songs;\n  }\n\n  /**\n   * Transform Setlist.fm setlist to our Concert format\n   */\n  transformSetlist(setlist: SetlistFmSetlist): any {\n    const venue = setlist.venue;\n    const city = venue.city;\n    const setlistSongs = this.extractSetlist(setlist);\n    \n    // Convert date from DD-MM-YYYY to YYYY-MM-DD\n    const isoDate = this.convertDateFormat(setlist.eventDate);\n    \n    // Build city string with state/country info\n    let cityString = city.name;\n    if (city.stateCode) {\n      cityString += `, ${city.stateCode}`;\n    } else if (city.state) {\n      cityString += `, ${city.state}`;\n    }\n    if (city.country?.code && city.country.code !== 'US') {\n      cityString += `, ${city.country.code}`;\n    }\n\n    // Create description with setlist info\n    let description = `${setlist.artist.name} performed at ${venue.name} in ${cityString}`;\n    if (setlist.tour?.name) {\n      description += ` (${setlist.tour.name})`;\n    }\n    if (setlistSongs.length > 0) {\n      description += `. Setlist included ${setlistSongs.length} songs.`;\n    }\n\n    return {\n      // Use Setlist.fm ID with a prefix to avoid conflicts\n      id: `setlistfm_${setlist.id}`,\n      artist: setlist.artist.name,\n      venue: venue.name,\n      city: cityString,\n      date: isoDate,\n      time: 'Historical', // Setlist.fm doesn't provide specific times\n      price: 'Historical', // Historical concerts don't have current pricing\n      genre: 'Music', // Setlist.fm doesn't categorize by genre\n      imageUrl: null, // Setlist.fm doesn't provide images\n      ticketUrl: setlist.url, // Link to setlist.fm page\n      description,\n      // Additional metadata specific to Setlist.fm\n      setlistFmId: setlist.id,\n      setlistFmUrl: setlist.url,\n      artistMbid: setlist.artist.mbid,\n      venueId: venue.id,\n      setlist: setlistSongs,\n      isHistorical: true,\n      lastUpdated: setlist.lastUpdated,\n      ...(setlist.tour?.name && { tourName: setlist.tour.name }),\n      ...(setlist.info && { concertInfo: setlist.info }),\n    };\n  }\n\n  /**\n   * Comprehensive search method that combines multiple search strategies\n   */\n  async searchHistoricalConcerts(options: {\n    search?: string;\n    artist?: string;\n    venue?: string;\n    city?: string;\n    year?: string;\n    limit?: number;\n    page?: number;\n  } = {}): Promise<any[]> {\n    const { search, artist, venue, city, year, limit = 20, page = 1 } = options;\n    \n    try {\n      let searchOptions: SetlistFmSearchOptions = { p: page };\n      \n      // If there's a general search term, try to parse it intelligently\n      if (search) {\n        // Simple heuristics to determine what the search term might be\n        searchOptions.artistName = search;\n        \n        // Also try venue search if no specific artist is provided\n        if (!artist) {\n          // We'll run multiple searches and combine results\n        }\n      }\n      \n      // Add specific parameters\n      if (artist) searchOptions.artistName = artist;\n      if (venue) searchOptions.venueName = venue;\n      if (city) searchOptions.cityName = city;\n      if (year) searchOptions.year = year;\n\n      // Search for setlists\n      const setlists = await this.searchSetlists(searchOptions);\n      \n      // Transform to our format\n      const concerts = setlists.map(setlist => this.transformSetlist(setlist));\n      \n      // Apply limit\n      return concerts.slice(0, limit);\n    } catch (error) {\n      console.error('Error searching historical concerts:', error);\n      return [];\n    }\n  }\n}\n\nexport const setlistFmService = new SetlistFmService();","size_bytes":11841},"client/src/components/comment-dialog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Trash2, Send } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { ReviewCommentWithUser } from \"@shared/schema\";\n\ninterface CommentDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  reviewId: string;\n  reviewTitle: string; // e.g. \"Review by John Doe\"\n}\n\nexport function CommentDialog({ isOpen, onClose, reviewId, reviewTitle }: CommentDialogProps) {\n  const [newComment, setNewComment] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user: currentUser } = useAuth();\n\n  // Fetch comments for this review\n  const { data: comments = [], isLoading: commentsLoading } = useQuery<ReviewCommentWithUser[]>({\n    queryKey: ['/api/reviews', reviewId, 'comments'],\n    queryFn: async () => {\n      const response = await fetch(`/api/reviews/${reviewId}/comments`);\n      if (!response.ok) throw new Error('Failed to fetch comments');\n      return response.json();\n    },\n    enabled: isOpen,\n  });\n\n  // Create comment mutation\n  const createCommentMutation = useMutation({\n    mutationFn: async (commentText: string) => {\n      const response = await apiRequest('POST', `/api/reviews/${reviewId}/comments`, { commentText });\n      if (!response.ok) throw new Error('Failed to post comment');\n      return response.json();\n    },\n    onSuccess: () => {\n      // Invalidate comments query to refetch\n      queryClient.invalidateQueries({\n        queryKey: ['/api/reviews', reviewId, 'comments'],\n      });\n      // Clear the input\n      setNewComment(\"\");\n      toast({\n        title: \"Comment added\",\n        description: \"Your comment has been posted successfully.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Error creating comment:', error);\n      \n      // Handle 401 errors specifically\n      if (error.status === 401) {\n        toast({\n          title: \"Please log in\",\n          description: \"You need to be logged in to post comments.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to post comment. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  // Delete comment mutation\n  const deleteCommentMutation = useMutation({\n    mutationFn: (commentId: string) =>\n      apiRequest('DELETE', `/api/comments/${commentId}`),\n    onSuccess: () => {\n      // Invalidate comments query to refetch\n      queryClient.invalidateQueries({\n        queryKey: ['/api/reviews', reviewId, 'comments'],\n      });\n      toast({\n        title: \"Comment deleted\",\n        description: \"Your comment has been removed.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Error deleting comment:', error);\n      \n      // Handle 401 errors specifically  \n      if (error.status === 401) {\n        toast({\n          title: \"Please log in\",\n          description: \"You need to be logged in to delete comments.\",\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete comment. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!newComment.trim()) return;\n    createCommentMutation.mutate(newComment.trim());\n  };\n\n  const handleDeleteComment = (commentId: string) => {\n    if (window.confirm(\"Are you sure you want to delete this comment?\")) {\n      deleteCommentMutation.mutate(commentId);\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] flex flex-col\" data-testid=\"dialog-comments\">\n        <DialogHeader>\n          <DialogTitle>Comments on {reviewTitle}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"flex-1 overflow-hidden flex flex-col\">\n          {/* Comments List */}\n          <div className=\"flex-1 overflow-y-auto space-y-4 pr-2\">\n            {commentsLoading ? (\n              <div className=\"space-y-4\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"animate-pulse flex gap-3\">\n                    <div className=\"h-8 w-8 bg-muted rounded-full\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-muted rounded w-24\"></div>\n                      <div className=\"h-16 bg-muted rounded\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : comments.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>No comments yet. Be the first to share your thoughts!</p>\n              </div>\n            ) : (\n              comments.map((comment) => (\n                <div \n                  key={comment.id} \n                  className=\"flex gap-3 p-3 rounded-lg bg-muted/50\"\n                  data-testid={`comment-${comment.id}`}\n                >\n                  <Avatar className=\"h-8 w-8\">\n                    <AvatarImage src={comment.user.profileImageUrl || undefined} />\n                    <AvatarFallback>\n                      {(comment.user.firstName || comment.user.username || 'U').charAt(0)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <h4 className=\"text-sm font-medium\">\n                        {comment.user.firstName && comment.user.lastName \n                          ? `${comment.user.firstName} ${comment.user.lastName}`\n                          : comment.user.username || 'Anonymous'}\n                      </h4>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-xs text-muted-foreground\">\n                          {comment.createdAt ? new Date(comment.createdAt).toLocaleDateString() : 'Unknown date'}\n                        </span>\n                        {/* Only show delete button for own comments */}\n                        {currentUser && comment.user.id === currentUser.id && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            className=\"h-6 w-6 opacity-0 group-hover:opacity-100 transition-opacity\"\n                            onClick={() => handleDeleteComment(comment.id)}\n                            disabled={deleteCommentMutation.isPending}\n                            data-testid={`button-delete-comment-${comment.id}`}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                    <p className=\"text-sm leading-relaxed break-words\" data-testid={`text-comment-content-${comment.id}`}>\n                      {comment.commentText}\n                    </p>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n\n          {/* Add Comment Form */}\n          <form onSubmit={handleSubmit} className=\"mt-4 pt-4 border-t space-y-3\">\n            <Textarea\n              placeholder=\"Add a comment...\"\n              value={newComment}\n              onChange={(e) => setNewComment(e.target.value)}\n              className=\"resize-none\"\n              rows={3}\n              maxLength={500}\n              data-testid=\"textarea-new-comment\"\n            />\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-xs text-muted-foreground\">\n                {newComment.length}/500 characters\n              </span>\n              <Button\n                type=\"submit\"\n                disabled={!newComment.trim() || createCommentMutation.isPending}\n                size=\"sm\"\n                data-testid=\"button-submit-comment\"\n              >\n                {createCommentMutation.isPending ? (\n                  \"Posting...\"\n                ) : (\n                  <>\n                    <Send className=\"h-4 w-4 mr-1\" />\n                    Post Comment\n                  </>\n                )}\n              </Button>\n            </div>\n          </form>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8860},"client/src/pages/landing.tsx":{"content":"import { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Music, Search, Users } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport stockImage from '@assets/stock_images/concert_crowd_silhou_9fba38fb.jpg';\nimport logoImage from \"@assets/cc-logo.png\";\n\nexport default function LandingPage() {\n  const { user, isLoading } = useAuth();\n  const [, navigate] = useLocation();\n\n  // Redirect authenticated users to discover page\n  useEffect(() => {\n    if (user) {\n      navigate(\"/discover\");\n    }\n  }, [user, navigate]);\n\n  // Show loading or nothing if redirecting\n  if (isLoading || user) {\n    return null;\n  }\n\n  const handleGetStarted = () => {\n    navigate(\"/auth\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Navigation Header */}\n      <header className=\"relative z-50 bg-background/80 backdrop-blur-md border-b\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            {/* Logo */}\n            <div className=\"flex items-center\">\n              <img \n                src={logoImage} \n                alt=\"ConcertCritic Logo\" \n                className=\"h-10 w-auto\"\n              />\n            </div>\n\n            {/* Navigation */}\n            <nav className=\"hidden md:flex items-center space-x-8\">\n              <Link href=\"/discover\" className=\"text-sm font-medium hover:text-primary transition-colors\">\n                DISCOVER\n              </Link>\n              <Link href=\"/reviews\" className=\"text-sm font-medium hover:text-primary transition-colors\">\n                REVIEWS\n              </Link>\n              <Link href=\"/timeline\" className=\"text-sm font-medium hover:text-primary transition-colors\">\n                TIMELINE\n              </Link>\n            </nav>\n\n            {/* Auth Buttons */}\n            <div className=\"flex items-center space-x-3\">\n              <Link href=\"/auth\">\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-sign-in\">\n                  SIGN IN\n                </Button>\n              </Link>\n              <Link href=\"/auth\">\n                <Button variant=\"default\" size=\"sm\" data-testid=\"button-create-account\">\n                  CREATE ACCOUNT\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative min-h-[70vh] flex items-center justify-center\">\n        {/* Background Image */}\n        <div \n          className=\"absolute inset-0 bg-cover bg-center bg-no-repeat\"\n          style={{ backgroundImage: `url(${stockImage})` }}\n        />\n        \n        {/* Dark Overlay */}\n        <div className=\"absolute inset-0 bg-black/60\" />\n        \n        {/* Hero Content */}\n        <div className=\"relative z-10 text-center text-white px-4 max-w-4xl\">\n          <div className=\"space-y-4 mb-8\">\n            <h1 className=\"text-4xl md:text-5xl lg:text-6xl font-bold leading-tight\">\n              Track concerts you've attended.\n            </h1>\n            <h2 className=\"text-4xl md:text-5xl lg:text-6xl font-bold leading-tight\">\n              Save those you want to see.\n            </h2>\n            <h3 className=\"text-4xl md:text-5xl lg:text-6xl font-bold leading-tight\">\n              Tell your friends what's good.\n            </h3>\n          </div>\n\n          <Button \n            onClick={handleGetStarted}\n            className=\"bg-green-600 hover:bg-green-700 text-white px-8 py-3 text-lg font-semibold rounded-md transition-colors\"\n            data-testid=\"button-get-started\"\n          >\n            Get started — it's free!\n          </Button>\n\n          <p className=\"text-sm text-white/80 mt-4 max-w-lg mx-auto\">\n            The social network for live music lovers. Share your concert experiences and discover your next favorite show.\n          </p>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-background\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 max-w-4xl mx-auto\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Music className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Track Your Shows</h3>\n              <p className=\"text-muted-foreground\">\n                Keep a record of every concert you've attended and rate your experiences.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Search className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Discover Events</h3>\n              <p className=\"text-muted-foreground\">\n                Find upcoming concerts in your area and add them to your wishlist.\n              </p>\n            </div>\n            \n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n                <Users className=\"w-8 h-8 text-primary\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-2\">Connect & Share</h3>\n              <p className=\"text-muted-foreground\">\n                Follow friends, share reviews, and get recommendations for your next show.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":5819},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"] || null,\n    firstName: claims[\"first_name\"] || null,\n    lastName: claims[\"last_name\"] || null,\n    profileImageUrl: claims[\"profile_image_url\"] || null,\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  const domains = process.env.REPLIT_DOMAINS!.split(\",\");\n  const primaryDomain = domains[0]; // Use first domain for localhost mapping\n  \n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = { claims: tokens.claims() } as any;\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of domains) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    // Map localhost/dev hostnames to configured domain strategy\n    const hostname = req.hostname === 'localhost' || req.hostname === '127.0.0.1' ? primaryDomain : req.hostname;\n    passport.authenticate(`replitauth:${hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    // Map localhost/dev hostnames to configured domain strategy  \n    const hostname = req.hostname === 'localhost' || req.hostname === '127.0.0.1' ? primaryDomain : req.hostname;\n    passport.authenticate(`replitauth:${hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    \n    // Persist refreshed tokens back to the session\n    if (req.session && (req.session as any).passport) {\n      (req.session as any).passport.user = user;\n      \n      // Save session to persist the updated tokens before continuing\n      await new Promise<void>((resolve, reject) => {\n        req.session.save((err: any) => {\n          if (err) {\n            console.error('Failed to save session after token refresh:', err);\n            reject(err);\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n    \n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":5317},"client/src/components/onboarding-dialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Loader2, Upload, User, ArrowRight, ArrowLeft, Check, X } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Onboarding schema with separated firstName and lastName fields plus username\nconst onboardingSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\").max(50, \"First name too long\"),\n  lastName: z.string().min(1, \"Last name is required\").max(50, \"Last name too long\"),\n  username: z.string()\n    .optional()\n    .refine((val) => !val || (val.length >= 3 && val.length <= 30), \"Username must be between 3 and 30 characters\")\n    .refine((val) => !val || /^[a-zA-Z0-9_-]+$/.test(val), \"Username can only contain letters, numbers, underscores, and hyphens\")\n    .transform(val => val && val.toLowerCase()),\n  bio: z.string().max(500, \"Bio too long\").optional(),\n  location: z.string().max(100, \"Location too long\").optional(),\n  profileImageUrl: z.string().url().optional().or(z.literal(\"\")),\n});\n\ntype OnboardingData = z.infer<typeof onboardingSchema>;\n\ninterface OnboardingDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  user: {\n    id: string;\n    email?: string;\n    firstName?: string;\n    lastName?: string;\n  };\n}\n\ninterface UsernameCheckResponse {\n  available: boolean;\n  message: string;\n}\n\nexport function OnboardingDialog({ open, onOpenChange, user }: OnboardingDialogProps) {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isUploading, setIsUploading] = useState(false);\n  const [isCheckingUsername, setIsCheckingUsername] = useState(false);\n  const [usernameStatus, setUsernameStatus] = useState<'idle' | 'available' | 'taken' | 'invalid'>('idle');\n  const [usernameMessage, setUsernameMessage] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<OnboardingData>({\n    resolver: zodResolver(onboardingSchema),\n    defaultValues: {\n      firstName: user.firstName || \"\",\n      lastName: user.lastName || \"\",\n      username: undefined,\n      bio: \"\",\n      location: \"\",\n      profileImageUrl: \"\",\n    },\n  });\n\n  const watchedUsername = form.watch('username');\n  const totalSteps = 4;\n\n  // Username availability checking\n  useEffect(() => {\n    const checkUsername = async () => {\n      if (!watchedUsername || watchedUsername.length < 3) {\n        setUsernameStatus('idle');\n        setUsernameMessage('');\n        return;\n      }\n\n      setIsCheckingUsername(true);\n      setUsernameStatus('idle');\n\n      try {\n        const response = await fetch(`/api/users/check-username/${encodeURIComponent(watchedUsername)}`);\n        const data: UsernameCheckResponse = await response.json();\n        \n        if (data.available) {\n          setUsernameStatus('available');\n        } else {\n          setUsernameStatus('taken');\n        }\n        setUsernameMessage(data.message);\n      } catch (error) {\n        setUsernameStatus('invalid');\n        setUsernameMessage('Failed to check availability');\n      } finally {\n        setIsCheckingUsername(false);\n      }\n    };\n\n    const timeoutId = setTimeout(checkUsername, 500);\n    return () => clearTimeout(timeoutId);\n  }, [watchedUsername]);\n\n  const completeOnboardingMutation = useMutation({\n    mutationFn: async (data: OnboardingData) => {\n      const response = await apiRequest('PUT', '/api/users/me', {\n        firstName: data.firstName,\n        lastName: data.lastName,\n        username: data.username || null,\n        bio: data.bio || null,\n        location: data.location || null,\n        profileImageUrl: data.profileImageUrl || null,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Welcome to ConcertCritic!\",\n        description: \"Your profile has been set up successfully.\",\n      });\n      \n      // Invalidate and refetch user data\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      \n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Setup failed\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.type.startsWith('image/')) {\n      toast({\n        title: \"Invalid file type\",\n        description: \"Please select an image file.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Validate file size (max 5MB)\n    if (file.size > 5 * 1024 * 1024) {\n      toast({\n        title: \"File too large\",\n        description: \"Please select an image smaller than 5MB.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsUploading(true);\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const uploadResponse = await fetch('/api/upload/profile-image', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!uploadResponse.ok) {\n        throw new Error('Failed to upload image');\n      }\n\n      const { url } = await uploadResponse.json();\n      form.setValue('profileImageUrl', url);\n      \n      toast({\n        title: \"Image uploaded successfully!\",\n        description: \"Your profile photo has been set.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Upload failed\",\n        description: error.message || \"Failed to upload image. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const nextStep = () => setCurrentStep(Math.min(currentStep + 1, totalSteps));\n  const prevStep = () => setCurrentStep(Math.max(currentStep - 1, 1));\n\n  const onSubmit = (data: OnboardingData) => {\n    completeOnboardingMutation.mutate(data);\n  };\n\n  const getUsernameStatusIcon = () => {\n    if (isCheckingUsername) {\n      return <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />;\n    }\n    \n    switch (usernameStatus) {\n      case 'available':\n        return <Check className=\"h-4 w-4 text-green-500\" />;\n      case 'taken':\n      case 'invalid':\n        return <X className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getUsernameStatusColor = () => {\n    switch (usernameStatus) {\n      case 'available':\n        return 'text-green-600';\n      case 'taken':\n      case 'invalid':\n        return 'text-red-600';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  const canGoNext = () => {\n    if (currentStep === 1) {\n      return form.watch('firstName').trim() && form.watch('lastName').trim();\n    }\n    if (currentStep === 2) {\n      const username = form.watch('username');\n      // Username is optional, but if provided, it must be available\n      return !username || usernameStatus === 'available';\n    }\n    return true;\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={(newOpen) => !completeOnboardingMutation.isPending && onOpenChange(newOpen)}>\n      <DialogContent className=\"sm:max-w-[500px]\" data-testid=\"dialog-onboarding\">\n        <DialogHeader>\n          <DialogTitle className=\"text-2xl font-bold text-center\">\n            Welcome to ConcertCritic! 🎵\n          </DialogTitle>\n          <DialogDescription className=\"text-center\">\n            Let's set up your profile to get started sharing your concert experiences\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"flex justify-center mb-6\">\n          <div className=\"flex space-x-2\">\n            {[1, 2, 3, 4].map((step) => (\n              <div\n                key={step}\n                className={`w-3 h-3 rounded-full ${\n                  step <= currentStep ? 'bg-primary' : 'bg-muted'\n                }`}\n                data-testid={`step-indicator-${step}`}\n              />\n            ))}\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Step 1: Basic Information */}\n            {currentStep === 1 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Basic Information</CardTitle>\n                  <CardDescription>\n                    Tell us your name so others can find and connect with you\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name *</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Your first name\" \n                            {...field} \n                            data-testid=\"input-first-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name *</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Your last name\" \n                            {...field} \n                            data-testid=\"input-last-name\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Step 2: Username */}\n            {currentStep === 2 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Choose Your Username</CardTitle>\n                  <CardDescription>\n                    Pick a unique username that others can use to find you (optional)\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Username</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n                              @\n                            </div>\n                            <Input \n                              {...field}\n                              placeholder=\"your_username\"\n                              className=\"pl-8 pr-10\"\n                              data-testid=\"input-username-onboarding\"\n                              autoComplete=\"off\"\n                            />\n                            <div className=\"absolute right-3 top-1/2 -translate-y-1/2\">\n                              {getUsernameStatusIcon()}\n                            </div>\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                        {usernameMessage && (\n                          <p className={`text-sm ${getUsernameStatusColor()}`} data-testid=\"username-availability-message-onboarding\">\n                            {usernameMessage}\n                          </p>\n                        )}\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Step 3: Profile Photo */}\n            {currentStep === 3 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">Profile Photo</CardTitle>\n                  <CardDescription>\n                    Add a photo to help others recognize you (optional)\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex flex-col items-center gap-4\">\n                    <Avatar className=\"w-32 h-32\" data-testid=\"avatar-onboarding\">\n                      <AvatarImage src={form.watch('profileImageUrl')} alt=\"Profile\" />\n                      <AvatarFallback className=\"text-2xl\">\n                        {form.watch('firstName')?.[0]?.toUpperCase() || 'U'}\n                        {form.watch('lastName')?.[0]?.toUpperCase() || ''}\n                      </AvatarFallback>\n                    </Avatar>\n                    \n                    <div className=\"relative\">\n                      <Input\n                        type=\"file\"\n                        accept=\"image/*\"\n                        onChange={handleImageUpload}\n                        className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                        data-testid=\"input-profile-photo\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        disabled={isUploading}\n                        data-testid=\"button-upload-photo\"\n                      >\n                        {isUploading ? (\n                          <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                        ) : (\n                          <Upload className=\"h-4 w-4 mr-2\" />\n                        )}\n                        {isUploading ? \"Uploading...\" : \"Add Photo\"}\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Step 4: About You */}\n            {currentStep === 4 && (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">About You</CardTitle>\n                  <CardDescription>\n                    Share a bit about yourself and your music interests (optional)\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"bio\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Bio</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Tell us about your favorite music, concerts you've been to, or what you're looking forward to...\"\n                            className=\"resize-none\"\n                            rows={4}\n                            {...field} \n                            data-testid=\"input-bio\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"location\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Location</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"City, State or Country\" \n                            {...field} \n                            data-testid=\"input-location\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Navigation Buttons */}\n            <div className=\"flex justify-between pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={prevStep}\n                disabled={currentStep === 1 || completeOnboardingMutation.isPending}\n                data-testid=\"button-previous\"\n              >\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Previous\n              </Button>\n\n              {currentStep < totalSteps ? (\n                <Button\n                  type=\"button\"\n                  onClick={nextStep}\n                  disabled={!canGoNext() || completeOnboardingMutation.isPending}\n                  data-testid=\"button-next\"\n                >\n                  Next\n                  <ArrowRight className=\"h-4 w-4 ml-2\" />\n                </Button>\n              ) : (\n                <Button\n                  type=\"submit\"\n                  disabled={completeOnboardingMutation.isPending}\n                  data-testid=\"button-complete-setup\"\n                >\n                  {completeOnboardingMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                      Setting up...\n                    </>\n                  ) : (\n                    <>\n                      Complete Setup\n                      <ArrowRight className=\"h-4 w-4 ml-2\" />\n                    </>\n                  )}\n                </Button>\n              )}\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":18376},"client/src/components/change-username-dialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Loader2, Check, X, AlertCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Username change schema\nconst usernameSchema = z.object({\n  username: z.string()\n    .min(3, \"Username must be at least 3 characters\")\n    .max(30, \"Username must be no more than 30 characters\")\n    .regex(/^[a-zA-Z0-9_-]+$/, \"Username can only contain letters, numbers, underscores, and hyphens\")\n    .transform(val => val.toLowerCase()), // Convert to lowercase for consistency\n});\n\ntype UsernameData = z.infer<typeof usernameSchema>;\n\ninterface ChangeUsernameDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  user: {\n    id: string;\n    username?: string;\n  };\n}\n\ninterface UsernameCheckResponse {\n  available: boolean;\n  message: string;\n}\n\nexport function ChangeUsernameDialog({ open, onOpenChange, user }: ChangeUsernameDialogProps) {\n  const [isCheckingAvailability, setIsCheckingAvailability] = useState(false);\n  const [availabilityStatus, setAvailabilityStatus] = useState<'idle' | 'available' | 'taken' | 'invalid'>('idle');\n  const [availabilityMessage, setAvailabilityMessage] = useState('');\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<UsernameData>({\n    resolver: zodResolver(usernameSchema),\n    defaultValues: {\n      username: user.username || \"\",\n    },\n  });\n\n  const watchedUsername = form.watch('username');\n\n  // Debounced availability check\n  useEffect(() => {\n    const checkAvailability = async () => {\n      if (!watchedUsername || watchedUsername.length < 3) {\n        setAvailabilityStatus('idle');\n        setAvailabilityMessage('');\n        return;\n      }\n\n      // Don't check if it's the current username\n      if (watchedUsername === user.username) {\n        setAvailabilityStatus('idle');\n        setAvailabilityMessage('');\n        return;\n      }\n\n      setIsCheckingAvailability(true);\n      setAvailabilityStatus('idle');\n\n      try {\n        const response = await fetch(`/api/users/check-username/${encodeURIComponent(watchedUsername)}`);\n        const data: UsernameCheckResponse = await response.json();\n        \n        if (data.available) {\n          setAvailabilityStatus('available');\n        } else {\n          setAvailabilityStatus('taken');\n        }\n        setAvailabilityMessage(data.message);\n      } catch (error) {\n        setAvailabilityStatus('invalid');\n        setAvailabilityMessage('Failed to check availability');\n      } finally {\n        setIsCheckingAvailability(false);\n      }\n    };\n\n    const timeoutId = setTimeout(checkAvailability, 500); // 500ms debounce\n    return () => clearTimeout(timeoutId);\n  }, [watchedUsername, user.username]);\n\n  const updateUsernameMutation = useMutation({\n    mutationFn: async (data: UsernameData) => {\n      const response = await apiRequest('PUT', '/api/users/me', {\n        username: data.username,\n      });\n      return { username: data.username, response: await response.json() };\n    },\n    onSuccess: (result) => {\n      const newUsername = result.username;\n      \n      toast({\n        title: \"Username updated successfully!\",\n        description: \"Your username has been changed.\",\n      });\n      \n      // Directly update user data in cache to ensure immediate UI update\n      queryClient.setQueryData(['/api/user'], (oldData: any) => {\n        if (oldData) {\n          return { ...oldData, username: newUsername };\n        }\n        return oldData;\n      });\n      \n      // Update user stats query specifically\n      const userStatsQueryKey = ['/api/users', user.id, 'stats'];\n      queryClient.setQueryData(userStatsQueryKey, (oldData: any) => {\n        if (oldData) {\n          return { ...oldData, username: newUsername };\n        }\n        return oldData;\n      });\n      \n      // Update all other user queries as well\n      queryClient.setQueriesData({ queryKey: ['/api/users'] }, (oldData: any) => {\n        if (oldData && oldData.id === user.id) {\n          return { ...oldData, username: newUsername };\n        }\n        return oldData;\n      });\n      \n      // Also invalidate to trigger refetch for any other queries we might have missed\n      queryClient.invalidateQueries({ queryKey: ['/api/user'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      \n      onOpenChange(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Failed to update username\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UsernameData) => {\n    if (availabilityStatus !== 'available' && data.username !== user.username) {\n      return;\n    }\n    updateUsernameMutation.mutate(data);\n  };\n\n  const canSubmit = () => {\n    const username = form.watch('username');\n    if (!username || username === user.username) return false;\n    return availabilityStatus === 'available' && !form.formState.errors.username;\n  };\n\n  const getStatusIcon = () => {\n    if (isCheckingAvailability) {\n      return <Loader2 className=\"h-4 w-4 animate-spin text-muted-foreground\" />;\n    }\n    \n    switch (availabilityStatus) {\n      case 'available':\n        return <Check className=\"h-4 w-4 text-green-500\" />;\n      case 'taken':\n      case 'invalid':\n        return <X className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (availabilityStatus) {\n      case 'available':\n        return 'text-green-600';\n      case 'taken':\n      case 'invalid':\n        return 'text-red-600';\n      default:\n        return 'text-muted-foreground';\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={(newOpen) => !updateUsernameMutation.isPending && onOpenChange(newOpen)}>\n      <DialogContent className=\"sm:max-w-[425px]\" data-testid=\"dialog-change-username\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <AlertCircle className=\"h-5 w-5 text-orange-500\" />\n            Change Username\n          </DialogTitle>\n          <DialogDescription>\n            Choose a unique username that others can use to find and mention you. \n            Usernames must be 3-30 characters and can only contain letters, numbers, underscores, and hyphens.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"username\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Username</FormLabel>\n                  <FormControl>\n                    <div className=\"relative\">\n                      <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-muted-foreground\">\n                        @\n                      </div>\n                      <Input \n                        {...field}\n                        placeholder=\"your_username\"\n                        className=\"pl-8 pr-10\"\n                        data-testid=\"input-username\"\n                        autoComplete=\"off\"\n                      />\n                      <div className=\"absolute right-3 top-1/2 -translate-y-1/2\">\n                        {getStatusIcon()}\n                      </div>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                  {availabilityMessage && (\n                    <p className={`text-sm ${getStatusColor()}`} data-testid=\"username-availability-message\">\n                      {availabilityMessage}\n                    </p>\n                  )}\n                </FormItem>\n              )}\n            />\n\n            {user.username && (\n              <div className=\"bg-muted p-3 rounded-lg\" data-testid=\"current-username-info\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Current username: <span className=\"font-medium\">@{user.username}</span>\n                </p>\n              </div>\n            )}\n\n            <DialogFooter className=\"gap-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => onOpenChange(false)}\n                disabled={updateUsernameMutation.isPending}\n                data-testid=\"button-cancel\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={!canSubmit() || updateUsernameMutation.isPending}\n                data-testid=\"button-save-username\"\n              >\n                {updateUsernameMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Updating...\n                  </>\n                ) : (\n                  'Update Username'\n                )}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9627},"client/src/pages/concert-detail.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useParams, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { Calendar, MapPin, Music, Heart, Star, Clock } from \"lucide-react\";\nimport { WriteReviewDialog } from \"@/components/write-review-dialog\";\nimport { useState } from \"react\";\nimport type { Concert, ReviewWithUser } from \"@shared/schema\";\n\nexport default function ConcertDetail() {\n  const { id } = useParams();\n  const [, navigate] = useLocation();\n  const { toast } = useToast();\n  const [isReviewDialogOpen, setIsReviewDialogOpen] = useState(false);\n\n  // Fetch concert details - first try database, then fall back to Ticketmaster\n  const { data: concert, isLoading: concertLoading } = useQuery<Concert>({\n    queryKey: [\"/api/concerts\", id],\n    queryFn: async () => {\n      // Try fetching from database first\n      const dbResponse = await fetch(`/api/concerts/${id}`);\n      if (dbResponse.ok) {\n        return dbResponse.json();\n      }\n      \n      // If not in database and ID looks like Ticketmaster ID (starts with tm_), fetch from Ticketmaster\n      if (id?.startsWith(\"tm_\")) {\n        const tmResponse = await fetch(`/api/ticketmaster/events/${id}`);\n        if (tmResponse.ok) {\n          return tmResponse.json();\n        }\n      }\n      \n      throw new Error(\"Concert not found\");\n    },\n    enabled: !!id,\n  });\n\n  // Fetch reviews for this concert\n  const { data: reviews = [], isLoading: reviewsLoading } = useQuery<ReviewWithUser[]>({\n    queryKey: [\"/api/concerts\", id, \"reviews\"],\n    enabled: !!id,\n  });\n\n  // Check if concert is wishlisted\n  const { data: wishlist = [] } = useQuery<any[]>({\n    queryKey: [\"/api/wishlist\"],\n  });\n\n  const isWishlisted = wishlist.some((item: any) => item.concertId === id);\n\n  // Wishlist mutations\n  const addToWishlistMutation = useMutation({\n    mutationFn: (concertId: string) =>\n      apiRequest(\"POST\", \"/api/wishlist\", { concertId }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"Added to wishlist\",\n        description: \"Concert saved to your wishlist\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add to wishlist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const removeFromWishlistMutation = useMutation({\n    mutationFn: (concertId: string) =>\n      apiRequest(\"DELETE\", `/api/wishlist/${concertId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"Removed from wishlist\",\n        description: \"Concert removed from your wishlist\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove from wishlist\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleWishlistToggle = () => {\n    if (!id) return;\n    if (isWishlisted) {\n      removeFromWishlistMutation.mutate(id);\n    } else {\n      addToWishlistMutation.mutate(id);\n    }\n  };\n\n  const handleReviewDialogChange = (open: boolean) => {\n    setIsReviewDialogOpen(open);\n    if (!open) {\n      // Refresh reviews when dialog closes (review may have been posted)\n      queryClient.invalidateQueries({ queryKey: [\"/api/concerts\", id, \"reviews\"] });\n    }\n  };\n\n  if (concertLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <Skeleton className=\"h-12 w-3/4\" />\n        <Skeleton className=\"h-64 w-full\" />\n        <Skeleton className=\"h-32 w-full\" />\n      </div>\n    );\n  }\n\n  if (!concert) {\n    return (\n      <div className=\"flex flex-col items-center justify-center py-12\">\n        <Music className=\"h-16 w-16 text-muted-foreground mb-4\" />\n        <h2 className=\"text-2xl font-semibold mb-2\">Concert not found</h2>\n        <p className=\"text-muted-foreground mb-4\">\n          We couldn't find the concert you're looking for\n        </p>\n        <Button onClick={() => navigate(\"/discover\")} data-testid=\"button-back-discover\">\n          Back to Discover\n        </Button>\n      </div>\n    );\n  }\n\n  const averageRating = reviews.length > 0\n    ? reviews.reduce((sum, r) => sum + r.overallRating, 0) / reviews.length\n    : 0;\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"page-concert-detail\">\n      {/* Concert Header */}\n      <div className=\"space-y-4\">\n        <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-4\">\n          <div className=\"space-y-2 flex-1\">\n            <h1 className=\"text-3xl md:text-4xl font-bold\" data-testid=\"text-concert-artist\">\n              {concert.artist}\n            </h1>\n            {concert.genre && (\n              <div className=\"flex flex-wrap gap-2\">\n                <Badge variant=\"secondary\" data-testid={`badge-genre-${concert.genre}`}>\n                  {concert.genre}\n                </Badge>\n              </div>\n            )}\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant={isWishlisted ? \"default\" : \"outline\"}\n              onClick={handleWishlistToggle}\n              disabled={addToWishlistMutation.isPending || removeFromWishlistMutation.isPending}\n              data-testid=\"button-wishlist-toggle\"\n            >\n              <Heart className={`h-4 w-4 mr-2 ${isWishlisted ? \"fill-current\" : \"\"}`} />\n              {isWishlisted ? \"Wishlisted\" : \"Add to Wishlist\"}\n            </Button>\n            <Button onClick={() => setIsReviewDialogOpen(true)} data-testid=\"button-write-review\">\n              <Star className=\"h-4 w-4 mr-2\" />\n              Write Review\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Concert Details Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Event Details</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div className=\"flex items-start gap-3\">\n              <MapPin className=\"h-5 w-5 text-muted-foreground mt-0.5\" />\n              <div>\n                <p className=\"font-medium\" data-testid=\"text-concert-venue\">\n                  {concert.venue}\n                </p>\n                <p className=\"text-sm text-muted-foreground\" data-testid=\"text-concert-location\">\n                  {concert.city}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-start gap-3\">\n              <Calendar className=\"h-5 w-5 text-muted-foreground mt-0.5\" />\n              <div>\n                <p className=\"font-medium\" data-testid=\"text-concert-date\">\n                  {new Date(concert.date).toLocaleDateString(\"en-US\", {\n                    weekday: \"long\",\n                    year: \"numeric\",\n                    month: \"long\",\n                    day: \"numeric\",\n                  })}\n                </p>\n                {concert.time && (\n                  <p className=\"text-sm text-muted-foreground flex items-center gap-1\">\n                    <Clock className=\"h-3 w-3\" />\n                    {concert.time}\n                  </p>\n                )}\n              </div>\n            </div>\n          </div>\n          {concert.ticketUrl && (\n            <div className=\"pt-4 border-t\">\n              <Button\n                asChild\n                variant=\"default\"\n                className=\"w-full md:w-auto\"\n                data-testid=\"button-buy-tickets\"\n              >\n                <a href={concert.ticketUrl} target=\"_blank\" rel=\"noopener noreferrer\">\n                  Buy Tickets\n                </a>\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Reviews Section */}\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-2xl font-semibold\" data-testid=\"heading-reviews\">\n              Reviews\n            </h2>\n            {reviews.length > 0 && (\n              <div className=\"flex items-center gap-2 mt-1\">\n                <div className=\"flex items-center\">\n                  <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                  <span className=\"ml-1 font-medium\" data-testid=\"text-average-rating\">\n                    {averageRating.toFixed(1)}\n                  </span>\n                </div>\n                <span className=\"text-sm text-muted-foreground\" data-testid=\"text-review-count\">\n                  ({reviews.length} {reviews.length === 1 ? \"review\" : \"reviews\"})\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {reviewsLoading ? (\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-48 w-full\" />\n            <Skeleton className=\"h-48 w-full\" />\n          </div>\n        ) : reviews.length === 0 ? (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-12\">\n              <Star className=\"h-12 w-12 text-muted-foreground mb-4\" />\n              <p className=\"text-lg font-medium mb-2\">No reviews yet</p>\n              <p className=\"text-muted-foreground text-center mb-4\">\n                Be the first to review this concert!\n              </p>\n              <Button onClick={() => setIsReviewDialogOpen(true)} data-testid=\"button-write-first-review\">\n                Write the first review\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"space-y-4\">\n            {reviews.map((review) => (\n              <Card key={review.id} data-testid={`card-review-${review.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <div\n                        className=\"h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center text-primary font-semibold cursor-pointer hover-elevate\"\n                        onClick={() => navigate(`/profile/${review.user.username}`)}\n                        data-testid={`avatar-${review.user.username}`}\n                      >\n                        {review.user.username?.substring(0, 2).toUpperCase() || \"U\"}\n                      </div>\n                      <div>\n                        <p\n                          className=\"font-semibold cursor-pointer hover:text-primary\"\n                          onClick={() => navigate(`/profile/${review.user.username}`)}\n                          data-testid={`text-reviewer-${review.user.username}`}\n                        >\n                          {review.user.firstName} {review.user.lastName}\n                        </p>\n                        <p className=\"text-sm text-muted-foreground\">\n                          @{review.user.username}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-1\">\n                      <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />\n                      <span className=\"font-semibold\" data-testid={`text-rating-${review.id}`}>\n                        {review.overallRating.toFixed(1)}\n                      </span>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-foreground mb-4\" data-testid={`text-review-content-${review.id}`}>\n                    {review.reviewText}\n                  </p>\n                  <div className=\"flex gap-4 text-sm text-muted-foreground\">\n                    <span data-testid={`text-likes-${review.id}`}>\n                      {review.likesCount || 0} {review.likesCount === 1 ? \"like\" : \"likes\"}\n                    </span>\n                    <span data-testid={`text-comments-${review.id}`}>\n                      {review.commentsCount || 0} {review.commentsCount === 1 ? \"comment\" : \"comments\"}\n                    </span>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Write Review Dialog */}\n      <WriteReviewDialog\n        open={isReviewDialogOpen}\n        onOpenChange={handleReviewDialogChange}\n      />\n    </div>\n  );\n}\n","size_bytes":12597}},"version":1}